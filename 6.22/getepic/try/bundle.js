"use strict";
angular.module("epicApp", ["ngAnimate", "ngMessages", "ngMaterial", "ui.router", "angucomplete-alt", "monospaced.mousewheel", "slick", "ui.bootstrap", "epic.core"]);
var app = angular.module("epicApp");

function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e
    } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}

function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e
    } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}

function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e
    } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}

function urlDecode(e) {
    return e = e.replace(new RegExp("\\+", "g"), " "), unescape(e)
}

function urlEncode(e) {
    return (e = (e = escape(e)).replace(new RegExp("\\+", "g"), "%2B")).replace(new RegExp("%20", "g"), "+")
}
app.directive("bookCoverImage", ["BookService", "InactiveBookModal", function (e, t) {
        return {
            restrict: "A",
            template: '<img ng-class="classes" ng-src="{{cdn}}drm/{{cdnFolder}}/{{bookFolder}}/cover{{size}}.jpg" og-src="{{cdn}}drm/{{cdnFolder}}/{{bookFolder}}/cover{{size}}.jpg" width="{{w}}" height="{{h}}" ng-click="openBook()" />',
            scope: {
                book: "=bookCoverImage",
                w: "@",
                h: "@",
                dynamic: "@"
            },
            link: function (t, o, n) {
                t.update = function () {
                    t.cdn = Globals.GLOBAL_CDN_BASE, t.book && (t.bookId = t.bookFolder = String(t.book.id || t.book.modelId), t.cdnFolder = t.bookId.slice(-1), t.classes = {
                        coverImage: !0,
                        coverImageSmall: !1
                    }, t.w > 300 ? t.size = "_large" : t.w <= 70 ? (t.size = "", t.classes.coverImageSmall = !0) : t.size = "")
                }, t.update(), t.dynamic && t.$watch("book", function (e, o) {
                    t.book && t.update()
                }), t.openBook = function () {
                    e.openBook(t.book)
                }
            }
        }
    }]), app.directive("bookCoverImageAudioLink", function () {
        return {
            restrict: "A",
            template: '<img class="coverImage" ng-src="{{cdn}}drm/{{cdnFolder}}/{{bookFolder}}/cover_large.jpg" width="50%"/>',
            scope: {
                book: "=bookCoverImageAudioLink"
            },
            link: function (e, t, o) {
                e.$watch("book", function (t, o) {
                    e.book && (e.cdn = Globals.GLOBAL_CDN_BASE, e.bookId = e.bookFolder = e.book.modelId, e.cdnFolder = e.bookId.slice(-1))
                })
            }
        }
    }), app.directive("standaloneQuizCoverParts", function () {
        return {
            restrict: "A",
            template: '<h1 class="quiz-title">{{quizData.title}}</h1><div class="activity-quiz-decals" layout="row" layout-align="center center" ng-style="{\'background-color\': \'#\'+quizData.subjectColor}"><img class="quiz-cover-image" ng-src="{{cdn}}quiz_subject_icons/subject_icon_outline_{{quizData.subject}}.png"/></div>',
            scope: {
                quizData: "=standaloneQuizCoverParts"
            },
            link: function (e, t, o) {
                e.$watch("quizData", function (t, o) {
                    e.quizData && (e.cdn = Globals.GLOBAL_CDN_BASE)
                })
            }
        }
    }), app.directive("progressBar", function () {
        return {
            scope: {
                progress: "=progressBar"
            },
            link: function (e, t, o) {
                t.progressbar({
                    value: e.progress
                })
            }
        }
    }), app.directive("postLoad", function () {
        return {
            scope: {
                onComplete: "&postLoad"
            },
            link: function (e, t, o) {
                e.$parent.$last && e.onComplete()
            }
        }
    }), app.directive("avatarImage", function () {
        return {
            restrict: "A",
            scope: {
                avatarId: "=avatarImage",
                w: "@"
            },
            template: "<div ng-attr-style=\"width:{{w}}px; height:{{w}}px; background-image: url('{{cdn}}journal/avatars/avatar_{{avatarId}}_nav@2x.png'); background-repeat: no-repeat; background-size: contain; display: inline-block\"></div>",
            link: function (e, t, o) {
                e.cdn = Globals.GLOBAL_CDN_BASE, e.w = e.w ? e.w : 90
            }
        }
    }), app.directive("dotLoader", function () {
        return {
            template: '<div class="dot-loader-container"><div ng-if="on"><div class="dot-loader"><div class="bounce1" style="background-color:#{{color}};"></div><div class="bounce2" style="background-color:#{{color}};"></div><div class="bounce3" style="background-color:#{{color}};"></div></div></div></div>',
            scope: {
                on: "=dotLoader",
                color: "@"
            },
            link: function (e, t, o) {
                e.color || (e.color = "ffffff")
            }
        }
    }), app.directive("disableAnimation", ["$animate", function (e) {
        return {
            restrict: "A",
            link: function (t, o, n) {
                n.$observe("disableAnimation", function (t) {
                    e.enabled(!t, o)
                })
            }
        }
    }]), app.directive("backImg", function () {
        return function (e, t, o) {
            o.$observe("backImg", function (e) {
                t.css({
                    "background-image": "url(" + e + ")"
                })
            })
        }
    }), app.directive("bookRating", function () {
        return {
            template: '<div ng-repeat="val in ratings" ng-class="getStarStyle(val)"></div>',
            scope: {
                options: "=bookRating"
            },
            link: function (e, t, o) {
                e.ratings = [1, 2, 3, 4, 5], e.getStarStyle = function (t) {
                    if (void 0 === e.options) return {
                        ratingButtonBase: !0,
                        ratingButton1Empty: !0
                    };
                    var o = 1 == e.options.rated && t <= e.options.rating,
                        n = 0 === e.options.rated && t <= e.options.communityRating,
                        r = !o && !n;
                    return 2 == e.options.style ? {
                        ratingButtonBase: !0,
                        ratingButton2FullUser: o,
                        ratingButton2FullCom: n,
                        ratingButton2Empty: r
                    } : {
                        ratingButtonBase: !0,
                        ratingButton1FullUser: o,
                        ratingButton1FullCom: n,
                        ratingButton1Empty: r
                    }
                }
            }
        }
    }), app.directive("validatePasswordCharacters", function () {
        return {
            require: "ngModel",
            link: function (e, t, o, n) {
                n.$validators.passwordCharacters = function (e) {
                    return !!(e && e.length >= 6)
                }
            }
        }
    }), app.directive("validateEmailAddress", function () {
        var e = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return {
            require: "ngModel",
            scope: {
                emailOptional: "=?"
            },
            link: function (t, o, n, r) {
                r.$validators.validEmail = function (o) {
                    return !(!t.emailOptional || o && "" !== o) || e.test(o)
                }
            }
        }
    }), app.directive("validateExcludedDomains", function () {
        var e = ["getepic.com", "gmail.com", "hotmail.com", "yahoo.com", "aol.com", "msn.com", "icloud.com", "me.com", "att.net", "comcast.com", "sbcglobal.net"];
        return {
            require: "ngModel",
            link: function (t, o, n, r) {
                r.$validators.excludedDomains = function (o) {
                    var n = "";
                    return angular.forEach(t.excludedDomains, function (t, o) {
                        -1 == e.indexOf(t) && (n += t + "|")
                    }), n = n.slice(0, -1), (o.match(new RegExp(n, "g")) || []).length < 1
                }
            }
        }
    }), app.directive("validateEducatorDomain", function () {
        var e = ["student", "gmail.com", "hotmail.com", "yahoo.com", "aol.com", "msn.com", "icloud.com", "me.com", "att.net", "comcast.com", "sbcglobal.net", "yahoo.ca", "qq.com", "aim.com", "netscape.net", "abdopublishing.com", "akashicbooks.com", "amuniversal.com", "annickpress.com", "augusthouse.com", "bearportpublishing.com", "bellweathermedia.com", "blueapple.com", "bdpublishing.com", "deltanow.com", "capstonepub.com", "charlesbridge.com  ", "cherrylakepublishing.com", "editions-chouette.com", "cidcli.com", "cincopuntos.com", "stormfrontpublishing.com", "crabtreebooks.com ", "crestonbooks.co", "shaw.ca", "deltapublishing.com", "trajectory.com", "godine.com", "disney.com", "courier.com", "eerdmans.com", "familius.com", "flowerpotpress.com", "frederator.com", "groundwoodbooks.com", "harpercollins.com", "henson.com", "heritagebuilderspublishing.com", "holidayhouse.com", "ipgbook.com", "kanepress.com", "kidscan.com", "lernerbooks.com", "littlepicklepress.com", "nationalhighlights.com", "midpointtrade.com", "mitchelllane.com", "ngs.org", "naxosusa.com", "nybooks.com", "nomadcommunications.com", "nostarch.com", "norwoodhousepress.com", "northsouth.com", "oasisaudio.com", "openroadmedia.com", "orcabook.com", "owlkids.com", "pangeacorp.com", "papercutz.com", "peachtree-online.com", "pearson.com", "orange.jo", "pippinproperties.com", "purpletoadpublishing.com", "redchairpress.com", "rourkeeducationalmedia.com", "sdlback.com", "secondstorypress.ca", "videotron.ca", "simonandschuster.com", "skyhorsepublishing.com", "sleepingbearpress.com", "starwalkkids.com", "suppertimentertainment.com", "teachercreatedmaterials.com", "roadrunner.com", "twinsisters.com", "vearsa.com", "wisconsinhistory.org", "workman.com", "xistpublishing.com", "mmm.com", "akjbooks.com", "baker-taylor.com", "bookwormcentral.com", "btsb.com", "gumdropbooks.com", "childrensplusinc.com", "classroomlibrary.com", "crosscaneducation.com", "dlbbooks.com", "ebsco.com", "mrsnelsons.com", "follett.com", "ingramcontent.com", "lectorum.com", "mackin.com", "mediasourceinc.com", "capstonepub.com", "overdrive.com", "perfectionlearning.com", "perma-bound.com", "rainbowbooks.com", "booksource.com", "turtleback.com", "jaffeebooks.com", "163.com", "live.com", "daum.net", "naver.com", "hanmail.net", "nate.com", "mail.com", "ezweb.ne.jp", "yahoo.co.uk", "yahoo.co.jp", "i.softbank.jp", "outlook.com", "hotmail.co.uk", "hotmail.co.jp", "docomo.ne.jp", "ymail.com", "me.com", "mine.email.ne.jp", "126.com", "sohu.com", "live.com", "yandex.ru", "live.cn", "sina.com", "yahoo.com.hk", "hotmail.fr", "email.com", "ms31.hinet.net", "yahoo.com.tw"],
            t = ["sd163.com", "bangorvikings.org", "trinityvikings.org", "hcsvikings.org", "semmustangs.org", "hpsvikings.org", "csdmail.com"];
        return {
            require: "ngModel",
            link: function (o, n, r, i) {
                i.$validators.validEducatorDomain = function (o) {
                    if (!o) return !0;
                    for (var n = o.substring(o.lastIndexOf("@") + 1).toLowerCase(), r = 0; r < t.length; r++)
                        if (n.includes(t[r])) return !0;
                    for (var i = 0; i < e.length; i++)
                        if (n.includes(e[i])) return !1;
                    return !0
                }
            }
        }
    }), app.directive("validateLoginAvailable", ["$http", "$q", "Data", function (e, t, o) {
        return {
            require: "ngModel",
            link: function (e, n, r, i) {
                i.$asyncValidators.loginAvailable = function (e) {
                    return o.get("WebAccount", "noAuthValidateLogin", {
                        login: e
                    }).then(function (e) {
                        return !!e.result.status || t.reject(e)
                    }, function (e) {
                        return !0
                    })
                }
            }
        }
    }]), app.directive("formIcon", function () {
        var e = '<i class="fa fa-times fa-2x fa-red"></i>',
            t = '<i class="fa fa-check fa-2x fa-green"></i>',
            o = '<i class=""></i>';
        return {
            restrict: "E",
            scope: {
                input: "="
            },
            link: function (n, r, i) {
                var a = function () {
                    n.input.$touched ? n.input.$valid ? r.html(t).show() : r.html(e).show() : r.html(o).show()
                };
                n.$watch("input.$valid", a), n.$watch("input.$touched", a)
            }
        }
    }), app.directive("watchFields", ["Logsly", function (e) {
        return function (e, t, o) {
            var n = ["required", "validEmail", "passwordCharacters", "loginAvailable"],
                r = {
                    required: "Missing required field!",
                    validEmail: "Please enter a valid email address!",
                    passwordCharacters: "Password too short!",
                    loginAvailable: "The email you entered is already in use!"
                };
            e.$watch(o.name + ".$error", function (t, i) {
                for (var a = 0; a < n.length; a++) {
                    var l = n[a];
                    if (t[l]) {
                        var s = t[l][0];
                        if ((e[o.name].$submitted || s.$touched) && t && t[l]) return void(e.errorMessage = r[l])
                    }
                }
                e.errorMessage = ""
            }, !0)
        }
    }]),
    function () {
        function e(e) {
            return e.toTime
        }

        function t(e) {
            var t = e.isEducator();
            return function (e) {
                return "Not Subscribed" == e && t ? "Educator Account" : e
            }
        }
        e.$inject = ["StringService"], t.$inject = ["AccountService"], angular.module("epicApp").filter("orderObjectBy", function () {
            return function (e, t, o) {
                var n = [];
                return angular.forEach(e, function (e) {
                    n.push(e)
                }), n.sort(function (e, o) {
                    return e[t] > o[t] ? 1 : -1
                }), o && n.reverse(), n
            }
        }).filter("plusOne", function () {
            return function (e) {
                return parseInt(e, 10) + 1
            }
        }).filter("startFrom", function () {
            return function (e, t) {
                return t = +t, e.slice(t)
            }
        }).filter("toDate", function () {
            return function (e) {
                var t = new Date(e *= 1e3);
                return t.getMonth() + 1 + "/" + t.getDate() + "/" + t.getFullYear()
            }
        }).filter("filterTime", e).filter("toHours", function () {
            return function (e) {
                return Math.floor(e / 3600 * 10) / 10
            }
        }).filter("removePendingProfilesForAccountId", function () {
            return function (e, t) {
                var o = [];
                return angular.forEach(e, function (e, n) {
                    !e.isProfilePendingApproval || e.isProfilePendingApproval() && !e.isOwnedByAccountId(t) || o.push(e)
                }), o
            }
        }).filter("subscriptionStatus", t).filter("classroomCode", function () {
            return function (e) {
                return (e = e || "").slice(0, 3) + "-" + e.slice(3)
            }
        })
    }(),
    function () {
        var e = angular.module("epicApp");
        e.config(["$stateProvider", "$urlRouterProvider", "$locationProvider", "$animateProvider", function (e, t, o, n) {
            t.otherwise(function (e, t) {
                var o = e.get("$state"),
                    n = t.url();
                ["/explore", "/test", "/empty"].includes(n) ? o.go("ng2") : (n = Globals.GLOBAL_IS_AUTHED ? "profileSelect" : "signIn", o.go(n))
            }), t.when("/epic-reading-club", "/epic-classroom-rewards"), e.decorator("parent", function (e, t) {
                return e.self.$$state = function () {
                    return e
                }, t(e)
            });
            var r = e.state;
            e.state = function (e, t) {
                return t.resolve || (t.resolve = {}), r.apply(this, arguments)
            }, e.state("ng2", {
                requiresLogin: !1
            }).state("edu-dashboard", {
                url: "/edu-dashboard",
                title: "dashboard",
                templateUrl: "edu-dashboard/edu-dashboard.template.html",
                controller: "EduDashboardCtrl",
                controllerAs: "vm",
                requiresLogin: !0
            }).state("browse", {
                url: "/?login?sessionKey?section?banner_date_time_string",
                title: "App",
                templateUrl: "browse/browse.html",
                controller: "BrowseController",
                requiresLogin: !0
            }).state("read", {
                url: "/read/:bookId",
                title: "Read",
                templateUrl: "browse/browse.html",
                controller: "BrowseController",
                requiresLogin: !0
            }).state("standalone-quiz", {
                url: "/quiz/:quizId",
                title: "Quiz",
                templateUrl: "browse/browse.html",
                controller: "BrowseController",
                requiresLogin: !0
            }).state("search", {
                url: "/search?term",
                title: "Search",
                params: {
                    term: null
                },
                templateUrl: "search/search.html",
                controller: "SearchController",
                requiresLogin: !0
            }).state("my-library", {
                abstract: !0,
                url: "/my-library",
                title: "My Library",
                templateUrl: "my-library/my-library.html",
                controller: "MyLibraryCtrl"
            }).state("my-library.collections", {
                url: "/collections",
                templateUrl: "my-library/collections/my-library.collections.html",
                controller: "MyLibraryCollectionsCtrl",
                requiresLogin: !0,
                params: {
                    deferredDeletedCollection: null
                }
            }).state("my-library.favorites", {
                url: "/favorites",
                templateUrl: "my-library/favorites/my-library.favorites.html",
                controller: "MyLibraryFavoritesCtrl",
                requiresLogin: !0
            }).state("my-library.recent-reads", {
                url: "/recent-reads",
                templateUrl: "my-library/recent-reads/my-library.recent-reads.html",
                controller: "MyLibraryRecentReadsCtrl",
                requiresLogin: !0
            }).state("assignments", {
                url: "/assignments",
                templateUrl: "assignments/assignments.html",
                controller: "AssignmentsCtrl",
                requiresLogin: !0
            }).state("parentTeacherMailbox", {
                url: "/mailbox?cert",
                templateUrl: "mailbox/mailbox.html",
                controller: "MailboxCtrl",
                requiresLogin: !0
            }).state("profile", {
                url: "/profile",
                redirectTo: "dashboard.profiles"
            }).state("dashboard", {
                abstract: !0,
                url: "/dashboard",
                title: "Dashboard",
                templateUrl: "profile/profile.html",
                controller: "ProfileController",
                requiresLogin: !0,
                resolve: {
                    levelDataLib: ["Data", function (e) {
                        return e.get("WebUser", "getLevelData").then(function (e) {
                            if (e.result) return e.result
                        }).catch(function (e) {
                            return e
                        })
                    }]
                }
            }).state("dashboard.profiles", {
                url: "/profiles",
                templateUrl: "profile/profiles/profile-rows.html",
                controller: "ProfileRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("dashboard.profiles.activity", {
                views: {
                    "profile-activity-view@": {
                        templateUrl: "profile/activity/profile-activity-rows.html",
                        controller: "ProfileActivityRowsCtrl"
                    }
                }
            }).state("dashboard.profiles.assignments", {
                views: {
                    "profile-activity-view@": {
                        templateUrl: "profile/assignment/profile-assignment-rows.html",
                        controller: "ProfileAssignmentRowsCtrl"
                    }
                }
            }).state("dashboard.profiles.quizzes", {
                views: {
                    "profile-activity-view@": {
                        templateUrl: "profile/quiz/profile-quiz-rows.html",
                        controller: "ProfileQuizRowsCtrl"
                    }
                }
            }).state("dashboard.activity", {
                url: "/activity",
                templateUrl: "profile/activity/profile-activity-rows.html",
                controller: "ProfileActivityRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("dashboard.assignments", {
                url: "/assignments",
                templateUrl: "profile/assignment/profile-assignment-rows.html",
                controller: "ProfileAssignmentRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("dashboard.quizzes", {
                url: "/quizzes",
                templateUrl: "profile/quiz/profile-quiz-rows.html",
                controller: "ProfileQuizRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("dashboard.achievements", {
                url: "/achievements",
                templateUrl: "profile/achievements/profile-achievement-rows.html",
                controller: "ProfileAchievementRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("activities", {
                url: "/activities",
                title: "Activities",
                templateUrl: "profile/educator-activities.html",
                controller: "EducatorActivitiesController",
                redirectTo: "activities.class-log",
                requiresLogin: !0
            }).state("activities.summary", {
                url: "/summary",
                templateUrl: "profile/profiles/educator-summary-rows.html",
                controller: "EducatorSummaryRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("activities.class-log", {
                url: "/class-log",
                templateUrl: "profile/activity/profile-activity-rows.html",
                controller: "ProfileActivityRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("activities.assignments", {
                url: "/assignments",
                templateUrl: "profile/assignment/profile-assignment-rows.html",
                controller: "ProfileAssignmentRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("activities.quizzes", {
                url: "/quizzes",
                templateUrl: "profile/quiz/profile-quiz-rows.html",
                controller: "ProfileQuizRowsCtrl",
                requiresLogin: !0,
                params: {}
            }).state("roster", {
                url: "/roster",
                title: "Roster",
                templateUrl: "profile/educator-roster.html",
                controller: "EducatorRosterController",
                redirectTo: "roster.roster-tab",
                requiresLogin: !0,
                params: {
                    sendEmail: !1,
                    profileCreateFormIsCollapsed: !0
                }
            }).state("roster.roster-tab", {
                url: "",
                templateUrl: "profile/profiles/educator-roster-rows.html",
                controller: "EducatorRosterRowsCtrl",
                requiresLogin: !0,
                params: {
                    sendEmail: !1
                }
            }).state("roster.student-login", {
                url: "/student-login",
                templateUrl: "profile/educator-roster/educator-roster-student-login.html",
                controller: "EducatorRosterStudentLoginCtrl",
                requiresLogin: !0,
                params: {}
            }).state("roster.share", {
                url: "/share",
                templateUrl: "profile/educator-roster/educator-roster-share.html",
                controller: "EducatorRosterShareCtrl",
                requiresLogin: !0,
                params: {}
            }).state("roster.tap", {
                abstract: !0,
                url: "/epic-classroom-rewards",
                templateUrl: "tap/tap.html",
                controller: "TapMainCtrl",
                requiresLogin: !0,
                params: {}
            }).state("roster.tap.index", {
                url: "",
                title: "Epic! Classroom Rewards Program",
                templateUrl: "tap/index/tap-index.html",
                controller: "TapIndexCtrl",
                requiresLogin: !0
            }).state("roster.tap.enroll", {
                url: "/enroll",
                title: "Epic! Classroom Rewards Enrollment",
                templateUrl: "tap/enroll/tap-enroll.html",
                controller: "TapEnrollCtrl",
                requiresLogin: !0
            }).state("roster.tap.redeem", {
                url: "/redeem",
                title: "Redeem Epic! Classroom Rewards Points",
                templateUrl: "tap/redeem/tap-redeem.html",
                controller: "TapRedeemCtrl",
                requiresLogin: !0
            }).state("roster.tap.confirm", {
                url: "/confirm",
                title: "Confirm Epic! Classroom Rewards Points Redemption",
                templateUrl: "tap/confirm/tap-confirm.html",
                controller: "TapConfirmCtrl",
                requiresLogin: !0
            }).state("roster.tap.success", {
                url: "/success",
                title: "Epic! Classroom Rewards Redemption Success",
                templateUrl: "tap/success/tap-success.html",
                controller: "TapSuccessCtrl",
                requiresLogin: !0
            }).state("roster.tap.faq", {
                url: "/faq",
                title: "Epic! Classroom Rewards FAQ",
                templateUrl: "tap/faq/tap-faq.html",
                controller: "TapFaqCtrl",
                requiresLogin: !0
            }).state("collection", {
                url: "/collection/:collectionId",
                title: "Collection",
                templateUrl: "collection/collection.html",
                controller: "CollectionController",
                requiresLogin: !0
            }).state("original", {
                url: "/content-title/:originalId",
                title: "Originals",
                templateUrl: "originals-collection/originals.html",
                controller: "OriginalsController",
                requiresLogin: !0,
                params: {
                    originalId: null
                }
            }).state("user-collection", {
                url: "/user-collection/:collectionId",
                title: "Collection",
                templateUrl: "user-collection/user-collection.html",
                controller: "UserCollectionController",
                requiresLogin: !0
            }).state("book_list", {
                url: "/list/:listId",
                title: "Book List",
                templateUrl: "book_list/book_list.html",
                controller: "BookListController",
                requiresLogin: !0
            }).state("readingLog", {
                url: "/reading-log",
                title: "Reading Log",
                templateUrl: "reading-log/reading-log.html",
                controller: "ReadingLogController",
                requiresLogin: !0
            }).state("readingLog.id", {
                url: "/:id",
                controller: ["$stateParams", function (e) {}],
                requiresLogin: !0
            }).state("accountManage", {
                url: "/account-manage?src",
                title: "Manage Account",
                templateUrl: "account-manage/account-manage.html",
                controller: "AccountManageController",
                controllerAs: "ctrl",
                requiresLogin: !0
            }).state("personalizeAccountType", {
                url: "/personalize_account_type",
                title: "Welcome to Epic!",
                templateUrl: "nuf/personalize-account-type/personalize-account-type.html",
                controller: "NufAccountTypeController"
            }).state("personalizeEducatorWelcome", {
                url: "/personalize_educator_welcome?educator",
                title: "Welcome to Epic! for Educators",
                templateUrl: "nuf/personalize-account-educator-welcome/personalize-account-educator-welcome.html",
                controller: "NufEducatorWelcomeController"
            }).state("nuf", {
                url: "/nuf?teacheroffer",
                title: "",
                templateUrl: "nuf-new/nuf-new.html",
                controller: "NufNewController"
            }).state("nuf.age", {
                url: "/age",
                title: "Select Age",
                templateUrl: "nuf-new/nuf-age/nuf-age.html",
                controller: "NufNewAgeController"
            }).state("nuf.subjects", {
                url: "/subjects",
                title: "Select Favorite Subjects",
                templateUrl: "nuf-new/nuf-subjects/nuf-subjects.html",
                controller: "NufNewSubjectsController"
            }).state("nuf.connectTeacher", {
                url: "/connect-teacher",
                title: "Find Your Teacher",
                templateUrl: "nuf-new/connect-teacher/connect-teacher.html",
                controller: "ConnectTeacherController"
            }).state("nuf.connectStudent", {
                url: "/connect-student",
                title: "Find Your Child",
                templateUrl: "nuf-new/connect-student/connect-student.html",
                controller: "ConnectStudentController"
            }).state("nuf.connectConfirmChild", {
                url: "/connect-confirm",
                title: "Confirm Child Information",
                templateUrl: "nuf-new/connect-confirm-child/connect-confirm-child.html",
                controller: "ConnectConfirmChildController"
            }).state("eduSignUp", {
                url: "/edu-signup",
                templateUrl: "edu-signup/edu-signup.html",
                controller: "EduSignUpController",
                requiresLogin: !1
            }).state("eduSignUp.create", {
                url: "/create",
                title: "Create an Account",
                templateUrl: "edu-signup/create/edu-signup-create.html",
                controller: "EduSignUpCreateController"
            }).state("eduSignUp.more", {
                url: "/more?v",
                title: "Tell Us About Yourself",
                templateUrl: "edu-signup/more/edu-signup-more.html",
                controller: "EduSignUpMoreController"
            }).state("eduSignUp.roster", {
                url: "/roster",
                title: "Add Your Roster",
                templateUrl: "edu-signup/roster/edu-signup-roster.html",
                controller: "EduSignUpRosterController"
            }).state("signIn", {
                url: "/sign_in",
                title: "Sign In",
                templateUrl: "sign-in/sign-in.html",
                controller: "SignInController"
            }).state("subscribeSuccess", {
                url: "/subscribe/success"
            }).state("signInMobile", {
                url: "/sign-in-mobile?mobileToWebAppSigninToken?destinationRoute?sig",
                title: "Sign In From Mobile",
                templateUrl: "sign-in/mobile/sign-in-mobile.html",
                controller: "SignInMobileCtrl"
            }).state("educatorSuccess", {
                url: "/educator/success",
                title: "App",
                templateUrl: "browse/browse.html",
                controller: "BrowseController",
                requiresLogin: !0
            }).state("cancel", {
                abstract: !0,
                url: "/cancel",
                templateUrl: "cancel/cancel.template.html"
            }).state("cancel.index", {
                url: "",
                templateUrl: "cancel/cancel-confirm.template.html",
                controller: "CancelController",
                controllerAs: "vm"
            }).state("cancel.feedback", {
                url: "/feedback",
                templateUrl: "cancel/cancel-feedback.template.html",
                controller: "CancelController",
                controllerAs: "vm"
            }).state("cancel.confirmed", {
                url: "/confirmed",
                templateUrl: "cancel/cancel-confirmed.template.html",
                controller: "CancelController",
                controllerAs: "vm"
            }).state("unsubscribe", {
                abstract: !0,
                url: "/unsubscribe",
                templateUrl: "unsubscribe/unsubscribe.html"
            }).state("unsubscribe.mission", {
                url: "",
                title: "Unsubscribe",
                templateUrl: "unsubscribe/unsubscribe.mission.html",
                controller: "UnsubscribeMissionCtrl"
            }).state("unsubscribe.feedback", {
                url: "/feedback",
                params: {
                    userData: null
                },
                title: "Unsubscribe",
                templateUrl: "unsubscribe/unsubscribe.feedback.html",
                controller: "UnsubscribeFeedbackCtrl"
            }).state("unsubscribe.success", {
                url: "/success",
                params: {
                    promoSuccess: null,
                    promoData: null
                },
                title: "Unsubscribe",
                templateUrl: "unsubscribe/unsubscribe.success.html",
                controller: "UnsubscribeSuccessCtrl",
                requiresLogin: !1
            }).state("profileSelect", {
                url: "/profile-select",
                title: "Select a Profile",
                templateUrl: "profile-select/profile-select.html",
                controller: "ProfileSelectCtrl",
                requiresLogin: !1,
                resolve: {
                    BookPresentationsLogger: "BookPresentationsLogger"
                },
                onEnter: ["BookPresentationsLogger", function (e) {
                    e.cancelSendLogTimer(), e.sendLogToBigQuery()
                }],
                onExit: ["BookPresentationsLogger", "SearchService", function (e, t) {
                    e.init(), t.resetLastTerm()
                }]
            }), o.html5Mode(!0)
        }]), e.config(["$mdThemingProvider", function (e) {
            e.definePalette("customPrimary", {
                50: "#ffffff",
                100: "#ffffff",
                200: "#f2f4f5",
                300: "#e4e8ea",
                400: "#d6dbde",
                500: "#C8CFD3",
                600: "#bac3c8",
                700: "#acb6bc",
                800: "#9daab1",
                900: "#8f9ea6",
                A100: "#ffffff",
                A200: "#ffffff",
                A400: "#ffffff",
                A700: "#81919a"
            });
            e.definePalette("customAccent", {
                50: "#f9c4b1",
                100: "#f7b299",
                200: "#f5a082",
                300: "#f38f6a",
                400: "#f17d53",
                500: "#EF6B3B",
                600: "#ed5923",
                700: "#e44b13",
                800: "#cd4311",
                900: "#b53b0f",
                A100: "#fbd6c8",
                A200: "#fce8e0",
                A400: "#fef9f8",
                A700: "#9e330d"
            });
            e.definePalette("customWarn", {
                50: "#ffb280",
                100: "#ffa266",
                200: "#ff934d",
                300: "#ff8333",
                400: "#ff741a",
                500: "#ff6400",
                600: "#e65a00",
                700: "#cc5000",
                800: "#b34600",
                900: "#993c00",
                A100: "#ffc199",
                A200: "#ffd1b3",
                A400: "#ffe0cc",
                A700: "#803200"
            });
            e.definePalette("customBackground", {
                50: "#ffffff",
                100: "#fafeff",
                200: "#e2f6fd",
                300: "#cbeffb",
                400: "#b3e8fa",
                500: "#9be1f8",
                600: "#83daf6",
                700: "#6bd3f5",
                800: "#53ccf3",
                900: "#3cc4f1",
                A100: "#ffffff",
                A200: "#ffffff",
                A400: "#ffffff",
                A700: "#24bdf0"
            }), e.theme("default").primaryPalette("customPrimary").accentPalette("customAccent").warnPalette("customWarn").backgroundPalette("customBackground")
        }])
    }(),
    function () {
        function e(e) {
            e.init()
        }
        e.$inject = ["LaunchService"], angular.module("epicApp").controller("MainCtrl", e)
    }(), angular.module("epicApp").directive("bindHtmlCompile", ["$compile", function (e) {
        return {
            restrict: "A",
            link: function (t, o, n) {
                t.$watch(function (e) {
                    return e.$eval(n.bindHtmlCompile)
                }, function (n, r) {
                    o.html(n), e(o.contents())(t)
                }), o.on("$destroy", function () {
                    t.$destroy()
                })
            }
        }
    }]),
    function () {
        function e(e) {
            return function (t, o, n) {
                var r = 0,
                    i = 0,
                    a = 0,
                    l = 0;

                function s(e) {
                    l = e.screenY - i, a = e.screenX - r, o.css({
                        top: l + "px",
                        left: a + "px"
                    })
                }

                function c() {
                    e.off("mousemove", s), e.off("mouseup", c)
                }
                o.css({
                    position: "absolute",
                    cursor: "pointer",
                    display: "block"
                }), o.on("mousedown", function (t) {
                    t.preventDefault(), r = t.screenX - a, i = t.screenY - l, e.on("mousemove", s), e.on("mouseup", c)
                })
            }
        }
        e.$inject = ["$document"], angular.module("epicApp").directive("draggable", e)
    }(), angular.module("epicApp").directive("inputAutofocus", ["$timeout", function (e) {
        return {
            restrict: "A",
            link: function (t, o, n) {
                e(function () {
                    o[0].focus()
                })
            }
        }
    }]),
    function () {
        function e(e) {
            return {
                restrict: "AC",
                link: function (t, o) {
                    e(function () {
                        o[0].focus()
                    }, 550)
                }
            }
        }
        e.$inject = ["$timeout"], angular.module("epic.core").directive("autoFocus", e)
    }(), angular.module("epicApp").directive("ngRepeatOnFinishRender", ["$timeout", function (e) {
        return {
            restrict: "A",
            link: function (t, o, n) {
                !0 === t.$last && e(function () {
                    t.$emit(n.ngRepeatOnFinishRender)
                })
            }
        }
    }]), angular.module("epicApp").directive("onFocusDropdown", function () {
        return {
            scope: !0,
            restrict: "A",
            link: function (e, t, o, n) {
                e.showOptions = !0, o.mdOnClose ? o.mdOnClose = "showOptions=false;" + o.mdOnClose : o.mdOnClose = "showOptions=false;", t.bind("focus", function () {
                    e.showOptions && t.triggerHandler("click")
                }), t.bind("blur", function () {
                    e.showOptions = !0
                })
            }
        }
    }),
    function () {
        function e(e, t) {
            return {
                restrict: "E",
                template: "",
                scope: {
                    track: "=",
                    pixelSrc: "="
                },
                transclude: !0,
                link: function (e, o, n) {
                    e.$watch(function () {
                        return e.track
                    }, function (n, r) {
                        if (!0 === n) {
                            var i = '<img height="1" width="1" alt="" style="display:none;" src="' + e.pixelSrc + '"/>',
                                a = t(i)(e);
                            o.append(a)
                        }
                    })
                }
            }
        }
        e.$inject = ["$document", "$compile"], angular.module("epicApp").directive("trackingPixel", e)
    }(), app.directive("profileBackImg", function () {
        return function (e, t, o) {
            "parent" !== e.profileService.currentProfile.userType && "teacher" !== e.profileService.currentProfile.userType && o.$observe("profileBackImg", function (e) {
                t.css({
                    "background-image": "url(" + e + ")"
                })
            })
        }
    }),
    function () {
        function e(e) {
            return {
                restrict: "A",
                scope: {
                    min: "=?",
                    max: "=?",
                    loadDelay: "=?",
                    compressor: "=?"
                },
                link: function (t, o, n) {
                    var r, i = o[0],
                        a = i.parentElement,
                        l = i.style,
                        s = window.getComputedStyle(o[0], null),
                        c = i.children.length || 1,
                        u = t.loadDelay || 10,
                        d = t.compressor || 1,
                        p = t.min || 0,
                        f = t.max || Number.POSITIVE_INFINITY,
                        g = "inherit" === p ? s["font-size"] : p,
                        m = "inherit" === f ? s["font-size"] : f,
                        h = s["line-height"],
                        v = s.display,
                        b = 10;

                    function S() {
                        var e;
                        i.offsetHeight * i.offsetWidth != 0 && (l.fontSize = b + "px", l.lineHeight = "1", l.display = "inline-block", l.fontSize = (e = b * c / i.scrollWidth / c, Math.max(Math.min((a.scrollWidth - (parseFloat(getComputedStyle(a).paddingLeft) + parseFloat(getComputedStyle(a).paddingRight)) - 6) * e * d, parseFloat(m)), parseFloat(g)) + "px"), l.lineHeight = h, l.display = v)
                    }

                    function y() {
                        r && e.cancel(r), r = e(function () {
                            r = null, S()
                        }, 5)
                    }
                    e(function () {
                        y()
                    }, u), t.$watch(function () {
                        return o[0].textContent
                    }, function (e, t) {
                        y()
                    }, !0), angular.element(window).bind("resize", function () {
                        t.$apply(y)
                    })
                }
            }
        }
        e.$inject = ["$timeout"], angular.module("epicApp").directive("resizeText", e)
    }(), angular.module("epicApp").factory("CollectionData", function () {
        var e = {
            bookIds: [],
            name: "",
            collectionId: ""
        };
        return e
    }),
    function () {
        var e = angular.module("epicApp");
        e.factory("GoogleClassroomCourse", ["GoogleClassroomTeacherFolder", function (e) {
            return function (t) {
                t = t || {}, this.id = t.id || 0, this.name = t.name || null, this.alternateLink = t.alternateLink || null, this.courseGroupEmail = t.courseGroupEmail || null, this.courseState = t.courseState || "INACTIVE", this.creationTime = t.creationTime || null, this.enrollmentCode = t.enrollmentCode || null, this.ownerId = t.ownerId || null, this.teacherGroupEmail = t.teacherGroupEmail || null, this.updateTime = t.updateTime;
                var o = t.teacherFolder || null;
                this.teacherFolder = o ? new e(o) : null
            }
        }]), e.factory("GoogleClassroomTeacherFolder", function () {
            return function (e) {
                this.alternateLink = e.alternateLink || null, this.id = e.id || null, this.title = e.title || null
            }
        }), e.factory("GoogleClassroomStudent", ["GoogleClassroomStudentProfile", function (e) {
            return function (t) {
                t = t || {}, this.courseId = t.courseId || null, this.userId = t.userId || null;
                var o = t.profile || null;
                this.profile = new e(o)
            }
        }]), e.factory("GoogleClassroomStudentProfile", ["GoogleClassroomStudentName", function (e) {
            return function (t) {
                this.emailAddress = t.emailAddress || null, this.id = t.id || null, this.photoUrl = t.photoUrl || null;
                var o = t.name || null;
                this.name = new e(o)
            }
        }]), e.factory("GoogleClassroomStudentName", function () {
            return function (e) {
                this.familyName = e.familyName || null, this.fullName = e.fullName || null, this.givenName = e.givenName || null
            }
        })
    }(),
    function () {
        angular.module("epic.core").factory("EducatorInfo", function () {
            function e(t) {
                this.accountPrefix = null, this.accountFirstName = null, this.accountLastName = null, this.accountProfession = null, this.accountCurrentGrade = null, this.accountReadingLevelSystem = null, this.schoolData = {
                    accountSchoolMdrPid: null,
                    accountSchoolName: null,
                    accountSchoolAddress: null,
                    accountSchoolCity: null,
                    accountSchoolZip: null,
                    accountSchoolType: null,
                    accountSchoolState: null,
                    accountSchoolCountry: null,
                    canViewMdrSchoolSearch: null
                }, t && (t = e.formatEducatorData(t), this.updateEducatorInfo(t))
            }
            return e.MDR = "mdr", e.MDR_NOT_FOUND = "mdrnotfound", e.INTERNATIONAL = "international", e.validTeacherFields = ["accountPrefix", "accountFirstName", "accountLastName", "accountProfession", "accountCurrentGrade", "accountReadingLevelSystem"], e.validSchoolFieldsAll = ["accountSchoolMdrPid", "accountSchoolName", "accountSchoolAddress", "accountSchoolCity", "accountSchoolZip", "accountSchoolType", "accountSchoolCountry", "accountSchoolState"], e.validSchoolFields = {}, e.validSchoolFields[e.MDR] = ["accountSchoolMdrPid", "accountSchoolName", "accountSchoolAddress", "accountSchoolCity", "accountSchoolZip"], e.validSchoolFields[e.MDR_NOT_FOUND] = ["accountSchoolName", "accountSchoolAddress", "accountSchoolCity", "accountSchoolZip", "accountSchoolType"], e.validSchoolFields[e.INTERNATIONAL] = ["accountSchoolName", "accountSchoolAddress", "accountSchoolCountry", "accountSchoolZip"], e.options = {
                professions: ["Teacher", "Librarian", "Reading Specialist", "Teaching Assistant", "IT Department", "School Administrator", "Principal"],
                prefixes: ["Mrs.", "Ms.", "Miss", "Mr.", "Dr.", "Mx.", "Teacher"],
                grades: [
                    [-1, "Pre-K"],
                    [0, "K"],
                    [1, "1st Grade"],
                    [2, "2nd Grade"],
                    [3, "3rd Grade"],
                    [4, "4th Grade"],
                    [5, "5th Grade"],
                    [6, "6th Grade"],
                    [7, "7th Grade +"]
                ],
                schoolTypes: ["Public", "Private", "Charter", "Magnet", "Parochial", "Head Start"],
                readingLevelSystems: [
                    [-1, "AR", "accelerated_level"],
                    [0, "DRA", "dra_level"],
                    [1, "F&P", "fandp_level"],
                    [2, "GRL", "guided_reading_level"],
                    [3, "Lexile", "lexile_level"],
                    [4, "Other/ I don't  know my reading level system", "undecided"]
                ],
                countries: ["United States", "Canada", "Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas, The", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burma", "Burundi", "Cambodia", "Cameroon", "Cabo Verde", "Central African Republic", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo, Democratic Republic of the", "Congo, Republic of the", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Curacao", "Cyprus", "Czechia", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor (see Timor-Leste)", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia, The", "Georgia", "Germany", "Ghana", "Great Britain", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Holy See", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Korea, North", "Korea, South", "Kosovo", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", "North Korea", "Norway", "Oman", "Pakistan", "Palau", "Palestinian Territories", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", "Qatar", "Romania", "Russia", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Yemen", "Zambia", "Zimbabwe"]
            }, e.mdrSchoolMapping = {
                accountSchoolMdrPid: "pid",
                accountSchoolName: "inst",
                accountSchoolAddress: "mstreet",
                accountSchoolCity: "mcity",
                accountSchoolZip: "mzipcode"
            }, e.getEducatorInfoAPIMapping = {
                firstName: {
                    name: "accountFirstName",
                    isSchoolData: !1
                },
                grade: {
                    name: "accountCurrentGrade",
                    isSchoolData: !1
                },
                lastName: {
                    name: "accountLastName",
                    isSchoolData: !1
                },
                profession: {
                    name: "accountProfession",
                    isSchoolData: !1
                },
                title: {
                    name: "accountPrefix",
                    isSchoolData: !1
                },
                accountReadingLevelSystem: {
                    name: "accountReadingLevelSystem",
                    isSchoolData: !1
                },
                schoolId: {
                    name: "accountSchoolMdrPid",
                    isSchoolData: !0
                },
                schoolName: {
                    name: "accountSchoolName",
                    isSchoolData: !0
                },
                schoolStreet: {
                    name: "accountSchoolAddress",
                    isSchoolData: !0
                },
                schoolCity: {
                    name: "accountSchoolCity",
                    isSchoolData: !0
                },
                schoolZip: {
                    name: "accountSchoolZip",
                    isSchoolData: !0
                },
                schoolCountry: {
                    name: "accountSchoolCountry",
                    isSchoolData: !0
                },
                schoolState: {
                    name: "accountSchoolState",
                    isSchoolData: !0
                },
                schoolType: {
                    name: "accountSchoolType",
                    isSchoolData: !0
                }
            }, e.setEducatorInfoAPIMapping = {
                accountPrefix: "title",
                accountFirstName: "firstName",
                accountLastName: "lastName",
                accountProfession: "profession",
                accountCurrentGrade: "grade",
                accountReadingLevelSystem: "accountReadingLevelSystem",
                accountSchoolMdrPid: "pid",
                accountSchoolName: "schoolName",
                accountSchoolAddress: "schoolAddress",
                accountSchoolCity: "schoolCity",
                accountSchoolZip: "schoolZip",
                accountSchoolType: "schoolType",
                accountSchoolCountry: "schoolCountry",
                accountSchoolState: "schoolState"
            }, e.gradesMapping = {
                "-1": "Pre-K",
                0: "K",
                1: "1st Grade",
                2: "2nd Grade",
                3: "3rd Grade",
                4: "4th Grade",
                5: "5th Grade",
                6: "6th Grade",
                7: "7th Grade +"
            }, e.readingLevelSystemMapping = {
                "-1": "AR",
                0: "DRA",
                1: "F&P",
                2: "GRL",
                3: "Lexile",
                4: "Other/ I don't  know my reading level system"
            }, e.formatEducatorData = function (t) {
                for (var o = {
                        schoolData: {}
                    }, n = 0, r = Object.keys(t); n < r.length; n++) {
                    var i = r[n];
                    e.getEducatorInfoAPIMapping[i] && null !== t[i] && (e.getEducatorInfoAPIMapping[i].isSchoolData ? o.schoolData[e.getEducatorInfoAPIMapping[i].name] = t[i] : o[e.getEducatorInfoAPIMapping[i].name] = t[i])
                }
                return t.hasOwnProperty("isInternational") && (o.schoolData.canViewMdrSchoolSearch = !t.isInternational), t.hasOwnProperty("schoolId") && 0 == t.schoolId && delete o.schoolData.accountSchoolMdrPid, o
            }, e.prototype.updateEducatorInfo = function (t) {
                for (var o = 0, n = Object.keys(t); o < n.length; o++) {
                    var r = n[o];
                    e.validTeacherFields.includes(r) && (this[r] = t[r])
                }
                if (t.schoolData)
                    for (var i = 0, a = Object.keys(t.schoolData); i < a.length; i++) {
                        var l = a[i];
                        e.validSchoolFieldsAll.includes(l) && (this.schoolData[l] = t.schoolData[l])
                    }
                this.schoolData.canViewMdrSchoolSearch = t.schoolData.canViewMdrSchoolSearch
            }, e.prototype.setMdrSchool = function (t) {
                this.clearSchoolData();
                for (var o = 0, n = Object.keys(e.mdrSchoolMapping); o < n.length; o++) {
                    var r = n[o];
                    this.schoolData[r] = t[e.mdrSchoolMapping[r]]
                }
            }, e.prototype.clearSchoolData = function () {
                for (var t = 0; t < e.validSchoolFieldsAll.length; t++) this.schoolData[e.validSchoolFieldsAll[t]] = null
            }, e.prototype.isValidEducatorInfo = function () {
                for (var t = 0; t < e.validTeacherFields.length; t++)
                    if (void 0 === this[e.validTeacherFields[t]] || null === this[e.validTeacherFields[t]]) return !1;
                return this.isValidSchool()
            }, e.prototype.isValidSchool = function () {
                var t;
                t = this.schoolData.canViewMdrSchoolSearch ? this.schoolData.accountSchoolMdrPid && this.schoolData.accountSchoolMdrPid > 0 ? e.MDR : e.MDR_NOT_FOUND : e.INTERNATIONAL;
                for (var o = 0; o < e.validSchoolFields[t].length; o++)
                    if (void 0 === this.schoolData[e.validSchoolFields[t][o]] || null === this.schoolData[e.validSchoolFields[t][o]]) return !1;
                return !0
            }, e.prototype.isValidName = function () {
                return this.accountPrefix && void 0 !== this.accountFirstName && null !== this.accountFirstName && void 0 !== this.accountLastName && null !== this.accountLastName
            }, e.prototype.getFlattened = function () {
                for (var t = {}, o = 0; o < e.validTeacherFields.length; o++) {
                    var n = e.validTeacherFields[o];
                    null !== this[n] && (t[n] = this[n])
                }
                for (var r = 0; r < e.validSchoolFieldsAll.length; r++) {
                    var i = e.validSchoolFieldsAll[r];
                    null !== this.schoolData[i] && (t[i] = this.schoolData[i])
                }
                return t
            }, e.prototype.getFormattedDataForSetEducatorInfo = function () {
                for (var t = this.getFlattened(), o = {}, n = 0, r = Object.keys(t); n < r.length; n++) {
                    var i = r[n];
                    e.setEducatorInfoAPIMapping[i] && null !== t[i] && void 0 !== t[i] && (o[e.setEducatorInfoAPIMapping[i]] = t[i])
                }
                return o
            }, e.prototype.getFormattedSchoolDataForSetEducatorInfo = function () {
                for (var t = this.schoolData, o = {}, n = 0, r = Object.keys(t); n < r.length; n++) {
                    var i = r[n];
                    e.setEducatorInfoAPIMapping[i] && null !== t[i] && void 0 !== t[i] && (o[e.setEducatorInfoAPIMapping[i]] = t[i])
                }
                return o
            }, e.prototype.autofillData = function () {
                this.accountPrefix = "Mr.", this.accountFirstName = "Only", this.accountLastName = "Tests", this.accountProfession = "Teacher", this.accountCurrentGrade = 0
            }, e.prototype.formatSchoolAddress = function () {
                return "".concat(e.formatAddress(this.schoolData.accountSchoolName), "\n            ").concat(e.formatAddress(this.schoolData.accountSchoolAddress), "\n            ").concat(this.schoolData.accountSchoolCity ? e.formatAddress(this.schoolData.accountSchoolCity) + ", " : "").concat(this.schoolData.accountSchoolState ? this.schoolData.accountSchoolState : "", " ").concat(this.schoolData.accountSchoolZip ? this.schoolData.accountSchoolZip + ", " : "").concat(this.schoolData.accountSchoolCountry ? this.schoolData.accountSchoolCountry : "")
            }, e.formatAddress = function (e) {
                if (e) {
                    var t = e.toLowerCase().split(" ");
                    return (t = t.map(function (e) {
                        return e.charAt(0).toUpperCase() + e.substr(1)
                    })).join(" ")
                }
            }, e
        })
    }(), angular.module("epicApp").factory("ImgPreloader", ["$q", "$rootScope", function (e, t) {
        function o(t) {
            this.imageLocations = t, this.imageCount = this.imageLocations.length, this.loadCount = 0, this.errorCount = 0, this.states = {
                PENDING: 1,
                LOADING: 2,
                RESOLVED: 3,
                REJECTED: 4
            }, this.state = this.states.PENDING, this.deferred = e.defer(), this.promise = this.deferred.promise
        }
        return o.preloadImages = function (e) {
            return new o(e).load()
        }, o.prototype = {
            constructor: o,
            isInitiated: function () {
                return this.state !== this.states.PENDING
            },
            isRejected: function () {
                return this.state === this.states.REJECTED
            },
            isResolved: function () {
                return this.state === this.states.RESOLVED
            },
            load: function () {
                if (this.isInitiated()) return this.promise;
                this.state = this.states.LOADING;
                for (var e = 0; e < this.imageCount; e++) this.loadImageLocation(this.imageLocations[e]);
                return this.promise
            },
            handleImageError: function (e) {
                this.errorCount++, this.isRejected() || (this.state = this.states.REJECTED, this.deferred.reject(e))
            },
            handleImageLoad: function (e) {
                this.loadCount++, this.isRejected() || (this.deferred.notify({
                    percent: Math.ceil(this.loadCount / this.imageCount * 100),
                    imageLocation: e
                }), this.loadCount === this.imageCount && (this.state = this.states.RESOLVED, this.deferred.resolve(this.imageLocations)))
            },
            loadImageLocation: function (e) {
                var o = this,
                    n = new Image;
                n.onload = function (e) {
                    t.$apply(function () {
                        o.handleImageLoad(e.target.src), o = n = e = null
                    })
                }, n.onerror = function (e) {
                    t.$apply(function () {
                        o.handleImageError(e.target.src), o = n = e = null
                    })
                }, n.src = e
            }
        }, o
    }]), angular.module("epicApp").factory("ReadToMe", ["Audio", "$rootScope", "$interval", function (e, t, o) {
        function n() {
            var n = this;
            this.tracks = [], this.audioLoading = !1, this.unlisteners = [t.$on("audio.ended", function () {
                if (n.tracks.length > 0) n.updateTracks();
                else {
                    if (!e.isOn) return;
                    t.$broadcast("flipBook.next", n)
                }
            }), t.$on("audio.loadstart", function () {
                e.isOn && (n.ticker = o(function () {
                    o.cancel(n.ticker), n.audioLoading = !0
                }, 1e3))
            }), t.$on("audio.playing", function () {
                o.cancel(n.ticker), n.audioLoading = !1
            })]
        }
        return n.prototype.updateTracks = function (n) {
            n && (this.tracks = n);
            var r = this;
            o.cancel(r.ticker);
            var i = this.tracks.splice(0, 1)[0];
            i ? e.set(i) : r.ticker = o(function () {
                o.cancel(r.ticker), t.$broadcast("audio.ended")
            }, 1e3)
        }, n.prototype.dispose = function () {
            for (var t in e.clear(), this.tracks = [], this.unlisteners) this.unlisteners[t]()
        }, n
    }]),
    function () {
        function e(e, t, o) {
            function n(e) {
                this.rosterData = e || []
            }

            function r(e, t) {
                return e ? e.length > 25 ? "first" === t ? n.ERROR_FIRST_NAME_LENGTH : n.ERROR_LAST_NAME_LENGTH : void 0 : "first" === t ? n.ERROR_FIRST_NAME_REQUIRED : n.ERROR_LAST_NAME_REQUIRED
            }

            function i(e) {
                for (var t = [], o = 0; o < e.length; o++) {
                    var r = {};
                    r[n.ROSTER_FIRST] = e[o][n.ROSTER_FIRST].value, r[n.ROSTER_LAST] = e[o][n.ROSTER_LAST].value, e[o][n.ROSTER_EMAIL].value && (r[n.ROSTER_EMAIL] = e[o][n.ROSTER_EMAIL].value), void 0 !== e[o][n.ROSTER_GRADE].value && (r[n.ROSTER_GRADE] = e[o][n.ROSTER_GRADE].value), t[o] = r
                }
                return t
            }

            function a() {
                var e = {};
                return e[n.ROSTER_FIRST] = {
                    value: null
                }, e[n.ROSTER_LAST] = {
                    value: null
                }, e[n.ROSTER_EMAIL] = {
                    value: null
                }, e[n.ROSTER_GRADE] = {
                    value: null
                }, e
            }
            return n.prototype.setRosterData = function (e) {
                e.rosterString ? this.rosterData = function (e) {
                    if (!e) return;
                    for (var t, o = [], r = e.split("\n"), i = 0; i < r.length; i++)
                        if (t = (t = r[i]).trim()) {
                            t = (t = t.replace(/,+/g, ",")).replace(/, +,/g, ",");
                            var l = a(),
                                s = t.lastIndexOf("@"),
                                c = null;
                            if (-1 !== s) {
                                var u = "",
                                    d = t.substring(0, s);
                                c = Math.max(Math.max(d.lastIndexOf(","), d.lastIndexOf(" ")), d.lastIndexOf("\t")), u = t.substring(c + 1), t = t.substring(0, c).trim(), l[n.ROSTER_EMAIL].value = u.trim(), "," === t[t.length - 1] && (t = t.slice(0, -1))
                            } else t.trim();
                            if (t.includes(",")) {
                                var p = t.lastIndexOf(",");
                                l[n.ROSTER_FIRST].value = t.substring(p + 1).trim(), l[n.ROSTER_LAST].value = t.substring(0, p).trim()
                            } else -1 === (c = t.lastIndexOf("\t")) && (c = t.lastIndexOf(" ")), -1 === c ? l[n.ROSTER_FIRST].value = t : (l[n.ROSTER_LAST].value = t.substring(c + 1), l[n.ROSTER_FIRST].value = t.substring(0, c).trim());
                            o.push(l)
                        } return o
                }(e.rosterString) : e.rosterData && (this.rosterData = e.rosterData)
            }, n.prototype.getRosterSize = function () {
                return this.rosterData.length
            }, n.prototype.getRosterGrade = function () {
                return this.rosterData.length > 0 ? this.rosterData[0][n.ROSTER_GRADE].value : null
            }, n.prototype.getEmailCount = function () {
                for (var e = 0, t = 0; t < this.rosterData.length; t++) null !== this.rosterData[t][n.ROSTER_EMAIL].value && e++;
                return e
            }, n.prototype.swapFirstLastNames = function () {
                for (var e = "", t = 0; t < this.rosterData.length; t++) {
                    var o = this.rosterData[t];
                    e = o[n.ROSTER_LAST], o[n.ROSTER_LAST] = o[n.ROSTER_FIRST], o[n.ROSTER_FIRST] = e
                }
            }, n.prototype.getRosterErrors = function () {
                for (var e = [], t = 0, o = 0; o < this.rosterData.length; o++) {
                    e[o] = [];
                    var i = this.rosterData[o];
                    n.isValidName(i[n.ROSTER_FIRST].value) || (e[o].push(r(i[n.ROSTER_FIRST].value, "first")), t++), n.isValidName(i[n.ROSTER_LAST].value) || (e[o].push(r(i[n.ROSTER_LAST].value, "last")), t++), n.isValidEmail(i[n.ROSTER_EMAIL].value) || (e[o].push(n.ERROR_INVALID_EMAIL), t++)
                }
                var a = {};
                return a.numErrors = t, a.errors = e, a
            }, n.prototype.getRosterErrorCount = function () {
                return this.getRosterErrors().numErrors
            }, n.prototype.isRosterValid = function () {
                return 0 === this.getRosterErrors().numErrors
            }, n.prototype.createProfiles = function () {
                var e = t.defer();
                if (this.isRosterValid()) {
                    o.post("WebAccount", "batchImportStudentUsersForAccount", {
                        userData: i(this.rosterData)
                    }).then(function (t) {
                        t.result.numProfilesCreated ? e.resolve(t.result.numProfilesCreated) : e.reject({
                            type: n.ERROR_TYPE_BATCH_IMPORT,
                            errorData: [t.result.alert_message]
                        })
                    })
                } else {
                    var r = this.getRosterErrors();
                    e.reject({
                        type: n.ERROR_TYPE_INVALID_ROSTER,
                        errorData: r.errors
                    })
                }
                return e.promise
            }, n.prototype.deleteStudentFromRoster = function (e) {
                this.rosterData.splice(e, 1)
            }, n.prototype.addStudentToRoster = function (e) {
                this.rosterData.push(a())
            }, n.prototype.setGradeToAll = function (e) {
                for (var t = 0; t < this.rosterData.length; t++) this.rosterData[t][n.ROSTER_GRADE].value = e
            }, n.isValidName = function (e) {
                return !(!e || e.length > 25)
            }, n.isValidEmail = function (e) {
                return !e || /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e) && e.length <= 255
            }, n.ROSTER_FIRST = "firstName", n.ROSTER_LAST = "lastName", n.ROSTER_EMAIL = "email", n.ROSTER_GRADE = "grade", n.ERROR_TYPE_BATCH_IMPORT = "error_type_batch_import", n.ERROR_TYPE_INVALID_ROSTER = "error_type_invalid_roster", n.ERROR_FIRST_NAME_REQUIRED = "roster_error_first_name_required", n.ERROR_LAST_NAME_REQUIRED = "roster_error_last_name_required", n.ERROR_FIRST_NAME_LENGTH = "error_first_name_length", n.ERROR_LAST_NAME_LENGTH = "error_last_name_length", n.ERROR_INVALID_EMAIL = "error_invalid_email", n.gradeKeyToInt = {
                "Pre-K": -1,
                K: 0,
                "1st Grade": 1,
                "2nd Grade": 2,
                "3rd Grade": 3,
                "4th Grade": 4,
                "5th Grade": 5,
                "6th Grade": 6,
                "7th Grade +": 7
            }, n.gradeIntToString = {
                "-1": "Pre-K",
                0: "K",
                1: "1st Grade",
                2: "2nd Grade",
                3: "3rd Grade",
                4: "4th Grade",
                5: "5th Grade",
                6: "6th Grade",
                7: "7th Grade +"
            }, n
        }
        e.$inject = ["BigQuery", "$q", "Data"], angular.module("epic.core").factory("Roster", e)
    }(),
    function () {
        var e = angular.module("epicApp");
        e.factory("SearchResult", function () {
            return function (e) {
                this.objectType = e.objectType || "", this.objectId = e.objectId || "", this.relevance = e.relevance || 0, this.title = e.title || "", this.arLevel = e.arLevel, this.lexileLevel = e.lexileLevel, this.grLevel = e.grLevel, this.draLevel = e.draLevel, this.fandpLevel = e.fandpLevel, this.isConverted = e.isConverted || [], this.readingAge = e.readingAge, this.ageRange = e.ageRange, this.nonFiction = e.nonFiction || -1, this.numQuizzes = e.numQuizzes, this.data = e[e.objectType] || null, this.readTime = e.readTime || this.data.duration, this.fandpLevel && (this.fandpLevel = this.fandpLevel.toUpperCase()), this.grLevel && (this.grLevel = this.grLevel.toUpperCase()), this.data.fandp && (this.data.fandp = this.data.fandp.toUpperCase()), this.data.gr && (this.data.gr = this.data.gr.toUpperCase()), this.data.id = this.data.id || this.data.modelId
            }
        }), e.factory("SearchResultSection", ["SearchResult", function (e) {
            return function (t) {
                this.sortIndex = t.sortIndex, this.sectionName = t.sectionName || "", this.avgRelevance = t.avgRelevance || 0, this.objectTypes = t.objectTypes || [], this.searchResultsData = [];
                for (var o = 0; o < t.searchResultsData.length; o++) {
                    var n = new e(t.searchResultsData[o]);
                    this.searchResultsData.push(n)
                }
            }
        }]), e.factory("SearchResultModelEntry", ["SearchResultSection", function (e) {
            return function (e, t) {
                this.key = "", this.title = "", this.searchResultSection = null, -1 !== e.indexOf("Author") ? this.key = "author" : -1 !== e.indexOf("Titles") ? this.key = "title" : this.key = "tag", this.title = t.sectionName, this.searchResultSection = t
            }
        }]), e.factory("SearchTab", ["Data", function (e) {
            function t(e) {
                e = e || {}, this.id = e.id || 0, this.name = e.name || "", this.objectTypes = e.objectTypes || [], this.filterType = e.filterType || "", this.filterParams = e.filterParams
            }
            return t.getSearchTabs = function () {
                return e.get("WebBook", "getSearchTabData").then(function (e) {
                    for (var o, n = e.result, r = {}, i = 0; i < n.length; i++) r[(o = new t(n[i])).id] = o;
                    return r
                })
            }, t
        }])
    }(),
    function () {
        angular.module("epicApp").factory("SelectCtrl", function () {
            function e(e, t) {
                this.initWith(e, t)
            }
            return e.prototype.initWith = function (e, t) {
                this.selectables = e || [], this.uniqueKey = t || "id", this.selected = [], this.selectMap = {}, this.allSelected = !1;
                var o, n = this.selectables.length;
                for (o = 0; o < n; o++) this.selectMap[this.selectables[o][this.uniqueKey]] = !1
            }, e.prototype.select = function (e) {
                var t = e[this.uniqueKey],
                    o = this.selected.indexOf(e);
                o > -1 ? (this.selected.splice(o, 1), this.selectMap[t] = !1) : (this.selected.push(e), this.selectMap[t] = !0), this.allSelected = this.selected.length == this.selectables.length
            }, e.prototype.selectAll = function () {
                this.allSelected = !this.allSelected, this.selected = [];
                var e, t, o, n = (this.selectables || []).length;
                for (e = 0; e < n; e++) o = (t = this.selectables[e])[this.uniqueKey], this.selectMap[o] = this.allSelected, this.allSelected && this.selected.push(t)
            }, e.prototype.deselectAll = function () {
                this.allSelected = !0, this.selectAll()
            }, e.prototype.getValues = function (e) {
                for (var t = [], o = this.selected.length, n = 0; n < o; n++) t.push(this.selected[n][e]);
                return t
            }, e.prototype.isSelected = function (e) {
                var t = e[this.uniqueKey];
                return this.selectMap[t]
            }, e.prototype.noneSelected = function () {
                return !this.selected || 0 === this.selected.length
            }, e.prototype.remove = function (e) {
                var t, o = (this.selectables || []).length;
                for (t = 0; t < o; t++)
                    if (this.selectables[t][this.uniqueKey] == e) {
                        this.selectables.splice(t, 1), this.selectMap[e] = !1;
                        break
                    }
            }, e
        })
    }(),
    function () {
        function e(e, t, o) {
            var n = !1;
            return {
                ACCOUNT_USER_LINK_PENDING: 0,
                ACCOUNT_USER_LINK_APPROVED: 1,
                ACCOUNT_USER_LINK_TYPE_HOME: 0,
                ACCOUNT_USER_LINK_TYPE_OTHERS: 1,
                ACCOUNT_USER_TRANSFER_TYPE_OTHER: 0,
                ACCOUNT_USER_TRANSFER_TYPE_HOME: 1,
                ACCOUNT_USER_TRANSFER_PENDING: 0,
                HOME_ACCESS_STATUS_CAN_ENABLE: 0,
                HOME_ACCESS_STATUS_PENDING: 1,
                HOME_ACCESS_STATUS_ENABLED: 2,
                HOME_ACCESS_STATUS_UNKNOWN: 3,
                showToastRejectToast: r,
                showToastApproveToast: i,
                showAccountUnlink: function (e, o, n) {
                    t.open({
                        templateUrl: "modals/profile-unlink/profile-unlink.html",
                        controller: "ProfileUnlinkController",
                        resolve: {
                            profile: function () {
                                return e
                            },
                            accountUUID: function () {
                                return n
                            }
                        }
                    }).result.then(function () {
                        o()
                    })
                },
                requestEducatorAccountLinkByClassroomCode: function (t, o, n) {
                    var r = {
                        userId: t,
                        classroomCode: o,
                        reminder: n ? 1 : 0
                    };
                    return e.post("WebUserAccountLink", "requestJoinClassroomByClassroomCode", r).then(function (e) {
                        return (!e.result || Array.isArray(e.result.error) && e.result.error.length > 0) && console.warn("Problem with request to connect to classroom: ", e.result.error[0]), e
                    })
                },
                requestEducatorAccountLinkByEmail: function (t, o, n) {
                    var r = {
                        userId: t,
                        email: o,
                        reminder: n ? 1 : 0
                    };
                    return e.post("WebUserAccountLink", "requestLink", r).then(function (e) {
                        return (!e.result || Array.isArray(e.result.error) && e.result.error.length > 0) && console.warn("Problem with request to connect to classroom: ", e.result.error[0]), e
                    })
                },
                createEducatorAccountLinkByClassroomCode: function (t, o) {
                    var n = {
                        userId: t,
                        classroomCode: o
                    };
                    return e.post("WebUserAccountLink", "joinClassroomByClassroomCode", n).then(function (e) {
                        return (!e.result || Array.isArray(e.result.error) && e.result.error.length > 0) && console.warn("Problem with connect to classroom: ", e.result.error[0]), e
                    })
                },
                approveAccountLink: function (t, o) {
                    e.get("WebUserAccountLink", "approveLink", {
                        userId: t.id
                    }).then(function (e) {
                        e && (e.result && !e.error ? (i(t, !0), o()) : alert("Error Encountered while trying to approve user linking"))
                    })
                },
                unlinkAccountLink: function (e) {
                    return a(e, !1)
                },
                unlinkAccountLinkWithAccountUUID: function (e, t) {
                    return a(e, !1, !1, t)
                },
                rejectAccountLink: function (e) {
                    return a(e, !0, !0)
                }
            };

            function r(e, t) {
                o.show({
                    hideDelay: 3e3,
                    position: "bottom right",
                    controller: "AccountLinkRejectToastController",
                    templateUrl: "toasts/account-link-reject/account-link-reject.html",
                    locals: {
                        profile: e,
                        isReject: t
                    }
                })
            }

            function i(e, t) {
                o.show({
                    hideDelay: 3e3,
                    position: "bottom right",
                    controller: "AccountLinkApproveToastController",
                    templateUrl: "toasts/account-link-approve/account-link-approve.html",
                    locals: {
                        profile: e,
                        isApprove: t
                    }
                })
            }

            function a(t, o, i, a) {
                var l = {
                        userId: t.id,
                        denied: i
                    },
                    s = "removeLink";
                if (!n) return n = !0, a && (l.uuid = a, s = "removeLinkWithUUID"), e.get("WebUserAccountLink", s, l).then(function (e) {
                    if (n = !1, e) return e.result && !e.error ? (r(t, o), e.result) : (alert("Error Encountered while trying to remove user link"), null)
                })
            }
        }
        e.$inject = ["Data", "$modal", "$mdToast"], angular.module("epicApp").service("AccountLinkService", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c) {
            var u = [],
                d = null,
                p = "UserAchievement",
                f = ["<", "achievement-reward-chip ", 'layout="row" ', 'layout-align="start center" ', 'class="staggered-zoom"', ">", "</achievement-reward-chip>"].join(""),
                g = '<achievement-toast ng-click="dismissHandler()"></achievement-toast>',
                m = {
                    init: function () {
                        o.subscribeObserver(m)
                    },
                    handleMessage: function (e) {
                        if (e.objectType !== p) return;
                        b(e)
                    },
                    showAchievement: b,
                    closeAchievement: function () {
                        d && t.close();
                        d = null, y()
                    },
                    getAchImgUrl: C,
                    getNonActiveAchievementImageUrl: E,
                    showAchievementDetail: function (e, t) {
                        var o = t.completed ? C(t.achievementId) : E(t.achievementId);
                        c.show({
                            controller: "AchievementDetailCtrl",
                            templateUrl: "md-dialog/achievement-detail/achievement-detail.html",
                            parent: angular.element(document.body),
                            targetEvent: e,
                            clickOutsideToClose: !0,
                            fullscreen: !1,
                            onComplete: function () {
                                var e = document.getElementsByTagName("md-backdrop")[0];
                                angular.element(e).css("opacity", .8)
                            },
                            locals: {
                                achievement: t,
                                achievementUrl: o
                            }
                        })
                    },
                    pauseAchievementsQueue: S,
                    unpauseAchievementsQueue: function () {
                        h = !1, y()
                    }
                },
                h = !1,
                v = ["read", "standalone-quiz"];
            return m;

            function b(e) {
                (function (e, t, o) {
                    for (var n = 0; n < t.length; n++) {
                        var r = t[n];
                        if (r[e] === o) return !0
                    }
                    return !1
                })("key", u, e.key) || u.push(e), v.includes(l.current.name) && S(), y()
            }

            function S() {
                h = !0
            }

            function y() {
                if (!(d || u.length < 1 || h)) {
                    var o = u.shift();
                    null === (d = o.object).rewards && (d.rewards = []);
                    var r, i, a, l, s = C(d.achievementId),
                        c = [],
                        p = [];
                    p.push(s);
                    for (var f = 0; f < d.rewards.length; f++) {
                        var m = d.rewards[f],
                            v = null;
                        switch (m.type) {
                            case "avatar":
                                l = m.id, v = Globals.GLOBAL_CDN_BASE + "journal/avatars/avatar_" + l + "_nav.png";
                                break;
                            case "journalCover":
                                a = m.id, v = Globals.GLOBAL_CDN_BASE + "journal/covers/texture_" + a + ".png";
                                break;
                            case "journalFrame":
                                i = m.id, v = Globals.GLOBAL_CDN_BASE + "journal/frames/frame_" + i + ".png";
                                break;
                            case "clientTheme":
                                r = m.id, v = Globals.GLOBAL_CDN_BASE + "themes/theme_" + r + "_thumbnail.png"
                        }
                        if (null !== v) {
                            p.push(v);
                            var b = A({
                                url: v,
                                type: m.type,
                                name: m.object.name
                            });
                            c.push(b)
                        }
                    }
                    n.preloadImages(p).then(function (o) {
                        var n = e.$new(!0);
                        n.achievementBadgeUrl = s, n.rewardChips = c, n.titleText = d.name, t.show({
                            template: g,
                            scope: n
                        })
                    }, function (e) {
                        bbb("Handle reject")
                    })
                }
            }

            function C(e) {
                return Globals.GLOBAL_CDN_BASE + "achievements/" + e + "-lg.png"
            }

            function E(e) {
                return e = e || 1, Globals.GLOBAL_CDN_BASE + "achievements/" + e + "-locked-lg.png"
            }

            function A(t) {
                var o = e.$new(!0);
                return o.rewardUrl = t.url, o.rewardType = t.type, o.rewardName = t.name, {
                    scopeObj: o,
                    compiledElement: s(angular.element(f))(o)
                }
            }
        }
        e.$inject = ["$rootScope", "EpicToast", "MessageHandler", "ImgPreloader", "ProfileService", "AccountService", "ABTestService", "$state", "$compile", "$mdDialog"], angular.module("epicApp").service("Achievement", e)
    }(), angular.module("epicApp").factory("AudioService", ["$rootScope", "ContentVolumeService", function (e, t) {
        var o = {
            audio: null,
            isLoaded: !1,
            isPlaying: !1,
            initNewAudio: function (t) {
                o.audio = new Audio(t), o.audio.load(), o.audio.type = "audio/mp3", o.audio.addEventListener("ended", function () {
                    o.isLoaded = !1, o.isPlaying = !1, e.$broadcast("audio.ended", o)
                }), o.audio.addEventListener("error", function () {
                    o.isLoaded = !1, o.isPlaying = !1, e.$broadcast("audio.error", o)
                })
            },
            play: function () {
                o.audio && o.audio.play()
            },
            pause: function () {
                o.audio && o.audio.pause()
            },
            setVolume: function (e) {
                o.audio && (o.audio.volume = e)
            },
            getVolume: function (e) {
                return o.audio ? o.audio.volume : 100
            },
            set: function (e) {
                e && (o.audio ? (o.audio.src = e, o.audio.load()) : o.initNewAudio(e), o.audio.volume = t.value / 100, o.isLoaded = !0)
            },
            clear: function () {
                o.isPlaying = !1, o.isLoaded = !1, o.audio && (o.audio.pause(), o.audio = null)
            },
            getAudioTime: function () {
                if (o.audio) return o.audio.currentTime
            }
        };
        return o
    }]),
    function () {
        var e = angular.module("epicApp");
        e.service("BookOverlay", ["$rootScope", "$state", "$document", "$compile", "$timeout", "InactiveBookModal", "BrowseService", "BookPresentationsLogger", "LocalStorageService", "ProfileService", "Achievement", "BigQuery", "ABTestService", function (e, t, o, n, r, i, a, l, s, c, u, d, p) {
            var f, g = [];
            this.bookType = null, this.eduAssigningVariant = null;
            this.bookHeaderIsOpen = !0;
            var m = !1,
                h = !1;
            this.bookHeaderMenuIsOpen = !1;
            var v = [];
            this.tooltipsData = {
                readToMe: {
                    shouldShow: !1
                }
            }, this.isFullscreen = !1, this.openBookHeaderAndFooter = function (e, t) {
                if (e && e.stopPropagation(), !h || !t) {
                    for (var o; 0 != v.length;) o = v.pop(), clearTimeout(o);
                    if (!m && (this.bookHeaderIsOpen = !0, m = !0, r(function () {
                            m = !1
                        }, 300), t)) {
                        var n = this;
                        v.push(setTimeout(function () {
                            n.closeBookHeaderAndFooter()
                        }, 2e3))
                    }
                }
            }, this.closeBookHeaderAndFooter = function () {
                if (1 === this.bookType && (this.eduAssigningVariant !== p.EDU_ASSIGNING_HEADERS || this.isFullscreen)) {
                    var e = this;
                    this.bookHeaderMenuIsOpen || this.isShowingTooltip() || (h = !0, r(function () {
                        h = !1
                    }, 1e3), m ? r(function () {
                        e.bookHeaderIsOpen = !1
                    }, 300) : e.bookHeaderIsOpen = !1)
                }
            }, this.setQuizDrawerWidth = function (e) {
                this.quizDrawerWidth = e
            }, this.openBook = function (t, r) {
                this.currentBookId = t, i.close(), this.close(!0, !0), u.pauseAchievementsQueue(), f = e.$new();
                var a = o.find("body").eq(0),
                    l = null;
                l = r ? n('<book-overlay book-id="' + t + '" open-quiz-drawer=true></book-overlay>')(f) : n('<book-overlay book-id="' + t + '"></book-overlay>')(f);
                var s = -$(window).scrollTop() + "px";
                a.append(l), a.toggleClass("book-overlay-open", !0), a.css({
                    top: s
                })
            }, this.open = function (e) {
                this.openBook(e, !1), d.setContentSource(t.current.name), l.verticalScrollWatchHolder && g.push("vertical"), l.horizontalScrollWatchHolder && g.push("horizontal"), l.destroyScrollWatchers()
            }, this.openWithDrawer = function (e) {
                this.openBook(e, !0)
            }, this.close = function (t, n) {
                var r = o.find("body").eq(0),
                    i = o.find("book-overlay").eq(0);
                if (document.getElementById("epic-app-content-container").style.visibility = "", i.length > 0) {
                    if (i.remove(), f) {
                        var a = f;
                        e.$evalAsync(function () {
                            a.$destroy()
                        })
                    }
                    r.toggleClass("book-overlay-open", !1), r.css({
                        top: 0
                    })
                }
                return n || u.unpauseAchievementsQueue(), t || this.resetScrollWatchers(), Promise.resolve()
            }, this.excludedBookIds = [], this.resetScrollWatchers = function () {
                l.setScrollWatchers(g.includes("vertical"), g.includes("horizontal")), g = []
            }, this.rearrangeOrInjectBookIntoContinueReadingRow = function (e) {
                if (!e || 2 != e.type && 4 != e.type) {
                    var t = a.browseData.rows,
                        o = c.currentProfile.id,
                        n = {},
                        r = s.get("continue_reading_row") ? s.get("continue_reading_row") : {};
                    if (t.length > 0)
                        for (var i = 0; i < t.length; i++)
                            if ((n = t[i]).name === a.crrRowName) {
                                for (var l = 0; l < n.books.length; l++)
                                    if (n.books[l].modelId === e.modelId) return n.books.splice(l, 1), n.books.unshift(e), r[o] = n, s.set("continue_reading_row", r), void a.resetCrrInterval();
                                return e.progress = 0, n.books.unshift(e), r[o] = n, s.set("continue_reading_row", r), void a.resetCrrInterval()
                            }
                }
            }, this.initRtmTooltip = function () {
                var e = s.get("usersViewedRtmTooltip") || {};
                e.hasOwnProperty(c.currentProfile.id) || (this.tooltipsData.readToMe.shouldShow = !0, e[c.currentProfile.id] = !0, s.set("usersViewedRtmTooltip", e))
            }, this.shouldShowRtmTooltip = function () {
                return this.tooltipsData.readToMe.shouldShow
            }, this.closeRtmTooltip = function () {
                this.tooltipsData.readToMe.shouldShow = !1
            }, this.isShowingTooltip = function () {
                for (var e in this.tooltipsData)
                    if (this.tooltipsData[e].shouldShow) return !0;
                return !1
            }
        }]), e.service("InactiveBookModal", ["$rootScope", "$window", "$modal", function (e, t, o) {
            var n = null;
            this.show = function (t) {
                var r = e.$new();
                r.bookId = t, n = o.open({
                    templateUrl: "book-overlay/inactive-book.html",
                    controller: "InactiveBookModalController",
                    scope: r
                })
            }, this.close = function () {
                n && n.close()
            }
        }]), e.controller("InactiveBookModalController", ["$scope", "Data", "InactiveBookModal", function (e, t, o) {
            t.get("WebBook", "getRecommendedBooks", {
                bookId: e.bookId
            }).then(function (t) {
                e.recommendedBooks = t.result.slice(0, 10)
            })
        }])
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h, v, b) {
            var S = {
                heartbeatUpdateDuration: 6e4,
                idleThresholdSecondsDuration: 300,
                highlightModes: ["off", "magnify"],
                bigQueryHighlightLogMap: {}
            };
            S.bigQueryHighlightLogMap[S.highlightModes[0]] = "none", S.bigQueryHighlightLogMap[S.highlightModes[1]] = "magnify", S.bookData = null, S.bookDataIsReady = !1, S.bookOpenSource = null, S.newBookOpenSource = null, S.advanceCurrentBookSource = function () {
                S.newBookOpenSource && (S.bookOpenSource = S.newBookOpenSource, S.newBookOpenSource = null)
            }, S.logData = null, S.bookIsFinished = !1, S.currentReadTime = null, S.currUpdateSecondsRead = null, S.currUpdatePagesFlipped = null, S.pageStartTimestamp = null, S.readingTimerInterval = null, S.secondsReadSinceOpen = null, S.pagesFlippedSinceOpen = null, S.heartbeatUpdateTimer = null, S.idleTimeSpent = null, S.isIdling = !1, S.defaultHighlightMode = S.highlightModes[1], S.isHighlightOn = !0, S.isFullScreen = !1, S.convertedReadingLevel = null, S.readingLevelDetailsCustom = null, S.eduAssigningVariant = v.getVariantForEduAssign(), S.favorites = {};
            var y = function () {
                    return Math.floor(Date.now() / 1e3)
                },
                C = function () {
                    return (new Date).getTimezoneOffset()
                };
            S.fetchBookData = function (e) {
                return S.bookData = null, S.bookDataIsReady = !1, o.get("WebBook", "getFullDataForWeb", {
                    bookId: e
                }).then(function (e) {
                    if (e.result) {
                        if (S.bookData = e.result, S.currentReadTime = e.result.userBook.currentReadTime, S.bookDataIsReady = !0, 1 === S.getBookType()) {
                            var t = S.getCurrentPage(),
                                o = S.getBookLength() - 1;
                            t = (t = (t = t < 0 ? 0 : t) > o ? o : t) % 2 == 1 ? t - 1 : t, S.setCurrentPage(t)
                        }
                        a.bookType = S.bookData.book.type, S.eduAssigningVariant = v.getVariantForEduAssign(), a.eduAssigningVariant = S.eduAssigningVariant, S.favorites = b.getFavoriteBooks()
                    }
                    return e
                })
            }, S.findOrCreateCurrentLogEntry = function () {
                if (S.bookData) {
                    var e = S.bookData.book.id || S.bookData.book.modelId;
                    u.findOrCreateCurrentLogEntry(e).then(function (e) {
                        S.logData = e
                    })
                }
            }, S.updateLogEntry = function () {
                S.bookData && S.logData && (S.logData.progress = S.getBookProgressPercentage(), S.logData.time = (parseInt(S.logData.time) || 0) + parseInt(S.currUpdateSecondsRead), u.updateLogEntry(S.logData).then(function (e) {
                    S.logData = e
                }))
            }, S.updateUserBook = function () {
                if (S.bookData) {
                    var e = S.getCurrentPage();
                    S.bookIsFinished && e + 1 === S.getBookLength() && (e = 0);
                    var t = {
                        bookId: S.bookData.book.id || S.bookData.book.modelId,
                        index: e,
                        duration: S.currUpdateSecondsRead,
                        pagesFlipped: S.currUpdatePagesFlipped,
                        progress: S.getBookProgressPercentage(),
                        timezoneOffset: C()
                    };
                    o.post("WebUserBook", "updateUserBookWithIndex", t).then(function (e) {
                        e.result && (S.currentReadTime = e.result.currentReadTime)
                    })
                }
            }, S.logPrevPageView = function (e) {
                if (S.bookData) {
                    var t = S.pageStartTimestamp,
                        n = y();
                    if (S.pageStartTimestamp = n, !(e - 1 >= S.bookData.epub.spine.length)) {
                        var r = S.bookData.book.id || S.bookData.book.modelId,
                            i = n - t;
                        if (i) {
                            i > S.idleThresholdSecondsDuration && (i = S.idleThresholdSecondsDuration);
                            var a = !(!S.getPageCdnByPageIndex(e) || !S.getPageCdnByPageIndex(e - 1)),
                                l = {
                                    bookId: r,
                                    prevIndex: e,
                                    duration: i,
                                    isSpread: a || !1
                                };
                            l.bookId && "number" == typeof l.prevIndex && l.duration && o.post("WebUserBook", "logPageView", l).then(function (e) {
                                if (e && e.result && e.result.paid_read) {
                                    var t = S.isReadToMe(),
                                        o = t ? d.events.CONTENT_PAID_BOOK_R2ME : d.events.CONTENT_PAID_BOOK,
                                        n = {
                                            book_id: r,
                                            content_type: S.getBookType(),
                                            page: S.getCurrentPage(),
                                            duration: S.secondsReadSinceOpen,
                                            mode: S.getIsFullScreen() ? "fullscreen" : "mini",
                                            zoom: p.zoomLevel > 1 ? "yes" : "no",
                                            src: S.bookOpenSource
                                        };
                                    t && (n.highlight = S.getHighlightMode()), d.log(o, n)
                                }
                            })
                        }
                    }
                }
            }, S.checkoutBookIfNeeded = function () {
                if (S.bookData) {
                    if (S.bookData.publisherData.checkout) {
                        var e = {
                            deviceId: n.getDeviceId(),
                            bookId: S.bookData.book.id || S.bookData.book.modelId
                        };
                        return o.post("WebBook", "checkoutBookForAccount", e)
                    }
                    return new Promise(function (e, t) {
                        e()
                    })
                }
            }, S.returnBookIfNeeded = function () {
                if (S.bookData && S.bookData.publisherData.checkout) {
                    var e = {
                        deviceId: n.getDeviceId(),
                        bookId: S.bookData.book.id || S.bookData.book.modelId
                    };
                    return o.post("WebBook", "returnBookForAccount", e)
                }
            }, S.sendBookUpdatesCalls = function () {
                S.bookData && (S.updateLogEntry(), S.updateUserBook(), S.checkoutBookIfNeeded(), S.currUpdateSecondsRead = 0, S.currUpdatePagesFlipped = 0)
            }, S.finishBook = function () {
                if (S.bookData) {
                    S.logData && (S.logData.finished = 1, S.updateLogEntry());
                    var t = {
                        bookId: S.bookData.book.id || S.bookData.book.modelId,
                        timezoneOffset: C()
                    };
                    return o.post("WebUserBook", "finishBook", t).then(function (t) {
                        return t && t.result && t.result.timesCompleted ? (S.bookIsFinished = !0, s.currentProfile.booksFinished++, e.$broadcast("book.finished"), t.result) : (console.warn("Problem getting finishBook response data."), null)
                    })
                }
            }, S.hasZoomed = !1, S.logFirstZoom = function (e) {
                S.hasZoomed || (S.hasZoomed = !0, o.get("WebUserBook", "logBookZoom", {
                    bookId: e
                }))
            }, S.initBookOpen = function () {
                function e() {
                    S.bookIsFinished = !1, S.findOrCreateCurrentLogEntry(), S.currUpdateSecondsRead = 0, S.currUpdatePagesFlipped = 0, S.pagesFlippedSinceOpen = 0, S.secondsReadSinceOpen = 0, S.idleTimeSpent = 0, S.isIdling = !1, S.startReadingTimer(), S.startBookUpdateHeartbeat(), S.pageStartTimestamp = y()
                }
                S.bookData && S.checkoutBookIfNeeded().then(function (t) {
                    var o, n;
                    t && t.result ? t.result.cacheKey ? (bbb("Checking out book", t.result), e()) : t.result.alertMessage && (bbb("Book already checked out, closing", t.result), S.closeBook(), o = t.result.alertTitle, n = t.result.alertMessage, h.open({
                        templateUrl: "modals/alert/epic-alert.html",
                        controller: "EpicAlertCtrl",
                        controllerAs: "ctrl",
                        resolve: {
                            params: function () {
                                return {
                                    title: o,
                                    message: n,
                                    confirm: function () {}
                                }
                            }
                        }
                    })) : (bbb("Checkout not needed", t), e())
                })
            }, S.pauseBookRead = function () {
                S.bookData && (S.isIdling = !0, S.stopReadingTimer(), S.stopBookUpdateHeartbeat(), S.idleTimeSpent = 0, S.sendBookUpdatesCalls())
            }, S.resumeBookRead = function () {
                S.bookData && (S.isIdling = !1, S.startReadingTimer(), S.startBookUpdateHeartbeat())
            }, S.onBookClose = function () {
                if (S.bookData) {
                    S.logPrevPageView(S.bookData.userBook.currentPageIndex), S.stopReadingTimer(), S.stopBookUpdateHeartbeat(), S.updateLogEntry(), S.updateUserBook(), S.returnBookIfNeeded();
                    var t = S.bookData.book || {},
                        o = S.logData || {},
                        n = 1 == t.audio ? d.events.CONTENT_CLOSED_BOOK_R2ME : d.events.CONTENT_CLOSED_BOOK;
                    d.log(n, {
                        book_id: t.id,
                        content_type: t.type,
                        duration: o.time,
                        pages_flipped: S.pagesFlippedSinceOpen,
                        view_duration: S.secondsReadSinceOpen,
                        mode: S.getIsFullScreen() ? "fullscreen" : "mini",
                        zoom: p.zoomLevel > 1 ? "yes" : "no",
                        src: S.bookOpenSource
                    }), f.clearRecommendedData(), S.updateLocalStorageBookProgress(), e.$broadcast("book.closed")
                }
            }, S.logContentOpen = function (e) {
                var t = {
                        book_id: parseInt(e.modelId),
                        content_type: e.type,
                        title: e.title,
                        mode: S.getIsFullScreen() ? "fullscreen" : "mini"
                    },
                    o = "";
                1 === e.type ? o = e.audio ? d.events.CONTENT_OPENED_BOOK_R2ME : d.events.CONTENT_OPENED_BOOK : 2 === e.type ? o = d.events.CONTENT_OPENED_AUDIOBOOK : 4 === e.type && (o = d.events.CONTENT_OPENED_VIDEO), d.log(o, t)
            }, S.updateLocalStorageBookProgress = function () {
                var e = r.get("continue_reading_row");
                if (e) {
                    var t = e[s.currentProfile.id];
                    t && t.books && t.books[0] && (t.books[0].progress = S.getBookProgressPercentage(), e[s.currentProfile.id] = t, r.set("continue_reading_row", e)), S.updateBookProgressOnBrowseScreen(S.getBookProgressPercentage())
                }
            }, S.updateBookProgressOnBrowseScreen = function (e) {
                var t = g.browseData ? g.browseData.rows : null,
                    o = null;
                if (t) {
                    for (var n = 0; n < t.length; n++)
                        if (t[n] && t[n].name === g.crrRowName) {
                            o = t[n];
                            break
                        } o && o.books && o.books[0] && (o.books[0].progress = e)
                }
            }, S.getBookId = function () {
                return S.bookData ? S.bookData.book.id || S.bookData.book.modelId : null
            }, S.setCurrentPage = function (e) {
                if (!S.bookData) return null;
                "number" != typeof e || parseInt(e) !== e || isNaN(e) ? console.warn("Cannot set non-integer pageIndex.") : S.bookData.userBook.currentPageIndex = e
            }, S.getCurrentPage = function () {
                return S.bookData ? S.bookData.userBook.currentPageIndex : null
            }, S.getFarthestPageIndex = function () {
                return S.bookData ? S.bookData.userBook.farthestPageIndex : null
            }, S.getBookLength = function () {
                if (!S.bookData) return null;
                var e = S.bookData.epub.spine.length;
                return e % 2 == 0 ? e + 3 : e + 2
            }, S.getBookSpineLength = function () {
                return S.bookData ? S.bookData.epub.spine.length : null
            }, S.pageLeftExists = function () {
                return S.getCurrentPage() - 1 >= 0
            }, S.pageRightExists = function () {
                return S.getCurrentPage() < S.getBookLength() - 1
            }, S.shouldShowPreCompletionPage = function () {
                return S.bookData ? S.bookData.epub.spine.length % 2 == 0 : null
            }, S.goPageBackward = function () {
                S.bookData && S.pageLeftExists() && (S.bookData.userBook.currentPageIndex -= 2, S.idleTimeSpent = 0)
            }, S.goPageForward = function () {
                S.bookData && S.pageRightExists() && (S.bookData.userBook.currentPageIndex += 2, S.idleTimeSpent = 0)
            }, S.getPageCdnByPageIndex = function (e) {
                if (!S.bookData) return null;
                var t = S.bookData.epub.spine[e];
                return t ? c.getFinalAssetPath(t.page) : null
            }, S.getPageHashByPageIndex = function (e) {
                if (!S.bookData) return null;
                var t = S.bookData.epub.spine[e];
                if (t && t.page) {
                    var o = t.page.split("/");
                    return o[o.length - 1].split(".")[0]
                }
                return null
            }, S.getBookProgressPercentage = function () {
                if (!S.bookData) return 0;
                var e = S.bookData.epub.spine.length,
                    t = Math.floor(S.getCurrentPage() / e * 100);
                return Math.min(t, 100)
            }, S.getBookCoverColors = function () {
                return S.bookData ? {
                    coverColorR: S.bookData.book.coverColorR,
                    coverColorG: S.bookData.book.coverColorG,
                    coverColorB: S.bookData.book.coverColorB
                } : null
            }, S.getBookType = function () {
                return S.bookData ? S.bookData.book.type : null
            }, S.getBookTitle = function () {
                return S.bookData ? S.bookData.book.title : null
            }, S.getBookDescription = function () {
                return S.bookData ? S.bookData.book.bookDescription : null
            }, S.getBookPublisher = function () {
                return S.bookData ? S.bookData.book.publisher : null
            }, S.getBookAuthor = function () {
                return S.bookData ? S.bookData.book.author : null
            }, S.getBookIllustrator = function () {
                return S.bookData ? S.bookData.book.illustrator : null
            }, S.getBookAge = function () {
                return S.bookData ? S.bookData.book.age : null
            }, S.getBookAvgTime = function () {
                return S.bookData ? S.bookData.book.avgTime : null
            }, S.getBookAR = function () {
                return S.bookData ? S.bookData.book.ar : null
            }, S.getBookLexile = function () {
                return S.bookData ? S.bookData.book.lexile : null
            }, S.getBookFP = function () {
                return S.bookData ? S.bookData.book.fandp.toUpperCase() : null
            }, S.getBookGR = function () {
                return S.bookData ? S.bookData.book.gr.toUpperCase() : null
            }, S.getBookDRA = function () {
                return S.bookData ? S.bookData.book.dra : null
            }, S.getGradeRangeFromAge = function (e) {
                var t = {
                    3: "Pre-K",
                    4: "Pre-K",
                    5: "K",
                    6: "1st",
                    7: "2nd",
                    8: "3rd",
                    9: "4th",
                    10: "5th",
                    11: "6th",
                    12: "7th+",
                    13: "7th+"
                };
                return (e = e || S.getBookAge()) < 4 ? "Pre-K" : e > 12 ? "7th+" : "".concat(t[e - 1], " - ").concat(t[e + 1])
            }, S.getRecommendedBooks = function () {
                return S.bookData ? S.bookData.recommendedBooks : []
            }, S.getTimePerPage = function () {
                return S.bookData ? S.bookData.timePerPage : null
            }, S.getReadTimeSinceLastBookFinish = function () {
                return S.bookData ? S.currentReadTime + S.currUpdateSecondsRead || 0 : null
            }, S.getCopyrightUrl = function () {
                return S.bookData ? S.bookData.epub.extra.copyright : null
            }, S.onLastPage = function () {
                return !!S.bookData && S.getCurrentPage() === S.getBookSpineLength()
            }, S.isReadToMe = function () {
                return S.bookData ? !!S.bookData.book.audio : null
            }, S.getAudioPropertyByPageIndex = function (e) {
                if (!S.bookData || !S.isReadToMe()) return null;
                var t = S.bookData.epub.spine[e];
                return t ? t.audio : null
            }, S.hasCurrentOrFutureAudioFromIndex = function (e) {
                if (!S.bookData || !S.isReadToMe()) return !1;
                for (var t = e > 0 ? e - 1 : 0, o = S.bookData.epub.spine.slice(t), n = 0; n < o.length; n++)
                    if (o[n].audio) return !0;
                return !1
            }, S.getEducationalEnabled = function () {
                return S.bookData ? S.bookData.publisherData.educationalEnabled : null
            }, S.startReadingTimer = function () {
                S.readingTimerInterval = t(function () {
                    S.idleTimeSpent > S.idleThresholdSecondsDuration ? S.pauseBookRead() : (S.secondsReadSinceOpen += 1, S.currUpdateSecondsRead += 1, S.idleTimeSpent += 1)
                }, 1e3)
            }, S.stopReadingTimer = function () {
                t.cancel(S.readingTimerInterval), S.readingTimerInterval = null
            }, S.startBookUpdateHeartbeat = function () {
                S.heartbeatUpdateTimer = t(function () {
                    S.sendBookUpdatesCalls()
                }, S.heartbeatUpdateDuration)
            }, S.stopBookUpdateHeartbeat = function () {
                t.cancel(S.heartbeatUpdateTimer), S.heartbeatUpdateTimer = null
            }, S.incrementPagesFlipped = function () {
                S.logData && "number" == typeof S.logData.pagesFlipped && (S.logData.pagesFlipped += 1), "number" == typeof s.pagesFlipped && (s.pagesFlipped += 1), S.currUpdatePagesFlipped += 1, S.pagesFlippedSinceOpen += 1
            }, S.getWordHighlightModeLocalStorageKey = function () {
                return s.currentProfile.id ? s.currentProfile.id + "_word-highlight-mode" : (console.warn("Profile id not available for highlight mode localStorage key construction"), null)
            }, S.getHighlightMode = function () {
                return r.get(S.getWordHighlightModeLocalStorageKey()) || S.defaultHighlightMode
            }, S.getIsFullScreen = function () {
                return S.isFullScreen
            }, S.getBigQueryFormattedHighlightString = function () {
                return S.bigQueryHighlightLogMap[S.getHighlightMode()]
            }, S.setHighlightMode = function (e) {
                if (S.highlightModes.indexOf(e) > -1) {
                    r.set(S.getWordHighlightModeLocalStorageKey(), e);
                    var t = {
                        highlight: S.getBigQueryFormattedHighlightString()
                    };
                    d.log(d.events.TEXT_HIGHLIGHT_TOGGLED, t)
                } else console.warn('Unable to set word-highlight mode to "' + e + '". Valid choices are: [' + S.hightlightModes.join(", ") + "]")
            }, S.toggleHighlight = function () {
                S.isHighlightOn ? S.setHighlightMode(S.highlightModes[1]) : S.setHighlightMode(S.highlightModes[0])
            }, S.initHighlightMode = function () {
                var e = S.getHighlightMode();
                "underline" === e && (e = "magnify"), S.setHighlightMode(e), S.isHighlightOn = e !== S.highlightModes[0]
            }, S.openBook = function (e, t, o) {
                var n = e.id || e.modelId;
                if (S.readingLevelDetailsCustom = null, t && (S.newBookOpenSource = t, S.bookOpenSource || (S.bookOpenSource = t)), e.active || Globals.GLOBAL_STAGING_MODE || Globals.GLOBAL_DEV_MODE) {
                    if (o) S.readingLevelDetailsCustom = o || !1;
                    else if (e.arLevel || e.draLevel || e.fandpLevel || e.grLevel || e.lexileLevel) {
                        var r = {
                            accelerated_level: [e.arLevel, e.isConverted.includes("accelerated_level")],
                            dra_level: [e.draLevel, e.isConverted.includes("dra_level")],
                            fandp_level: [e.fandpLevel, e.isConverted.includes("fandp_level")],
                            guided_reading_level: [e.grLevel, e.isConverted.includes("guided_reading_level")],
                            lexile_level: [e.lexileLevel, e.isConverted.includes("lexile_level")]
                        };
                        S.convertedReadingLevel = r
                    }
                    a.open(n)
                } else l.show(n)
            }, S.closeBook = function () {
                return S.bookOpenSource = null, a.close()
            }, S.closeBookAndSearchByMaker = function (e, t) {
                "author" !== t && "illustrator" !== t && (t = "author");
                var o = "author" === t ? d.events.BOOK_AUTHOR_SEARCH_CLICK : d.events.BOOK_ILLUSTRATOR_SEARCH_CLICK,
                    n = {
                        term: e
                    };
                d.log(o, n), m.go("search", {
                    term: e
                })
            }, S.newOpenBook = function (t) {
                i.close(), S.fetchBookData(t);
                var o = e.$new();
                o.bookId = t, i.show({
                    template: "<epic-flip-book-overlay></epic-flip-book-overlay>",
                    scope: o
                })
            }, S.newCloseBook = function () {
                i.close()
            }, S.thumbPath = function (e, t, o, n) {
                if (!e) return "";
                o = o || "jpg", n = n || "", t = t ? "_" + t : "";
                var r = e.toString().slice(-1);
                return "".concat(Globals.GLOBAL_SECURE_CDN_BASE).concat(r, "/").concat(e, "/cover").concat(t, ".").concat(o)
            }, S.getObfuscatedBookId = function (e) {
                return e ? 1111 * parseInt(e) + 2 : null
            }, S.getUnobfuscatedBookId = function (e) {
                return e ? (parseInt(e) - 2) / 1111 : null
            };
            return S.showAwardBadge = !1, S.hasAward = function () {
                return !!S.bookData && S.bookData.book.Awards.length > 0
            }, S
        }
        e.$inject = ["$rootScope", "$interval", "Data", "AccountService", "LocalStorageService", "EpicOverlay", "BookOverlay", "InactiveBookModal", "ProfileService", "AssetService", "LogEntryService", "BigQuery", "MagicPanService", "RecommendService", "BrowseService", "$state", "$modal", "ABTestService", "FavoriteService"], angular.module("epicApp").service("BookService", e)
    }(), angular.module("epicApp").factory("BrowseService", ["Data", "BigQuery", "ProfileService", "ABTestService", "LocalStorageService", "$timeout", "AngularjsTranslatorService", "AccountService", function (e, t, o, n, r, i, a, l) {
        var s = {
            browseData: {
                sections: [],
                section: {},
                rows: [],
                sectionAndRowData: {},
                curSectionId: null,
                lastScrollOffset: 0
            },
            isLoading: !1,
            crrRowName: null,
            getDefaultTabIndex: p
        };
        a.setObject(a.BROWSESERVICE_BROWSEDATA, s.browseData);
        var c = r,
            u = 1,
            d = function (e, t) {
                for (e = e.toString(), t = t > 0 ? t : 1; e.length < t;) e = "0" + e;
                return e
            };

        function p() {
            return s.eduExploreVariant && s.eduExploreVariant === n.EDU_EXPLORE_TEACHER_RL && o.currentProfile.readingLevelSystem.length > 0 ? u : 0
        }
        s.resetSection = function () {
            var e = p();
            0 !== s.browseData.sections.length && (s.browseData.section = s.browseData.sections[e])
        }, s.getCategorySections = function (t) {
            return s.isLoading = !0, s.browseData.sections = [], s.browseData.section = {}, s.browseData.rows = [], s.browseData.sectionAndRowData = {}, s.browseData.curSectionId = null, s.browseData.sectionAndRowData.currentUserId = o.currentProfile.id, s.eduExploreVariant = null, l.isEducator() && n.loadExperimentDataByLabel(n.EDU_EXPLORE_TEACHER, "account").then(function (e) {
                e && (s.eduExploreVariant = e)
            }), e.get("WebCategory", "getAvailableSections").then(function (n) {
                if (n && n.result) {
                    s.browseData.sections = n.result;
                    var r = p();
                    if (s.browseData.section = s.browseData.sections[r], t) {
                        var i, a = s.browseData.sections;
                        for (var u in a)
                            if (i = a[u], t = t.replace("_", " "), i.name.toLowerCase() == t.toLowerCase()) {
                                s.browseData.section = i;
                                break
                            }
                    }
                    if (l.isEducator()) {
                        var d = s.browseData.section.name,
                            f = c.get("ebf-rl-".concat(o.currentProfile.id)),
                            g = c.get("ebf-info-".concat(o.currentProfile.id));
                        if (g && !["Reading Level", "AR", "accelerated_level", "Lexile", "GRA", "DRA", "F&P"].includes(d)) e.get("WebUser", "setUserPreferences", {
                            preferences: {
                                age: g.age
                            }
                        }).then(function () {
                            s.loadContentRows()
                        });
                        else if (f) {
                            var m = {
                                level: {}
                            };
                            m.level[{
                                AR: "accelerated_level",
                                Lexile: "lexile_level",
                                GRA: "guided_reading_level",
                                DRA: "dra_level",
                                "F&P": "fandp_level",
                                "Reading Level": "accelerated_level"
                            } [f.rs]] = [parseInt(f.rl.id)], m.sectionId = 12, m.method = "getContentRowsForSection", m.name = "readingLevel", s.loadContentRows(m)
                        } else s.loadContentRows()
                    } else s.loadContentRows()
                }
            }).catch(function () {})
        };
        var f = function (e) {
                return Array.isArray(e) ? e : []
            },
            g = null;
        s.resetCrrInterval = function () {
            g && clearInterval(g), g = setInterval(function () {
                c.remove("continue_reading_row")
            }, 3e5)
        };
        var m = function () {
            var e = o.currentProfile.id,
                t = c.get("continue_reading_row"),
                n = null;
            if (t && t[e]) {
                for (var r = 0; r < s.browseData.rows.length; r++)
                    if (s.browseData.rows[r].crr) {
                        n = s.browseData.rows[r];
                        break
                    } n && n.books && n.books.length > 0 && t[e].books && t[e].books.length > 0 && n.books[0].modelId !== t[e].books[0].modelId && (s.browseData.rows[r] = t[e])
            }
        };
        s.loadContentRows = function (e) {
            return h(e)
        };
        var h = function (o) {
                var n, r, a;
                return s.browseData.section.name && (s.browseData.curSectionId = s.browseData.section.params.sectionId || s.browseData.section.params.categoryId, s.browseData.sectionAndRowData[s.browseData.curSectionId]) ? (s.isLoading = !1, s.browseData.rows = [], void i(function () {
                    s.browseData.rows = s.browseData.sectionAndRowData[s.browseData.curSectionId], m()
                }, 100)) : (s.isLoading = !0, s.browseData.rows = [], o && "readingLevel" === o.name ? (n = o.method, r = {
                    sectionId: o.sectionId,
                    filters: JSON.stringify(o.level)
                }) : (n = s.browseData.section.method, r = s.browseData.section.params), n ? ("getContentRowsForSection" === n && (r.time = (a = new Date).getFullYear() + "-" + d(a.getMonth() + 1, 2) + "-" + d(a.getDate(), 2) + " " + d(a.getHours(), 2) + ":" + d(a.getMinutes(), 2) + " +0000"), t.mark_start(t.events.PERFORMANCE_BROWSE_CONTENT_LOADED), e.get("WebCategory", n, r).then(function (e) {
                    if (!e.result || !e.result.categories && !e.result.PlaylistCategory) return console.warn("Problem fetching books"), s.browseData;
                    if (Array.isArray(e.result)) return s.browseData.rows = e.result, s.browseData;
                    var o = f(e.result.EpicOriginalsCategory).map(function (e) {
                            return e.rowType = "originalsCollection", e
                        }),
                        i = f(e.result.FeaturedCollectionCategory).map(function (e) {
                            return e.rowType = "featuredCollection", e
                        }),
                        a = f(e.result.categories).map(function (e) {
                            return e.rowType = "content", e.crr && (s.crrRowName = e.name), e
                        }),
                        l = f(e.result.PlaylistCategory).map(function (e) {
                            return e.rowType = "collection", e
                        }),
                        c = a;
                    if (o.concat(i).concat(l).sort(function (e, t) {
                            return e.row - t.row
                        }).forEach(function (e) {
                            c.splice(e.row - 1, 0, e)
                        }), e.result.recommendedRows && e.result.recommendedRows.length > 0) {
                        var u = f(e.result.recommendedRows).map(function (e) {
                                return e.rowType = "content", e
                            }),
                            d = u[0],
                            p = d.subjectId,
                            g = d.name,
                            h = d.books.length,
                            v = d.isBeta;
                        d.books.forEach(function (e) {
                            e.subjectId = p, e.rowName = g, e.isBetaRow = v
                        }), u.forEach(function (e) {
                            c.splice(0, 0, u[0])
                        }), t.log(t.events.NEW_INTEREST_VIEW, {
                            interest_id: p,
                            row_name: g,
                            content_count: h,
                            is_beta: v
                        })
                    }
                    if (r.sectionId && r.sectionId !== s.browseData.section.params.sectionId || r.categoryId && r.categoryId !== s.browseData.section.params.categoryId) s.isLoading = !1;
                    else {
                        s.browseData.rows = c, s.browseData.sectionAndRowData[s.browseData.curSectionId] = c, s.browseData.section.booksCount = e.result.categories.reduce(function (e, t) {
                            return e + t.books.length
                        }, 0), m(), s.isLoading = !1;
                        var b = {};
                        b.src = s.browseData && s.browseData.section && s.browseData.section.name, "getContentRowsForSection" === n && (e.result && e.result.caching ? b.caching = e.result.caching : b.caching = "unknown"), t.mark_end_and_send(t.events.PERFORMANCE_BROWSE_CONTENT_LOADED, b)
                    }
                }).catch(function () {})) : Promise.resolve())
            },
            v = function (e) {
                for (var t, o, n = e.length - 1; n > 0; n--) t = e[n], o = Math.floor(Math.random() * (n + 1)), e[n] = e[o], e[o] = t;
                return e
            };
        return s.shuffleBrowse = function () {
            s.browseData.rows.forEach(function (e) {
                    "books" in e ? v(e.books) : "featuredCollections" in e && v(e.featuredCollections)
                }),
                function () {
                    for (var e = document.querySelector("#browse-rows-container"), t = e.children, o = t.length - 1; o > 0; o--) e.appendChild(t[Math.floor(Math.random() * (o + 1))])
                }()
        }, s
    }]), angular.module("epicApp").factory("ClassroomConnectService", ["$modal", "ProfileService", "AccountLinkService", "TeacherPickerService", function (e, t, o, n) {
        var r = {
            initClassroomConnectData: function () {
                r.isReminder = null, r.childUser = {
                    id: null,
                    name: null,
                    avatar: null
                }, r.teacher = {}
            }
        };
        return r.initClassroomConnectData(), r.open = function (e, t, o, n) {
            e && t && o ? (r.initClassroomConnectData(), r.isReminder = n || !1, r.childUser = {
                id: e,
                avatarId: o,
                name: t
            }, r.openParentIntro()) : console.warn("Problem opening Classroom Connect. Child information needed.")
        }, r.openParentIntro = function () {
            r.childUser.id || r.teacher.educatorLastName || r.teacher.email ? r.confirmModal = e.open({
                template: "<classroom-connect-parent-intro></classroom-connect-parent-intro>"
            }).result.then(function (e) {
                e && e.connect && n.open(!0).then(function (e) {
                    e ? (r.teacher = e, r.openConfirmModal()) : console.warn("No teacher data was returned from the teacher picker...")
                })
            }) : console.warn("Problem opening Classroom Connect confirm modal. Please check child and teacher data.")
        }, r.openConfirmModal = function () {
            r.childUser.id || r.teacher.educatorLastName || r.teacher.email ? r.confirmModal = e.open({
                template: "<classroom-connect-confirm></classroom-connect-confirm>"
            }).result.then(function (e) {}) : console.warn("Problem opening Classroom Connect confirm modal. Please check child and teacher data.")
        }, r.openRequestSentModal = function () {
            r.childUser.id || r.teacher.educatorLastName || r.teacher.email ? r.requestSentModal = e.open({
                template: "<classroom-connect-request-sent></classroom-connect-request-sent>"
            }).result.then(function (e) {}) : console.warn("Problem opening Classroom Connect confirm modal. Please check data.")
        }, r.confirmJoinClassroom = function () {
            return r.teacher.email ? o.requestEducatorAccountLinkByEmail(r.childUser.id, r.teacher.email, r.isReminder).then(function (e) {
                return t.reloadProfiles(), e
            }) : o.requestEducatorAccountLinkByClassroomCode(r.childUser.id, r.teacher.classroomCode, r.isReminder).then(function (e) {
                return t.reloadProfiles(), e
            })
        }, r.titleCase = function (e) {
            return e.split("").map(function (e, t, o) {
                var n = o[t - 1];
                return n && " " !== n && "-" !== n ? e.toLowerCase() : e.toUpperCase()
            }).join("")
        }, r.getFormattedLocationString = function () {
            return r.teacher.cityName && r.teacher.state ? r.titleCase(r.teacher.cityName) + ", " + r.teacher.state : null
        }, r
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c) {
            var u = {
                    TYPES: {
                        REGULAR: 0,
                        SINGLE_BOOK: 1
                    },
                    maxLengths: {
                        title: 140,
                        desc: 4096
                    },
                    getCollections: function (o) {
                        d.includes(o) || (o = "all");
                        return function (o) {
                            var n = {
                                userId: t.currentProfile.id
                            };
                            d.includes(o) && (n.type = o);
                            return e.get("WebPlaylist", "getPlaylistsAndBookIdsByCreator", n).then(function (e) {
                                if (!e || !e.result) return null;
                                var t = e.result,
                                    o = {};
                                return t.forEach(function (e) {
                                    e.id = parseInt(e.id) || parseInt(e.modelId), o[e.id] = e
                                }), o
                            })
                        }(o)
                    },
                    getCollectionsForLibrary: function (t) {
                        return (t = t || {}).types = [u.TYPES.REGULAR, u.TYPES.SINGLE_BOOK], e.get("WebPlaylist", "getPlaylistLibraryForUser", t).then(function (e) {
                            return e && e.result ? e.result : null
                        })
                    },
                    getAssignmentDataForCollection: function (t) {
                        var o = {};
                        t.contentId && (o.contentId = t.contentId);
                        t.groupId && (o.groupId = t.groupId);
                        return e.get("WebPlaylist", "getUsersAndAssignmentsAndProgressData", o).then(function (e) {
                            if (e && e.result) return e.result
                        })
                    },
                    getPlaylistsByBookId: function (o, r) {
                        var i = n.defer();
                        o || i.resolve(null);
                        var a = {
                            userId: t.currentProfile.id,
                            bookId: o
                        };
                        d.includes(r) && (a.type = r);
                        return e.get("WebPlaylist", "getPlaylistsDataForBookId", a).then(function (e) {
                            if (e && e.result && e.result.playlists) return e.result.playlists
                        })
                    },
                    createCollection: function (t, o, r) {
                        var i = n.defer();
                        if (!t) return i.resolve(null);
                        var a = {
                            bookId: t.id || t.modelId,
                            title: o.title,
                            description: o.desc,
                            share: o.share ? 1 : 0,
                            type: o.type ? 1 : 0
                        };
                        o.type === u.TYPES.SINGLE_BOOK && (a = {
                            bookId: t.id || t.modelId,
                            title: t.title,
                            description: "",
                            share: 0,
                            type: o.type
                        });
                        return e.get("WebPlaylist", "createPlaylistWithBookId", a).then(function (e) {
                            if (e.result && e.result.playlist) {
                                var t = e.result.playlist;
                                return r || l.show({
                                    hideDelay: 5e3,
                                    position: "bottom right",
                                    controller: "CollectionCreateToastController",
                                    templateUrl: "toasts/collection-create/collection-create.html",
                                    locals: {
                                        collection: t
                                    }
                                }), t
                            }
                            return null
                        })
                    },
                    addBookToCollections: function (t, o, r) {
                        var i = n.defer();
                        t && 0 !== o.length || i.resolve(null);
                        return e.post("WebPlaylist", "addBookToPlaylists", {
                            bookId: t.id || t.modelId,
                            playlistIds: o
                        }).then(function (e) {
                            if (e.result) return r || l.show({
                                hideDelay: 3e3,
                                position: "bottom right",
                                controller: "CollectionAddToastController",
                                templateUrl: "toasts/collection-add/collection-add.html",
                                locals: {
                                    bookTitle: t.title,
                                    numBooksAdded: 1
                                }
                            }), a.log(a.events.COLLECTION_ADD_TO_FINISH, {
                                add_collection_count: Object.keys(e.result).length,
                                book_ids: t.id
                            }), e.result
                        })
                    },
                    assignCollections: function (o, n) {
                        return e.post("WebPlaylist", "assignByAssigneeIds", {
                            assignerId: t.currentProfile.id,
                            assigneeIds: o,
                            contentIds: n
                        }).then(function (e) {
                            return e
                        })
                    },
                    assignToCollection: function (t, o, n) {
                        return e.post("WebPlaylist", "assignAndUnAssignByAssigneeIds", {
                            assigneeIds: o,
                            unAssigneeIds: n,
                            contentId: t
                        }).then(function (e) {
                            return e && e.result ? e.result : null
                        })
                    },
                    removeBookFromCollections: function (o, r) {
                        var i = n.defer();
                        o && 0 !== r.length || i.resolve(null);
                        var a = {
                            bookId: o.id || o.modelId,
                            playlistIds: JSON.stringify(r),
                            userId: t.currentProfile.id
                        };
                        return e.post("WebPlaylist", "removeBookFromPlaylists", a).then(function (e) {
                            return e
                        })
                    },
                    addAndRemoveBookFromCollections: function (e, t, o) {
                        return n.all([u.addBookToCollections(e, t, !0), u.removeBookFromCollections(e, o)]).then(function (e) {
                            return !0
                        })
                    },
                    displayAddBookToCollectionModal: function (e) {
                        if (!e) return;
                        if (0 === e.length) return;
                        var t = o.open({
                            templateUrl: "modals/book-add-to-collection/book-add-to-collection.html",
                            controller: "BookAddToCollectionModalController",
                            size: "lg",
                            keyboard: !1
                        });
                        t.bookData = e, t.result.then(function (e) {
                            e && "pinterest" === e.type && f(e.collection)
                        })
                    },
                    displayAssignModal: function (e, t) {
                        o.open({
                            templateUrl: "modals/collection-assign/collection-assign.html",
                            controller: "CollectionAssignModalController",
                            size: "lg",
                            keyboard: !1
                        }).collection = e
                    },
                    displaySaveContentModal: function (e, t) {
                        t && u.setEventSourceString(t);
                        a.log(a.events.FAVORITE_CLICK, {
                            source: u.eventSourceString
                        });
                        var n = o.open({
                            templateUrl: "modals/save-content/save-content-modal.html",
                            controller: "SaveContentController",
                            controllerAs: "ctrl",
                            size: "lg",
                            keyboard: !1
                        });
                        return n.bookData = e, n
                    },
                    displayAssignContentModal: p,
                    startAssignContentFlow: function (e, o) {
                        o && u.setEventSourceString(o);
                        u.logCollectionEvent(null, a.events.COLLECTION_ASSIGN_CLICK, {
                            student_count: t.childProfiles.length,
                            one_book_special: 1,
                            source: u.eventSourceString
                        }), 0 === t.getChildProfilesWithoutGuest().length && i.isEducator() ? u.showAddRosterIntroModal(e) : u.displayAssignContentModal(e)
                    },
                    goToAddMoreStudentsAndAssign: function (e) {
                        (t = o.open({
                            templateUrl: "modals/roster-add-students/roster-add-students-modal.html",
                            controller: "RosterAddStudentsController",
                            size: "lg",
                            keyboard: !1
                        }), t.assignFlow = !0, t.result.then(function (e) {
                            if (e && e.confirmModalInstance) return e.confirmModalInstance.result.then(function (e) {
                                return !(!e || !e.success || (bbb("Start assign flow"), 0))
                            })
                        })).then(function (t) {
                            t && u.displayAssignContentModal(e)
                        });
                        var t
                    },
                    showAddRosterIntroModal: function (e) {
                        return o.open({
                            templateUrl: "modals/add-students-intro/add-students-intro.html",
                            controller: "AddStudentsIntroController",
                            controllerAs: "ctrl",
                            size: "lg",
                            keyboard: !1
                        }).result.then(function (t) {
                            t && t.goToAddRoster ? u.goToAddMoreStudentsAndAssign(e) : t && t.goToAssign && p(e)
                        })
                    },
                    checkDisplayPinterestShareModal: function (t, o) {
                        var i = n.defer();
                        (!t || t && !t.id || o < 5) && i.resolve({
                            doNotDisplay: !0
                        });
                        var a = r.localStorage.getItem("pinterestAskTimestamp");
                        a && Date.now() - parseInt(a) < 864e5 ? i.resolve({
                            doNotDisplay: !0
                        }) : (r.localStorage.setItem("pinterestAskTimestamp", Date.now()), e.get("WebPlaylist", "getPlaylistAndBooksData", {
                            playlistId: t.id
                        }).then(function (e) {
                            if (e && e.result) {
                                var t = e.result;
                                i.resolve({
                                    collection: t
                                })
                            } else i.resolve({
                                doNotDisplay: !0
                            })
                        }));
                        return i.promise
                    },
                    displayPinterestShareModal: f,
                    logCollectionEvent: function (o, r, i) {
                        if (!o) return void a.log(r, i);
                        var l = {
                            userId: t.currentProfile.id,
                            contentType: "Collection",
                            contentId: o
                        };
                        n.all([e.get("WebPlaylist", "getPlaylistAndBooksData", {
                            playlistId: o
                        }), e.get("WebFeedback", "getRating", l)]).then(function (e) {
                            if (e[0].result) {
                                var o = e[0].result,
                                    n = e[1].result.upVotes || 0,
                                    l = "self";
                                "Epic!" === o.ownerName ? l = "epic" : o.owner_id != t.currentProfile.id && (l = "community");
                                var s = o.simpleBookData ? o.simpleBookData.length : 0,
                                    c = {
                                        owner: l,
                                        collection_id: o.id,
                                        book_count: o.booksOnlyCount,
                                        video_count: o.videosOnlyCount,
                                        audio_count: s - o.booksOnlyCount - o.videosOnlyCount,
                                        title: o.title,
                                        like_count: n
                                    };
                                "object" === _typeof(i) && (c = Object.assign(c, i)), a.log(r, c)
                            }
                        })
                    },
                    goToCollection: function (e) {
                        e.type === u.TYPES.SINGLE_BOOK ? e.simpleBookData && e.simpleBookData.length > 0 && c.openBook(e.simpleBookData[0]) : s.go("user-collection", {
                            collectionId: e.modelId || e.id
                        })
                    },
                    setEventSourceString: function (e) {
                        u.eventSourceString = e
                    },
                    clearEventSourceString: function () {
                        u.eventSourceString = ""
                    },
                    eventSourceString: ""
                },
                d = [u.TYPES.REGULAR, u.TYPES.SINGLE_BOOK];
            return u;

            function p(e) {
                var t = o.open({
                    templateUrl: "modals/assign-content/assign-content.html",
                    controller: "AssignContentController",
                    controllerAs: "ctrl",
                    size: "lg",
                    keyboard: !1
                });
                return t.bookData = e, t
            }

            function f(e) {
                e && (o.open({
                    templateUrl: "modals/collection-pinterest-ask/collection-pinterest-ask.html",
                    controller: "CollectionPinterestAskModalController",
                    size: "sm",
                    keyboard: !1
                }).collection = e)
            }
        }
        e.$inject = ["Data", "ProfileService", "$modal", "$q", "$window", "AccountService", "BigQuery", "$mdToast", "$state", "BookService"], angular.module("epicApp").service("CollectionService", e)
    }(), angular.module("epicApp").service("EpicConfirmationService", ["$modal", function (e) {
        var t = "",
            o = "",
            n = !1;
        return {
            setTitle: function (e) {
                t = e, o = "Are you sure you want to exit this quiz? Your answers won't be saved!", n = !1
            },
            getTitle: function () {
                return t
            },
            setDescription: function (e) {
                o = e
            },
            getDescription: function () {
                return o
            },
            setOneOption: function (e) {
                n = e
            },
            isOneOption: function () {
                return n
            },
            show: function () {
                return e.open({
                    templateUrl: "modals/quiz/quiz-confirmation/epic-quiz-confirmation.html",
                    controller: "QuizConfirmationController"
                }).result
            }
        }
    }]), angular.module("epicApp").factory("CopyToClipboardService", function () {
        var e = {
            copy: function (e) {
                var t = document.createElement("div");
                t.style.opacity = 0, t.style.position = "absolute", t.style.color = "#758086", t.style.pointerEvents = "none", t.style.zIndex = -1, t.innerHTML = e, document.body.appendChild(t);
                var o = document.createRange();
                o.selectNode(t), window.getSelection().removeAllRanges(), window.getSelection().addRange(o), document.execCommand("copy"), document.body.removeChild(t)
            }
        };
        return e
    }),
    function () {
        function e(e) {
            var t = Papa,
                o = "The file you have uploaded could not be found. Please check the file and try again!",
                n = "There was an error reading your file!",
                r = "File could not be read! Please check the file and try again!";
            return {
                parse: function (a, l) {
                    var s = e.defer(),
                        c = {
                            complete: function (e) {
                                s.resolve(e)
                            },
                            error: function (e, t, i, a, l) {
                                switch (e.name) {
                                    case "NotFoundError":
                                        s.reject(o);
                                        break;
                                    case "SecurityError":
                                        s.reject(n);
                                        break;
                                    case "NotReadableError":
                                        s.reject(r);
                                        break;
                                    default:
                                        s.reject("Some error has occured while reading your file!")
                                }
                            }
                        };
                    return t.parse(a, i({}, l, c)), s.promise
                },
                parseString: function (e, o) {
                    return t.parse(e, i({}, o))
                }
            };

            function i(e, t) {
                if (null == e) throw new TypeError("Cannot convert undefined or null to object");
                for (var o = Object(e), n = 1; n < arguments.length; n++) {
                    var r = arguments[n];
                    if (null != r)
                        for (var i in r) Object.prototype.hasOwnProperty.call(r, i) && (o[i] = r[i])
                }
                return o
            }
        }
        e.$inject = ["$q"], angular.module("epicApp").service("CsvParserService", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            var a = {
                    start: function () {
                        a.clearAccountData(), e.go(c[0], {}, {
                            location: "replace"
                        }), u(c[0], "_start")
                    },
                    next: function () {
                        var o = e.current.name,
                            n = c.indexOf(o);
                        if (-1 === n) return;
                        o !== l.roster && u(o, "_complete");
                        var r = c[n + 1];
                        n + 1 === a.getTotalSteps() ? t(function () {
                            e.go("edu-dashboard"), a.clearAccountData()
                        }, 0) : (e.go(r), u(r, "_start"))
                    },
                    getTotalSteps: function () {
                        return c.length
                    },
                    getCurStepNumber: function () {
                        return c.indexOf(e.current.name) + 1
                    },
                    eduAccountData: {
                        accountEmail: null,
                        accountPassword: null,
                        usedSchoolSearch: 0
                    },
                    educatorInfoObj: new i,
                    setAccountData: function (e) {
                        for (var t in e) a.eduAccountData.hasOwnProperty(t) && (a.eduAccountData[t] = e[t])
                    },
                    clearAccountData: function () {
                        a.eduAccountData.accountEmail = null, a.eduAccountData.accountPassword = null;
                        for (var e = 0; e < s.length; e++) a.eduAccountData[s[e]] = null
                    },
                    currentGradeDict: {
                        "Pre-K": -1,
                        K: 0,
                        "1st Grade": 1,
                        "2nd Grade": 2,
                        "3rd Grade": 3,
                        "4th Grade": 4,
                        "5th Grade": 5,
                        "6th Grade": 6,
                        "7th Grade +": 7
                    }
                },
                l = {
                    more: "eduSignUp.more",
                    create: "eduSignUp.create"
                },
                s = ["accountEmail", "accountPassword", "usedSchoolSearch"],
                c = [l.more, l.create];
            return a;

            function u(e, t) {
                var o = "",
                    i = {};
                switch (e) {
                    case l.more:
                        o = n.events.NUF_STEP_EDU_PERSONAL_INFO, i.accountType = r.ACCOUNT_TYPE_EDUCATOR;
                        break;
                    case l.create:
                        o = n.events.NUF_STEP_ACCOUNT_CREATE, i.accountType = r.ACCOUNT_TYPE_EDUCATOR;
                        break;
                    case l.roster:
                        o = n.events.NUF_STEP_EDU_ADD_STUDENT
                }
                n.log(o + t, i)
            }
        }
        e.$inject = ["$state", "$timeout", "LocalStorageService", "BigQuery", "AccountService", "EducatorInfo"], angular.module("epicApp").service("EduSignUpService", e)
    }(),
    function () {
        function e(e, t, o) {
            var n, r;
            return {
                show: function (a) {
                    i(), r = a.scope || e.$new(), n = o(a.template)(r);
                    var l = t.find("body").eq(0),
                        s = -$(window).scrollTop() + "px";
                    l.append(n), l.toggleClass("epic-toast-open", !0), l.css({
                        top: s
                    })
                },
                close: i
            };

            function i() {
                if (n) {
                    n.remove(), r.$destroy();
                    var e = document.getElementById("epic-app-content-container");
                    e.className = e.className.replace(/\bshake\b/g, "");
                    var o = t.find("body").eq(0);
                    o.toggleClass("epic-toast-open", !1), o.css({
                        top: 0
                    })
                }
            }
        }
        e.$inject = ["$rootScope", "$document", "$compile"], angular.module("epicApp").service("EpicToast", e)
    }(), angular.module("epicApp").factory("FavoriteService", ["$mdToast", "Data", "BigQuery", "ProfileService", "$q", "$state", "$rootScope", function (e, t, o, n, r, i, a) {
        var l = {
            favorites: {},
            loadFavorites: function () {
                return t.get("WebFavorite", "getFavoriteRowsForUserId").then(function (e) {
                    if (e && e.result) {
                        for (var t = {}, o = {}, r = e.result, i = ["bookData", "quizData", "videoData"], a = 0; a < i.length; a++) r[i[a]].length > 0 && r[i[a]].forEach(function (e) {
                            t[e.id] = !0
                        });
                        return r.playlists.length > 0 && r.playlists.forEach(function (e) {
                            o[e.id] = !0
                        }), l.favorites[n.currentProfile.id] = {
                            books: t,
                            collections: o
                        }, l.favorites[n.currentProfile.id]
                    }
                    return null
                })
            },
            getFavorites: function () {
                var e = l.favorites[n.currentProfile.id];
                return e ? r.resolve(e) : l.loadFavorites()
            },
            getFavoriteBooks: function () {
                return l.favorites[n.currentProfile.id] ? l.favorites[n.currentProfile.id].books : {}
            },
            toggleContentFavorite: function (r, s, c, u, d, p) {
                if (!r) return null;
                var f = {
                    content_type: "",
                    content_id: null,
                    src: p
                };
                return p || (f.src = i.current.name), f.content_type = function (e) {
                    return 1 === e ? "book" : 2 === e ? "audiobook" : 3 === e ? "article" : 4 === e ? "video" : 5 === e ? "quiz" : void 0
                }(u), f.content_id = Number(r), o.log(o.events.CONTENT_FAVORITE, f), "search" === i.current.name && (f.favorite = c, o.log(o.events.CONTENT_FAVORITE_SEARCH, f)), t.post("WebUserBook", "favoriteBook", {
                    bookId: r,
                    val: c ? 1 : 0
                }).then(function (t) {
                    return t.success && (a.$broadcast("favoriteToggled"), l.favorites[n.currentProfile.id] && (l.favorites[n.currentProfile.id].books[r] = c), d || e.show({
                        hideDelay: 5e3,
                        position: "bottom right",
                        controller: "FavoritesAddToastController",
                        templateUrl: "toasts/favorites-add/favorites-add.html",
                        locals: {
                            contentTitle: s,
                            isFavorited: c
                        }
                    })), t
                })
            },
            toggleCollectionFavorite: function (o, r, i, a) {
                return o ? t.post("WebPlaylist", "favoritePlaylist", {
                    playlistId: o,
                    favorited: i ? 1 : 0
                }).then(function (t) {
                    return t.result && l.favorites[n.currentProfile.id] && (l.favorites[n.currentProfile.id].collections[o] = i), t.result && !a && e.show({
                        hideDelay: 5e3,
                        position: "bottom right",
                        controller: "FavoritesAddToastController",
                        templateUrl: "toasts/favorites-add/favorites-add.html",
                        locals: {
                            contentTitle: r,
                            isFavorited: i
                        }
                    }), t
                }) : null
            }
        };
        return l
    }]),
    function () {
        function e(e, t, o, n) {
            var r = "https://www.googleapis.com/auth/classroom.courses.readonly https://www.googleapis.com/auth/classroom.rosters.readonly https://www.googleapis.com/auth/classroom.profile.emails https://www.googleapis.com/auth/classroom.profile.photos",
                i = function (e) {},
                a = {
                    initialized: !1,
                    googleUserBasicProfile: null,
                    initialize: function () {
                        a.initialized || gapi && gapi.load && gapi.load("auth2", l)
                    },
                    signIn: function () {
                        return n.log(n.events.GOOGLE_CLASSROOM_SIGN_IN_START), gapi.auth2.getAuthInstance().signIn({
                            prompt: "login"
                        })
                    },
                    openClassroom: function () {
                        a.signIn().then(s, c)
                    },
                    setCallback: function (e) {
                        i = e
                    },
                    fromRosterPage: null
                };
            a.switchUser = function () {
                gapi.auth2.getAuthInstance().signIn({
                    prompt: "select_account"
                }).then(s, c)
            }, a.signOut = function () {
                return gapi.auth2.getAuthInstance().signOut()
            };
            var l = function () {
                    gapi.auth2.init({
                        client_id: "1011349847158-mhv965j3f0l4a3o7qnic0nch4gtgc12i.apps.googleusercontent.com",
                        scope: r
                    }).then(function () {
                        gapi.auth2.getAuthInstance().currentUser.listen(u), a.initialized = !0, t.$apply()
                    })
                },
                s = function (t) {
                    n.log(n.events.GOOGLE_CLASSROOM_SIGN_IN_COMPLETE), e.open({
                        templateUrl: "modals/classroom/classroom.html",
                        controller: "GoogleClassroomController"
                    }).result.then(i)
                },
                c = function (e) {
                    n.log(n.events.GOOGLE_CLASSROOM_SIGN_IN_FAILED), console.warn("Error while logging in")
                },
                u = function (e) {
                    gapi.auth2.getAuthInstance().isSignedIn.get() ? a.googleUserBasicProfile = new o(e) : a.googleUserBasicProfile = null, t.$apply()
                };
            a.hasClassroomAccess = function () {
                return (0, gapi.client.load)("classroom", "v1").then(d)
            };
            var d = function () {
                return gapi.client.classroom.courses.list().then(function () {
                    return !0
                }, function () {
                    return !1
                })
            };
            return a.includeGoogleLoginButton = function (e) {
                gapi.signin2.render(e, {
                    scope: "profile " + r,
                    width: 250,
                    height: 46,
                    longtitle: !0,
                    theme: "dark",
                    onsuccess: u,
                    onfailure: c
                })
            }, a
        }
        e.$inject = ["$modal", "$rootScope", "GoogleBasicProfile", "BigQuery"], angular.module("epicApp").factory("GoogleClassroomService", e).factory("GoogleBasicProfile", function () {
            return function (e) {
                this.idToken = e.getAuthResponse().id_token || null, e = e.getBasicProfile() || {}, this.id = e.getId() || null, this.name = e.getName() || null, this.email = e.getEmail() || null, this.givenName = e.getGivenName() || null, this.familyName = e.getFamilyName() || null, this.imageUrl = e.getImageUrl() || null
            }
        })
    }(), angular.module("epicApp").factory("JewelService", ["Data", "ProfileService", function (e, t) {
        var o = {
            unviewedAssignments: null,
            getViewedPlaylistAssignmentData: function () {
                e.get("WebPlaylist", "getViewedPlaylistAssignmentCounts", {}).then(function (e) {
                    e.result && (o.unviewedAssignments = e.result.unviewed)
                })
            },
            getViewedMessagesData: function () {
                var n = [];
                n.push(t.currentProfile.id), e.get("WebSharedContent", "getViewedSharedContentCount", {
                    shareeIds: n
                }).then(function (e) {
                    e.result && (o.unviewedMessages = e.result.unviewed)
                })
            },
            decrement: function (e) {
                o[e]--
            }
        };
        return o
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h, v, b, S, y, C, E, A) {
            var k, T = !0;
            document.addEventListener("data-service-response", function (t) {
                e.$evalAsync(function () {})
            });
            var w = {
                initialized: !1,
                init: function () {
                    bbb("LaunchService init"), y.setObject(y.ANGULARJS_LOCATION_SERVICE, i), y.setObject(y.ANGULARJS_STATE_SERVICE, t), p.init(), s.sessionStoreQueryParams(), e.$on("$stateChangeStart", I), e.$on("$stateChangeSuccess", P), e.$watch(function () {
                        return Globals.GLOBAL_IS_AUTHED
                    }, function (e, t) {
                        1 == e && 1 != k ? (k = 1, D()) : k = 0
                    }), Globals.initialStateChange && (bbb("LaunchService repeat initial state change"), Globals.initialStateChange(), Globals.initialStateChange = null);
                    r.onload = function () {
                        "function" == typeof history.pushState && (r.onpopstate = function () {
                            w.cameFromBrowserBack = !0
                        })
                    }
                },
                startUp: D,
                cameFromBrowserBack: !1
            };
            return w;

            function D() {
                return bbb("LaunchService startUp"), w.initialized = !1, d.mark_start(d.events.PERFORMANCE_APP_LAUNCH_COMPLETE), n.all([l.reloadProfiles(0), a.updateAccountData()]).then(function (e) {
                    return l.getCurrentProfile()
                }).then(function (e) {
                    function r() {
                        bbb("LaunchService finishLoad"), w.initialized = !0;
                        var e = t.current.name,
                            n = o;
                        a.isSubscribed() && "personalizeAge" != l.currentProfile.getDefaultState() && -1 == ["signIn", "personalizeAge", "personalizeSubjects", "eduSignUp.create", "edu-dashboard"].indexOf(t.current.name) ? ("browse" !== t.current.name && c.storeLastStateWithParams(t.current.name, o), g.getRedirectData() ? (e = g.getRedirectData().name, g.removeRedirectData()) : l.isFresh() ? c.lastState && (e = c.lastState.name, n = c.getLastParams()) : e = "profileSelect", d.log(d.events.WEB_INITIALIZED)) : c.lastState && (e = c.lastState, n = c.getLastParamsNoDelete()), e ? ["profileSelect", "edu-dashboard", "browse", "roster"].includes(e) ? (t.go(e, n), l.loadProfileStats()) : l.loadProfileStats().then(function () {
                            t.go(e, n)
                        }) : l.loadProfileStats(), d.mark_end_and_send(d.events.PERFORMANCE_APP_LAUNCH_COMPLETE, {
                            destination: e,
                            src: "launch.service"
                        })
                    }
                    n.all([C.loadExperimentDataByLabel(C.EDU_ASSIGNING, "account"), E.getFavorites()]).then(function () {
                        a.isEducator() ? l.loadClassroomGroups().then(r) : r()
                    })
                })
            }

            function I(e, o, n, r, i) {
                bbb("LaunchService stateChangeStart", o.name), w.cameFromBrowserBack = !1;
                var s = o.url;
                if (s) {
                    if (v.shouldProcessUrl(s)) return S.run(function () {
                        b.navigate([s])
                    }), void e.preventDefault();
                    "ng2" != o.name && S.run(function () {
                        b.navigateByUrl("/empty", {
                            skipLocationChange: !0
                        })
                    })
                }
                if (o.url && o.url.length) {
                    if (Globals.MOBILE_USER && Globals.GLOBAL_MOBILE_BLACKLIST.includes(o.url)) return e.preventDefault(), void c.redirectMobileUser();
                    Globals.GLOBAL_MOBILE_BLACKLIST.forEach(function (t) {
                        if (Globals.MOBILE_USER && o.url.includes(t) || Globals.MOBILE_USER && t.includes(o.url)) return e.preventDefault(), void c.redirectMobileUser()
                    })
                }
                if (w.initialized, a.isAuth() && !w.initialized) return e.preventDefault(), void c.storeLastStateWithParams(o, n);
                if (o.redirectTo) return e.preventDefault(), void t.go(o.redirectTo, o.redirectParams);
                o.requiresLogin && !a.isAuth() && (e.preventDefault(), c.noAuthRedirect(o.name, n));
                if ("profileSelect" == r.name && !["signIn", "profileSelect", "nuf.age"].includes(o.name) && !l.passwordChecked) return e.preventDefault(), void t.go("profileSelect");
                if (o.requiresLogin && a.isAuth()) {
                    if ("accountManage" == o.name && g.getSessionStorageWithKey("fromMobileRedirect")) return g.setSessionStorageWithKey("fromMobileRedirect", !1), void t.go("accountManage");
                    if (l.initialized) {
                        if (!l.currentProfile.nufComplete && !l.currentProfile.isParent) return e.preventDefault(), void(a.isEducator() || f.start(f.NEW_PROFILE, {
                            profileToUpdateId: l.currentProfile.id
                        }))
                    } else l.getCurrentProfile().then(function (t) {
                        if (!l.currentProfile.nufComplete && !l.currentProfile.isParent) return e.preventDefault(), void(a.isEducator() || f.start(f.NEW_PROFILE, {
                            profileToUpdateId: l.currentProfile.id
                        }))
                    })
                }
                return "personalizeAccountType" == o.name && a.isAuth() ? (e.preventDefault(), void t.go("browse")) : n.login && n.sessionKey ? (e.preventDefault(), a.addLocalLogin(n.login, n.sessionKey), void t.go("browse", {
                    redirect: i.name
                })) : ("profileSelect" === r.name && "browse" === o.name && d.mark_start(d.events.STATE_CHANGE_PROFILE_SELECT_TO_EXPLORE), "browse" === r.name && "search" === o.name && d.mark_start(d.events.STATE_CHANGE_EXPLORE_TO_SEARCH), void("search" === r.name && "browse" === o.name && d.mark_start(d.events.STATE_CHANGE_SEARCH_TO_EXPLORE)))
            }

            function P(e, o, n, s, c) {
                bbb("LaunchService stateChangeSuccess"), angular.element("#epic-app-content-container").scrollTop(0), document.getElementById("app-loader").style.display = "none", o.requiresLogin && (u.checkSubscriptionStatus(), function () {
                    if (!T) return;
                    var e = {
                        NONE: 0,
                        UPDATE_DOMESTIC: 1,
                        UPDATE_INTERNATIONAL: 2
                    };
                    a.isAuth() && l.isTeacher() && h.get("WebEducator", "getShowModal", {
                        args: JSON.stringify({
                            accountId: a.id
                        })
                    }).then(function (t) {
                        t.result && t.result.modal === e.NONE && (T = !1), t.result && t.result.modal !== e.NONE && h.get("WebEducator", "getEducatorInfo", {
                            args: JSON.stringify({
                                accountId: a.id
                            })
                        }).then(function (e) {
                            if (e && e.result) {
                                var t = m.open({
                                    templateUrl: "modals/update-educator-info/update-educator-info.html",
                                    controller: "UpdateEducatorInfoController",
                                    controllerAs: "ctrl",
                                    size: "lg",
                                    keyboard: !1,
                                    backdrop: "static"
                                });
                                t.educatorData = e.result
                            }
                        })
                    })
                }()), t.current.previousState = s.name;
                var p = i.url();
                r.ga && p && !p.match(/\/read/) && (bbb("pageview", i.url()), r.ga("send", "pageview", {
                    page: i.url()
                })), "profileSelect" === s.name && "browse" === o.name && d.mark_end_and_send(d.events.STATE_CHANGE_PROFILE_SELECT_TO_EXPLORE, {
                    src: "state-change"
                }), "browse" === s.name && "search" === o.name && d.mark_end_and_send(d.events.STATE_CHANGE_EXPLORE_TO_SEARCH, {
                    src: "state-change"
                }), "search" === s.name && "browse" === o.name && d.mark_end_and_send(d.events.STATE_CHANGE_SEARCH_TO_EXPLORE, {
                    src: "state-change"
                })
            }
        }
        e.$inject = ["$rootScope", "$state", "$stateParams", "$q", "$window", "$location", "AccountService", "ProfileService", "QueryStringService", "RedirectService", "SubscriptionService", "BigQuery", "Achievement", "NufNewService", "SessionStorageService", "$modal", "Data", "ng2UrlHandlingStrategy", "ng2Router", "ngZone", "AngularjsTranslatorService", "ABTestService", "FavoriteService", "ModalListenerService"], angular.module("epicApp").factory("LaunchService", e)
    }(), angular.module("epicApp").factory("LogEntryService", ["Data", "$log", function (e, t) {
        var o = {
            LOG_ENTRY_TYPE_READING: 0,
            LOG_ENTRY_TYPE_ACHIEVEMENT: 1,
            LOG_ENTRY_TYPE_LEVEL_UP: 2,
            LOG_ENTRY_TYPE_VIDEO: 3,
            LOG_ENTRY_TYPE_QUIZ_COMPLETE: 4,
            LOG_ENTRY_TYPE_PLAYLIST_COMPLETE: 5,
            findOrCreateCurrentLogEntry: function (t) {
                var o = {
                    bookId: t,
                    timezoneOffset: (new Date).getTimezoneOffset()
                };
                return e.get("WebUser", "findOrCreateCurrentLogEntry", o).then(function (e) {
                    if (e.result) return e.result;
                    console.warn("problem finding or creating log entry...")
                })
            },
            updateLogEntry: function (t) {
                return e.post("WebUser", "updateLogEntry", t).then(function (e) {
                    if (e.result) return e.result;
                    console.warn("problem updating log entry...")
                })
            }
        };
        return o
    }]), angular.module("epicApp").factory("MailboxService", ["$modal", "$rootScope", "$mdToast", "ProfileService", "TeacherPickerService", "Data", function (e, t, o, n, r, i) {
        var a = {
            isSystemMessage: function (e) {
                return "system_message" == e.contentType && "enable_home_access" != e.content.type
            },
            getRouteURL: function (e) {
                return !!e.content.url && e.content.url
            },
            getContentActivityUsers: function (e) {
                i.get("WebSharedContent", "scanContentActivityUsers", {
                    sharedContentId: e
                }).then(function (e) {
                    return e.result
                })
            },
            getSubheader: function (e) {
                var t = "";
                return "playlist" == e.contentType ? t = "Shared a collection with you:" : "system_message" == e.contentType ? t = "enable_home_access" == e.content.type ? "Enable Home Access Request" : "Shared a message with you:" : "copy" == e.contentType ? t = "Copied your collection:" : "favorite" == e.contentType ? t = "Favorited your collection:" : "feedback" == e.contentType ? t = "Liked your collection:" : "shared_content" == e.contentType && (t = "Shared your collection:"), t
            }
        };
        return a
    }]), angular.module("epicApp").service("ModalListenerService", ["$rootScope", "$mdDialog", function (e, t) {
        document.addEventListener("openSubscriptionDialog", function (e) {
            t.show({
                templateUrl: "md-dialog/subscription/subscription-dialog.html",
                controller: "SubscriptionDialogCtrl",
                controllerAs: "ctrl",
                clickOutsideToClose: e.detail.clickOutsideToClose,
                escapeToClose: !1,
                locals: {
                    data: e.detail.data
                }
            })
        }), document.addEventListener("openSubscriptionSuccessDialog", function (o) {
            e.$broadcast("reloadProfilesOnProfileSelect"), t.show({
                templateUrl: "md-dialog/subscription/subscription-success-dialog.html",
                controller: "SubscriptionSuccessDialogCtrl",
                controllerAs: "ctrl",
                clickOutsideToClose: !0,
                locals: {
                    paymentDetails: o.detail.details
                }
            })
        })
    }]), angular.module("epicApp").service("ModalService", ["$modal", "$rootScope", "$mdDialog", "$mdMedia", function (e, t, o, n) {
        var r = null,
            i = [],
            a = this,
            l = function () {
                if (!(r || i.length < 1)) {
                    var t = i.splice(0, 1)[0];
                    (r = e.open(t)).result.then(function () {}, function () {
                        a.close()
                    })
                }
            };
        this.show = function (e, o, n) {
            o || (o = t.$new(!0)), o.closeModal || (o.closeModal = function () {
                a.close()
            }), i.push({
                templateUrl: e + "&v" + Globals.GLOBAL_ASSETS_VERSION,
                controller: n,
                scope: o,
                size: "lg"
            }), l()
        }, this.close = function () {
            r && r.close(), r = null, l()
        };
        var s = function (e, t) {
            e.hide = function () {
                t.hide()
            }, e.cancel = function () {
                t.cancel()
            }, e.answer = function (e) {
                t.hide(e)
            }
        };
        s.$inject = ["$scope", "$mdDialog"], this.showAdvanced = function (e, t) {
            var r = (n("sm") || n("xs")) && $scope.customFullscreen;
            o.show({
                controller: s,
                templateUrl: e + "&v" + Globals.GLOBAL_ASSETS_VERSION,
                parent: angular.element(document.body),
                targetEvent: null,
                clickOutsideToClose: !0,
                fullscreen: r
            }).then(function (e) {}, function () {}), setTimeout(function () {
                $("html").css({
                    "overflow-y": "hidden"
                })
            }, 200)
        }
    }]),
    function () {
        function e(e, t, o, n, r) {
            var i = {
                    NEW_PROFILE: "newProfile",
                    TEACHER_OFFER: "teacherOffer",
                    pathType: null,
                    profileData: {
                        profileName: "",
                        age: null,
                        selectedSubjectIds: {},
                        grade: null,
                        firstName: null,
                        lastName: null
                    },
                    subjectData: null,
                    clearProfileData: function () {
                        i.profileData = {
                            profileName: "",
                            age: null,
                            selectedSubjectIds: {},
                            grade: null,
                            firstName: null,
                            lastName: null
                        }, c = {}, i.selectedStudentToLink = null, i.linkedExistingStudent = !1, i.addedAndLinkedNewProfile = !1
                    },
                    selectedStudentToLink: null,
                    linkedExistingStudent: !1,
                    addedAndLinkedNewProfile: !1,
                    isValidProfileName: f,
                    isValidAge: h,
                    isValidFirstName: g,
                    isValidLastName: m,
                    isValidGrade: v,
                    isValidLinkChildData: function () {
                        if (i.isValidFirstName() && m()) return i.profileData.profileName = i.profileData.firstName + " " + i.profileData.lastName[0].toUpperCase() + ".", i.isValidAge() && i.isValidGrade();
                        return !1
                    },
                    updateCurrentProfileWithNufData: function () {
                        var e = n.currentProfile;
                        if (e.isParent) return;
                        if (!e.isDefault) return;
                        h() && (e.age = i.profileData.age);
                        v() && (e.grade = i.profileData.grade);
                        f() && (e.name = i.profileData.profileName);
                        g() && m() && (e.firstName = i.profileData.firstName, e.lastName = i.profileData.lastName);
                        return n.updateProfile(e)
                    },
                    updateNufDataWithSelectedProfile: function (e) {
                        if (!i.selectedStudentToLink) return;
                        for (var t = ["firstName", "lastName", "age", "grade"], o = 0; o < t.length; o++) i.profileData[t[o]] = e ? null : i.selectedStudentToLink[t[o]];
                        i.profileData.profileName = i.selectedStudentToLink.name, e && (i.selectedStudentToLink = null, i.linkedExistingStudent = !1)
                    },
                    updateCurrentProfileWithAccountEmail: function () {
                        n.updateProfile(n.currentProfile, {
                            email: o.email
                        })
                    },
                    getAge: function () {
                        return i.profileData.age
                    },
                    setAge: function (e) {
                        u.includes(e) && (i.profileData.age = e)
                    },
                    getName: function () {
                        return i.profileData.name
                    },
                    setName: function (e) {
                        i.profileData.name = e
                    },
                    getSubjectData: function () {
                        return i.subjectData
                    },
                    setSubjectData: function (e) {
                        i.subjectData = e
                    },
                    getSelectedSubjectIds: function () {
                        return i.profileData.selectedSubjectIds
                    },
                    selectSubject: function (e) {
                        i.profileData.selectedSubjectIds.hasOwnProperty(e) || (i.profileData.selectedSubjectIds[e] = !0)
                    },
                    deselectSubject: function (e) {
                        i.profileData.selectedSubjectIds.hasOwnProperty(e) && delete i.profileData.selectedSubjectIds[e]
                    },
                    toggleSubject: function (e) {
                        i.isSubjectSelected(e) ? i.deselectSubject(e) : i.selectSubject(e)
                    },
                    getParentSubjects: function () {
                        return i.subjectData ? i.subjectData.parentSubjects : []
                    },
                    getAgeRelatedSubjects: function () {
                        return i.subjectData ? i.subjectData.ageRelatedSubjects : []
                    },
                    isSubjectSelected: function (e) {
                        return i.profileData.selectedSubjectIds.hasOwnProperty(e)
                    },
                    getSubjectImagePath: function (e) {
                        return Globals.GLOBAL_CDN_BASE + "nuf_icons/subject" + e.level + "/subject_icon_" + e.subjectId + ".png?v=" + Globals.GLOBAL_ASSETS_VERSION
                    },
                    getTotalSteps: function () {
                        return s.length
                    },
                    getCurStepNumber: function () {
                        return s.indexOf(e.current.name) + 1
                    },
                    start: function (t, a) {
                        if (i.clearProfileData(), t === i.TEACHER_OFFER) {
                            if (i.pathType = i.TEACHER_OFFER, s = l[i.TEACHER_OFFER], n.currentProfile.nufComplete) return void e.go("browse")
                        } else if (t === i.NEW_PROFILE) {
                            if (i.pathType = i.NEW_PROFILE, s = l[i.NEW_PROFILE], a && a.profileToUpdateId) {
                                if (n.currentProfile.nufComplete && o.isAuth()) return void e.go("browse");
                                i.profileData.profileName = n.currentProfile && "My Profile" !== n.currentProfile.name ? n.currentProfile.name : ""
                            }
                        } else i.pathType = i.NEW_PROFILE, s = l[i.pathType];
                        a && (c = a);
                        i.pathType !== i.NEW_PROFILE || c.profileToUpdateId || 4 !== n.childProfiles.length || e.go("browse");
                        1 === n.childProfiles.length && n.childProfiles[0].nufComplete;
                        var u = 1 == Globals.GLOBAL_IS_AUTHED && n && n.initialized ? 1 : 0;
                        r.log(r.events.NUF_LOAD, {
                            existingUser: u
                        });
                        var d = s[0];
                        e.go(d), p(d, "_start")
                    },
                    transitionState: function (t) {
                        var o = e.current.name,
                            n = s.indexOf(o);
                        if (-1 === n) return;
                        var r = t ? n + 1 : n - 1;
                        if (r < 0) return;
                        r === i.getTotalSteps() ? (p(o, "_complete"), i.finish()) : (p(o, "_complete"), e.go(s[r]), p(s[r], "_start"))
                    },
                    finish: function () {
                        var o = JSON.stringify(Object.keys(i.profileData.selectedSubjectIds));
                        if (i.pathType !== i.NEW_PROFILE || c.profileToUpdateId) {
                            var a = {
                                subjectIds: o,
                                profileName: i.profileData.profileName,
                                age: i.profileData.age
                            };
                            t.post("WebUser", "completeNuf", a).then(function (t) {
                                n.childProfiles && r.log(r.events.NUF_COMPLETE, {
                                    profileCount: n.childProfiles.length
                                }), r.log(r.events.NUF_STEF_PROFILE_CREATE_COMPLETE, {
                                    age: i.profileData.age,
                                    userid: n.currentProfile.id,
                                    source: "update_profile"
                                }), n.getCurrentProfile(t.result).then(function () {
                                    n.renewTimestamp(), i.pathType === i.NEW_PROFILE && c.sendToBrowse ? (i.clearProfileData(), e.go("browse")) : (i.clearProfileData(), e.go("profileSelect"))
                                })
                            })
                        } else {
                            var l = n.getNewProfile({
                                name: i.profileData.profileName,
                                age: i.profileData.age
                            });
                            n.createProfile(l).then(function (a) {
                                a && a.result && a.result.newProfile ? n.selectProfile(a.result.newProfile.id).then(function (a) {
                                    t.post("WebUser", "completeNuf", {
                                        profileName: i.profileData.profileName,
                                        age: i.profileData.age,
                                        subjectIds: o
                                    }).then(function (t) {
                                        bbb("nuf completed ", t), n.childProfiles && r.log(r.events.NUF_COMPLETE, {
                                            profileCount: n.childProfiles.length
                                        });
                                        var o = n.childProfiles.length > 1 ? "add_profile" : "original_signup";
                                        r.log(r.events.NUF_STEF_PROFILE_CREATE_COMPLETE, {
                                            age: i.profileData.age,
                                            userid: n.currentProfile.id,
                                            source: o
                                        }), i.clearProfileData(), e.go("profileSelect")
                                    })
                                }) : (bbb(a.result.alert_message), i.clearProfileData(), e.go("profileSelect"))
                            })
                        }
                    },
                    restartFromFirstState: function () {
                        var t = s[0];
                        e.go(t)
                    },
                    restartConnectFlow: function () {
                        i.start(i.TEACHER_OFFER)
                    }
                },
                a = {
                    age: "nuf.age",
                    subjects: "nuf.subjects",
                    connectTeacher: "nuf.connectTeacher",
                    connectStudent: "nuf.connectStudent",
                    connectConfirmChild: "nuf.connectConfirmChild"
                },
                l = {
                    newProfile: [a.age, a.subjects],
                    teacherOffer: [a.connectTeacher, a.connectStudent, a.connectConfirmChild, a.subjects]
                };
            i.pathType = i.NEW_PROFILE;
            var s = l[i.pathType],
                c = {},
                u = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
                d = [-1, 0, 1, 2, 3, 4, 5, 6, 7];
            return i;

            function p(e, t) {
                var o, n = {};
                if (t || (t = ""), e === a.age) o = r.events.NUF_STEP_AGE, n.age = i.getAge(), r.log(o + t, n);
                else if (e === a.subjects) {
                    o = r.events.NUF_STEP_PROFILE_SUBJECTS;
                    var l = Object.keys(i.getSelectedSubjectIds());
                    if (l && l.length > 0) {
                        l.sort(), n.subjects = "|";
                        for (var s = 0; s < l.length; s++) n.subjects += l[s] + "|"
                    } else n.subjects = null;
                    n.age = i.getAge(), "_complete" === t && (n.interest_count = l.length), r.log(o + t, n)
                } else e === a.connectTeacher && "_start" === t ? (o = r.events.NUF_CONNECT_VIEW, r.log(o)) : e === a.connectStudent && "_start" === t && (o = r.events.NUF_CONNECT_CHILD_SEARCH_START, r.log(o))
            }

            function f() {
                return !(!i.profileData.profileName || "" === i.profileData.profileName || i.profileData.profileName.length > 30)
            }

            function g() {
                return i.profileData.firstName && i.profileData.firstName.length <= 25
            }

            function m() {
                return i.profileData.lastName && i.profileData.lastName.length <= 25
            }

            function h() {
                return u.includes(i.profileData.age)
            }

            function v() {
                return d.includes(i.profileData.grade)
            }
        }
        e.$inject = ["$state", "Data", "AccountService", "ProfileService", "BigQuery"], angular.module("epicApp").factory("NufNewService", e)
    }(), angular.module("epicApp").service("PixelService", ["$document", "$rootScope", "$compile", function (e, t, o) {
        this.add = function (n) {
            var r = o('<img height="1" width="1" alt="" style="display:none;" src="' + n + '"/>')(t.$new());
            e.find("body").eq(0).append(r)
        }
    }]),
    function () {
        function e(e, t, o, n, r) {
            return {
                showPreferencesOverlay: function () {
                    e.open({
                        templateUrl: "modals/preferences-overlay/preferences-overlay.html",
                        controller: "PreferencesController",
                        windowClass: "preferences-overlay-modal",
                        size: "lg",
                        keyboard: !1
                    }).result.then(function () {
                        var e = t.browseData.section.name;
                        t.getCategorySections(e).then(function () {}), n.reload(), null, o.log(o.events.PREFERENCES_CHANGED)
                    }, function () {
                        null
                    })
                },
                preferencesEnabled: function () {
                    return "true" === r.getSessionStorageWithKey("stacy")
                }
            }
        }
        e.$inject = ["$modal", "BrowseService", "BigQuery", "$state", "SessionStorageService"], angular.module("epicApp").service("PreferencesService", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p, f) {
            var g = {
                showProfileAccessModal: function (e, n, r) {
                    "profileSelect" !== t.current.name && s.log(s.events.MENU_SWITCH_TO_PARENT, {
                        child_count: l.childProfiles.length
                    });
                    var i = n ? "profile-access-after-hours.html" : "profile-access.html";
                    o.open({
                        templateUrl: "modals/profile-access/" + i,
                        controller: "ProfileAccessCtrl",
                        controllerAs: "ctrl",
                        resolve: {
                            accessData: function () {
                                return {
                                    profile: e,
                                    selectProfile: n,
                                    onSuccess: r
                                }
                            }
                        }
                    })
                },
                selectProfile: function (e, t) {
                    var o = l.currentProfile.id;
                    if (t) h(e, o);
                    else if (e.isParent) g.showProfileAccessModal(e, null, h);
                    else if (e.pin && e.pin.length > 0) {
                        var n = a.isEducator() ? m : h;
                        g.showProfileAccessModal(e, null, n)
                    } else a.isEducator() && !e.isParent ? m(e) : h(e, o)
                }
            };
            return g;

            function m(t) {
                a.isEducator() && !a.afterHoursEnabled && u.afterHours() && !u.validAfterHoursTimestamp() ? t.accountType == a.ACCOUNT_TYPE_STANDARD ? t.validSub ? h(t, l.currentProfile.id) : function (e) {
                    r.show({
                        templateUrl: "md-dialog/subscription/subscription-dialog-prompt.html",
                        controller: "SubscriptionDialogPromptCtrl",
                        controllerAs: "ctrl",
                        clickOutsideToClose: !0,
                        locals: {
                            profileData: e
                        }
                    })
                }(t) : Promise.resolve(f.loadExperimentDataByLabel(f.SELECT_PROFILE_POPUP, "user", t.id)).then(function (r) {
                    e.set("ah-test-flow", {
                        popupBucket: r
                    });
                    var i = {
                            "select-profile-popup-control": "modals/simplified-login/after-hours/after-hours.html",
                            "select-profile-popup-experiment": "modals/simplified-login/after-hours/after-hours-v2.html"
                        } [e.get("ah-test-flow").popupBucket],
                        a = l.parentProfile;
                    ! function (t, r, i) {
                        o.open({
                            templateUrl: i,
                            controller: ["$scope", function (o) {
                                o.profile = t, o.teacher = r, o.cdn = Globals.GLOBAL_CDN_BASE;
                                var i = {
                                    studentId: t.id,
                                    local_day: u.currentDay(),
                                    local_hour: u.currentHour()
                                };
                                s.log(s.events.AFTER_HOURS_BLOCK_VIEW, i);
                                var a = f.loadExperimentDataByLabel(f.TEACHER_OFFER, "user", t.id),
                                    l = f.loadExperimentDataByLabel(f.PROMO_PAGE, "user", t.id);
                                Promise.all([a, l]).then(function (t) {
                                    e.set("ah-test-flow", {
                                        teachOfferBucket: t[0],
                                        promoBucket: t[1]
                                    })
                                }), o.homeAccess = function () {
                                    e.set("after-hours-info", {
                                        firstName: t.firstName,
                                        grade: t.grade,
                                        teacherName: r.name
                                    }), o.$close(), d.removePromosFromSessionStore(), p.setSessionStorageWithConfig("AHLinkInfo", {
                                        t: t.accountId,
                                        c: t.id
                                    }, !0);
                                    var i = {
                                        studentId: t.id,
                                        local_day: u.currentDay(),
                                        local_hour: u.currentHour()
                                    };
                                    s.log(s.events.AFTER_HOURS_GET_STARTED, i);
                                    var a = e.get("ah-test-flow"),
                                        l = "?utm_source=epic!&utm_medium=popup&utm_campaign=homeaccess";
                                    "teacher-offer-control" === a.teachOfferBucket ? n.open(Globals.GLOBAL_URL + "teacheroffer" + l, "_self") : "promo-page-control" === a.promoBucket ? n.open(Globals.GLOBAL_URL + "promo" + l, "_self") : n.open(Globals.GLOBAL_URL + "classroom-promo" + l, "_self")
                                }, o.signIn = function () {
                                    o.$close(), n.location.href = Globals.GLOBAL_URL + "/sign-in"
                                }
                            }]
                        })
                    }(t, a, i)
                }) : h(t, l.currentProfile.id)
            }

            function h(o, n) {
                s.mark_start(s.events.PERFORMANCE_USER_CHANGE_COMPLETE), l.selectProfile(o.id).then(function (e) {
                    if (l.passwordChecked = !0, e.isParent && s.log(s.events.SWITCH_TO_PARENT), e.nufComplete) {
                        var r = l.currentProfile.getDefaultState();
                        if (r && "profileSelect" !== r.name) t.go(r, null, {
                            reload: e.id != n
                        });
                        else {
                            var i = l.currentProfile.getDefaultState();
                            "personalizeAge" == i ? c.start(c.NEW_PROFILE, {
                                profileToUpdateId: l.currentProfile.id,
                                sendToBrowse: !0
                            }) : t.go(i, {}, {
                                reload: e.id != n
                            })
                        }
                        return o
                    }
                    c.start(c.NEW_PROFILE, {
                        profileToUpdateId: l.currentProfile.id,
                        sendToBrowse: !0
                    })
                }).then(function (t) {
                    e.set("eduAccountSkipProfileSelect", a.isEducator() && !!l.currentProfile.isParent), s.mark_end_and_send(s.events.PERFORMANCE_USER_CHANGE_COMPLETE, {
                        src: "epic-header.service"
                    })
                })
            }
        }
        e.$inject = ["LocalStorageService", "$state", "$modal", "$window", "$mdDialog", "RedirectService", "AccountService", "ProfileService", "BigQuery", "NufNewService", "AfterHoursService", "PromoService", "SessionStorageService", "ABTestService"], angular.module("epic.core").service("ProfileAccessService", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s) {
            var c = {
                showProfileEdit: function (e) {
                    if (!e.id && c.childProfiles.length >= n.maxProfiles) return void $window.alert("Oops! You can only create a maximum of " + n.maxProfiles + " profiles.");
                    return o.show({
                        controller: "ProfileEditController",
                        templateUrl: "modals/profile-edit/profile-edit.html",
                        parent: angular.element(document.body),
                        clickOutsideToClose: !0,
                        fullscreen: !1,
                        resolve: {
                            profile: function () {
                                return e
                            }
                        }
                    }).then(function (e) {}, function () {})
                },
                showTransferProfiles: function (e) {
                    return o.show({
                        templateUrl: "md-dialog/profile/profile-transfer/profile-transfer-dialog.html",
                        controller: "ProfileTransferDialogCtrl",
                        clickOutsideToClose: !0,
                        resolve: {
                            params: function () {
                                return {
                                    profiles: e,
                                    transferProfiles: r.transferProfiles
                                }
                            }
                        }
                    })
                },
                showDeleteProfiles: function (e) {
                    return o.show({
                        templateUrl: "md-dialog/profile/profile-delete/profile-delete-dialog.html",
                        controller: "ProfileDeleteDialogCtrl",
                        clickOutsideToClose: !0,
                        resolve: {
                            params: function () {
                                return {
                                    profiles: e,
                                    deleteProfiles: r.deleteProfiles
                                }
                            }
                        }
                    })
                },
                showArchiveProfiles: function (e) {
                    return t.open({
                        templateUrl: "md-dialog/profile/profile-archive/profile-archive-dialog.html",
                        controller: "ProfileArchiveDialogCtrl",
                        clickOutsideToClose: !0,
                        resolve: {
                            params: function () {
                                return {
                                    profiles: e,
                                    archiveProfiles: r.archiveProfiles
                                }
                            }
                        }
                    }).result
                },
                getFrameImage: function (e, t) {
                    e = e || 1;
                    var o = document.createElement("img");
                    return o.crossOrigin = "anonymous", o.src = "large" === t ? Globals.GLOBAL_CDN_BASE + "journal/frames/frame_" + e + "@2x.png" : Globals.GLOBAL_CDN_BASE + "journal/frames/frame_" + e + ".png", o
                },
                getFrameMaskImage: function (e, t) {
                    e = e || 1;
                    var o = document.createElement("img");
                    return o.crossOrigin = "anonymous", o.src = "large" === t ? Globals.GLOBAL_CDN_BASE + "journal/frames/frame_" + e + "_mask@2x.png" : Globals.GLOBAL_CDN_BASE + "journal/frames/frame_" + e + "_mask.png", o
                },
                getAvatarImage: function (e, t) {
                    e = e || 15;
                    var o = document.createElement("img");
                    return o.crossOrigin = "anonymous", o.src = "large" === t ? Globals.GLOBAL_CDN_BASE + "journal/avatars/avatar_" + e + "@2x.png" : Globals.GLOBAL_CDN_BASE + "journal/avatars/avatar_" + e + ".png", o
                },
                getThemeImage: function (e) {
                    e = e || 1;
                    var t = document.createElement("img");
                    t.crossOrigin = "anonymous", t.src = 1 === e || 2 === e || "1" === e || "2" === e ? "/assets/app/achievements/theme" + e + "Bg.png" : Globals.GLOBAL_CDN_BASE + "themes/theme_" + e + "_bg.png";
                    return t
                },
                getThemeImageUrl: function (e) {
                    if ("teacher" === r.currentProfile.userType || "parent" === r.currentProfile.userType) return;
                    return 1 === (e = "" === e || 0 === e || "0" === e ? 1 : e) || 2 === e || "1" === e || "2" === e ? "/assets/app/achievements/theme" + e + "Bg@2x.png" : Globals.GLOBAL_CDN_BASE + "themes/theme_" + e + "_bg@2x.png"
                },
                getLockImage: function () {
                    var e = document.createElement("img");
                    return e.src = "/assets/app/achievements/lock.svg", e
                },
                desaturateImage: function (e, t, o) {
                    for (var n = e.getImageData(0, 0, t, o), r = n.data, i = 0; i < r.length; i += 4) {
                        var a = .34 * r[i] + .5 * r[i + 1] + .16 * r[i + 2];
                        r[i] = a, r[i + 1] = a, r[i + 2] = a
                    }
                    return n
                },
                setAvatarsToStorage: function () {
                    var e = {};
                    e.lastUpdated = a.getCurrentTimestamp(), e.avatarInfo = c.savedAvatars, i.set("avIn2", e)
                },
                savedAvatars: function () {
                    i.remove("avIn");
                    var e = i.get("avIn2");
                    return e ? e.avatarInfo : {}
                }(),
                showEnableHomeAccess: function (o) {
                    if (!o) return void console.warn("No profile data received by Enable Home Access modal.");
                    var n = e.$new(!0);
                    return n.profile = o, n.enableHomeAccessForMultiple = !1, t.open({
                        templateUrl: "modals/enable-home-access/enable-home-access.html",
                        controller: "EnableHomeAccessController",
                        scope: n
                    }).result
                },
                showEnableHomeAccessForMultiple: function (o) {
                    var n = e.$new(!0);
                    return n.enableHomeAccessForMultiple = !0, n.dashboardStats = o, t.open({
                        templateUrl: "modals/enable-home-access/enable-home-access.html",
                        controller: "EnableHomeAccessController",
                        scope: n
                    }).result
                },
                sendEnableHomeAccessRequest: function (e, t, o) {
                    if (!e) return;
                    void 0 === o && (o = !0);
                    var n = t || e.email;
                    if (!n) return;
                    return l.post("WebEmail", "sendEnableHomeAccess", {
                        email: n,
                        userId: e.id
                    }).then(function (t) {
                        t && (r.getProfileData(e), o && u())
                    })
                },
                showHomeAccessSentToast: u,
                parentAvatars: [84, 85, 86, 87, 88, 89, 90, 91, 92],
                teacherAvatars: [34, 75, 76, 77, 78, 79, 80, 81, 82, 83]
            };
            return c;

            function u(e) {
                var t = e ? "Home Access Invites Sent" : "Home Access Invite Sent";
                s.show({
                    hideDelay: 5e3,
                    position: "bottom right",
                    controller: "ToastTemplateController",
                    templateUrl: "toasts/toast-template/toast-template.html",
                    locals: {
                        title: t,
                        desc: "",
                        imgPath: Globals.GLOBAL_CDN_BASE + "website/assets/app/toasts/home-access-character.svg",
                        classes: ["wide-toast-image"]
                    }
                })
            }
        }
        e.$inject = ["$rootScope", "$modal", "$mdDialog", "AccountService", "ProfileService", "LocalStorageService", "AfterHoursService", "Data", "$mdToast"], angular.module("epicApp").service("ProfileEditService", e)
    }(), angular.module("epicApp").service("QuizService", ["$modal", "$rootScope", "EpicConfirmationService", "Data", "$mdToast", "AudioService", function (e, t, o, n, r, i) {
        var a;
        this.setQuiz = function (e) {
            this.quizData = e, t.$broadcast("quiz.update", {
                quizData: this.quizData
            })
        };
        var l = function (t, o) {
            t ? a = e.open({
                controller: "QuizPublishedModalController",
                templateUrl: "modals/quiz-published/quiz-published.html",
                resolve: {
                    quizData: function () {
                        return o
                    },
                    contentTitle: function () {
                        return o.quiz.title
                    }
                }
            }) : r.show({
                hideDelay: 3e3,
                position: "bottom right",
                controller: "QuizPublishedToastController",
                templateUrl: "toasts/quiz-published/quiz-published.html",
                locals: {
                    contentTitle: o.quiz.title,
                    isPublished: t
                }
            })
        };
        this.isQuizValid = function (e) {
            var t = e.quiz.title,
                o = e.quizQuestions.length;
            return !(!t && o < 1)
        }, this.isQuizValidForPublishing = function (e) {
            var t = e.quiz.title,
                o = e.quizQuestions.length;
            return !(!e && !e.quiz || !t || o < 3)
        }, this.saveQuizToServer = function (e, t) {
            if (this.isQuizValid(e)) {
                var o = this;
                n.post("WebQuiz", "createOrUpdateQuiz", {
                    quizDataJSON: JSON.stringify(e)
                }).then(function (e) {
                    var n, i;
                    e.result && (o.setQuiz(e.result), t && (n = !0, i = e.result, r.show({
                        hideDelay: 3e3,
                        position: "bottom right",
                        controller: "QuizSaveToastController",
                        templateUrl: "toasts/quiz-save/quiz-save.html",
                        locals: {
                            contentTitle: i.quiz.title,
                            isSuccessful: n
                        }
                    })))
                })
            } else console.warn("Quiz Service - Save failed: Quiz is not valid")
        }, this.deleteQuizFromServer = function (e, i) {
            var a = this;
            o.setTitle("Delete your quiz?"), o.setDescription("If you delete your quiz, it will no longer be available to you. Are you sure you want to delete your quiz?"), o.show().then(function () {
                n.post("WebQuiz", "deleteQuiz", {
                    quizId: e.quiz.id
                }).then(function (o) {
                    o && o.result && (a.quizData = null, t.$broadcast("quiz.delete", {
                        quizId: e.quiz.id
                    }), i && function (e) {
                        r.show({
                            hideDelay: 3e3,
                            position: "bottom right",
                            controller: "QuizDeleteToastController",
                            templateUrl: "toasts/quiz-delete/quiz-delete.html",
                            locals: {
                                contentTitle: e.quiz.title
                            }
                        })
                    }(e))
                })
            }, function () {})
        }, this.publishQuiz = function (e) {
            if (e) {
                var o = this;
                n.get("WebQuiz", "publishQuiz", {
                    quizId: e
                }).then(function (e) {
                    e && e.result && (t.$broadcast("quiz.update", {
                        quizData: e.result
                    }), o.quizData = e.result, l(!0, e.result))
                })
            }
        }, this.publishQuizWithValidation = function (e, t) {
            return !!(e && t && this.isQuizValidForPublishing(t)) && (this.publishQuiz(e), !0)
        }, this.unpublishQuiz = function (e) {
            if (e) {
                var o = this;
                n.get("WebQuiz", "unPublishQuiz", {
                    quizId: e
                }).then(function (e) {
                    e && e.result && (t.$broadcast("quiz.update", {
                        quizData: e.result
                    }), o.quizData = e.result, l(!1, e.result))
                })
            }
        }, this.createOrTakeQuiz = function () {
            this.close(), a = e.open({
                templateUrl: "modals/quiz/quiz-take-or-create.html",
                controller: "QuizTakeOrCreateController"
            })
        }, this.createQuiz = function (e) {
            if (this.close(), this.quizData && 0 !== this.quizData.quiz.published) {
                o.setTitle("Edit Your Quiz?"), o.setDescription("Would you like to unpublish and edit your quiz? Others won't be able to see your quiz if it is unpublished.");
                var n = this;
                o.show().then(function () {
                    n.unpublishQuiz(n.quizData.quiz.id), t.$broadcast("quiz.drawer", {
                        openDrawer: !0,
                        bookTitle: e
                    })
                }, function () {})
            } else t.$broadcast("quiz.drawer", {
                openDrawer: !0,
                bookTitle: e
            })
        }, this.takeQuiz = function (o) {
            this.close(), t.$broadcast("quiz.taking", {
                isQuizOpen: !0
            }), t.$broadcast("video.playPause", {
                pause: !0
            }), i.isOn && i.playpause(), t.$broadcast("magicpan.disable.key"), a = e.open({
                templateUrl: "modals/quiz/quiz-single.html",
                controller: "QuizController",
                resolve: {
                    bookTitle: function () {
                        return o
                    }
                },
                size: "lg",
                backdrop: "static",
                keyboard: !1
            }).result.then(function () {
                t.$broadcast("quiz.taking", {
                    isQuizOpen: !1
                }), t.$broadcast("magicpan.enable.key")
            }, function () {
                t.$broadcast("quiz.taking", {
                    isQuizOpen: !1
                }), t.$broadcast("magicpan.enable.key")
            })
        }, this.close = function () {
            a && a.close && a.close()
        }, this.formattedPercentage = function (e) {
            return Math.ceil(e.correct / e.total * 100)
        }, this.formattedColor = function (e) {
            var t = this.formattedPercentage(e);
            return t > 80 ? ["green"] : t > 60 ? ["magenta"] : ["orange"]
        }
    }]), angular.module("epicApp").factory("ReadToMeService", ["$rootScope", "$timeout", "$interval", "BookService", "AudioService", "AssetService", "BookWordDataService", "BigQuery", function (e, t, o, n, r, i, a, l) {
        var s = {
            noAudioWaitTime: 1e3,
            audioHighlightPollRate: 100,
            audioHighlightAnticipationTime: .2,
            currPageAudioIndex: null,
            isPlaying: !1,
            waitForPageFlipTimeout: null,
            waitForPageAudioPlayTimeout: null,
            urlTable: {},
            togglePlayPause: function () {
                var e = null,
                    t = {
                        content_type: "book",
                        bookid: n.bookData.book.id
                    };
                s.isPlaying ? (s.pause(), e = l.events.CONTENT_READTOME_PAUSE) : (s.play(), e = l.events.CONTENT_READTOME_PLAY), e && l.log(e, t)
            },
            play: function () {
                n.hasCurrentOrFutureAudioFromIndex(n.getCurrentPage()) && (s.isPlaying = !0, r.isLoaded ? (r.play(), s.pollAudioForHighlightUpdate()) : s.seekNextAudio(), r.audio && r.audio.paused && (s.isPlaying = !1))
            },
            pause: function () {
                s.isPlaying = !1, s.cancelPollAudioForHightlightUpdate(), r.pause(), s.waitForPageFlipTimeout && t.cancel(s.waitForPageFlipTimeout), s.waitForPageAudioPlayTimeout && t.cancel(s.waitForPageAudioPlayTimeout)
            },
            setVolume: function (e) {
                r.setVolume(e)
            },
            getVolume: function () {
                return r.getVolume()
            },
            clearAndPause: function () {
                s.isPlaying = !1, s.cancelPollAudioForHightlightUpdate(), r.clear(), s.waitForPageFlipTimeout && t.cancel(s.waitForPageFlipTimeout), s.waitForPageAudioPlayTimeout && t.cancel(s.waitForPageAudioPlayTimeout)
            },
            seekNextAudio: function (o) {
                s.isPlaying = !0;
                var r = n.getCurrentPage(),
                    i = n.getAudioPropertyByPageIndex(r - 1),
                    a = n.getAudioPropertyByPageIndex(r);
                if (i && !o) {
                    var l = r - 1,
                        c = a || n.onLastPage() ? null : r;
                    s.setCurrWordDataByPageIndexRange(l, c), s.setAudio(r - 1), s.play()
                } else a ? s.waitForPageAudioPlayTimeout = t(function () {
                    s.setCurrWordDataByPageIndexRange(r), s.setAudio(r), s.play()
                }, s.noAudioWaitTime) : s.waitForPageFlipTimeout = t(function () {
                    e.$broadcast("epicFlipBook.flipForward")
                }, s.noAudioWaitTime)
            },
            setAudio: function (e) {
                s.currPageAudioIndex = e;
                var t = n.getAudioPropertyByPageIndex(e);
                if (t) {
                    var o = s.urlTable[t];
                    (!o || Date.now() > o.ttl) && (o = {
                        src: i.getFinalAssetPath(t),
                        ttl: Date.now() + 36e5
                    }, s.urlTable[t] = o), r.set(o.src)
                } else r.set(null)
            },
            initHighlightProps: function () {
                s.currBookWordDataList = [], s.highlightCursor = 0, s.currHightlightedWordDO = null
            },
            setCurrWordDataByPageIndexRange: function (e, t) {
                t = t || e, a.getOrLoadWordDOListByPageIndexRange(e, t).then(function (e) {
                    s.initHighlightProps(), Array.isArray(e) && (s.currBookWordDataList = e)
                })
            },
            moveHighlightCursorForward: function () {
                s.highlightCursor = s.highlightCursor + 1
            },
            currHighlightCursorPositionIsCorrect: function (e, t, o) {
                return !o.time || (parseFloat(t.time), e < parseFloat(o.time))
            },
            currHighlightCursorPositionNeedsHighlighting: function (e, t) {
                var o = parseFloat(t.time),
                    n = parseFloat(t.duration);
                return e > o && e < o + n
            },
            seekHighlightCursorLocationByAudioTime: function (e) {
                var t = s.highlightCursor,
                    o = s.highlightCursor + 1,
                    n = s.currBookWordDataList[t],
                    r = s.currBookWordDataList[o];
                return !r || s.currHighlightCursorPositionIsCorrect(e, n, r) ? t : (s.moveHighlightCursorForward(), s.seekHighlightCursorLocationByAudioTime(e))
            },
            setHighlightCursorLocationAsHighlighted: function () {
                var e = s.currBookWordDataList[s.highlightCursor];
                e && (s.currHightlightedWordDO = e, a.selectWord(e))
            },
            unsetHighlightCursorLocationAsHighlighted: function () {
                s.currBookWordDataList[s.highlightCursor] && (s.currHightlightedWordDO = null, a.deSelectCurrentWord())
            },
            surveyWordHightlighting: function (e) {
                s.seekHighlightCursorLocationByAudioTime(e);
                var t = s.currBookWordDataList[s.highlightCursor];
                t && (s.currHighlightCursorPositionNeedsHighlighting(e, t) ? s.setHighlightCursorLocationAsHighlighted() : s.unsetHighlightCursorLocationAsHighlighted())
            },
            pollAudioForHighlightUpdate: function () {
                s.cancelPollAudioForHightlightUpdate(), s.audioPollInterval = o(function () {
                    var e = r.getAudioTime() + s.audioHighlightAnticipationTime;
                    s.surveyWordHightlighting(e)
                }, s.audioHighlightPollRate)
            },
            cancelPollAudioForHightlightUpdate: function () {
                s.audioPollInterval && o.cancel(s.audioPollInterval)
            }
        };
        return e.$watch(function () {
            return n.getCurrentPage()
        }, function (e, t) {
            void 0 !== e && e !== t && n.isReadToMe() && (s.isPlaying && n.hasCurrentOrFutureAudioFromIndex(e) ? s.seekNextAudio() : s.clearAndPause())
        }), e.$on("audio.ended", function () {
            s.currPageAudioIndex === n.getCurrentPage() ? e.$broadcast("epicFlipBook.flipForward") : !n.onLastPage() && n.hasCurrentOrFutureAudioFromIndex(s.currPageAudioIndex + 1) ? s.seekNextAudio(!0) : s.pause()
        }), e.$on("audio.error", function () {
            s.currPageAudioIndex === n.getCurrentPage() ? s.waitForPageFlipTimeout = t(function () {
                e.$broadcast("epicFlipBook.flipForward")
            }, s.noAudioWaitTime) : !n.onLastPage() && n.hasCurrentOrFutureAudioFromIndex(s.currPageAudioIndex + 1) ? s.seekNextAudio(!0) : s.pause()
        }), s
    }]), angular.module("epicApp").factory("ReadUrlService", ["$state", "$stateParams", "Logsly", function (e, t, o) {
        var n = {
            originalState: null,
            saveReadStateAndParams: function (e, t) {
                n.originalState = {
                    name: e,
                    params: JSON.parse(JSON.stringify(t))
                }
            }
        };
        return n.goToReadState = function (o, r) {
            "read" === e.current.name || "standalone-quiz" === e.current.name ? o === e.current.name && function (e, t) {
                var o = Object.keys(e),
                    n = Object.keys(t);
                if (o.length === n.length) {
                    for (var r in o.forEach(function (e, t) {
                            if (e !== n[t]) return !1
                        }), e)
                        if (e[r].toString() !== t[r].toString()) return !1;
                    return !0
                }
                return !1
            }(r, t) && n.saveReadStateAndParams("browse", {}) : n.saveReadStateAndParams(e.current.name, t), e.go(o, r, {
                location: "replace",
                notify: !1
            })
        }, n.leaveReadState = function () {
            n.originalState && e.go(n.originalState.name, n.originalState.params, {
                location: "replace",
                notify: !1
            })
        }, n
    }]), angular.module("epicApp").factory("RecommendService", ["Data", "BookOverlay", "$timeout", "SiteConstants", function (e, t, o, n) {
        var r = {
            recommendedBookData: [],
            nextBookRecommendation: {},
            getRecommendedBookData: function (o, i) {
                r.clearRecommendedData();
                var a = {
                    bookId: o
                };
                if (i) {
                    o && t.excludedBookIds.push(o);
                    var l = JSON.stringify(t.excludedBookIds);
                    a.excludedBookIds = l
                }
                return e.get("WebBook", "getRecommendedCategoriesByBookId", a).then(function (e) {
                    e && e.result && Array.isArray(e.result.UserCategory) && (r.recommendedBookData = e.result.UserCategory.filter(function (e) {
                        return Array.isArray(e.bookData) && e.bookData.length > 0
                    }), r.recommendedBookData.forEach(function (e) {
                        e.bookOnlyData = [], e.videoOnlyData = [], e.bookData.forEach(function (t) {
                            t.type === n.BOOK_TYPE_STANDARD || t.type === n.BOOK_TYPE_AUDIOBOOK ? e.bookOnlyData.push(t) : t.type === n.BOOK_TYPE_VIDEO && e.videoOnlyData.push(t)
                        })
                    }))
                })
            },
            getRecommendedBookDataWithNext: function (e, t) {
                return r.getRecommendedBookData(e, !0).then(function () {
                    r.nextBookRecommendation = function (e) {
                        if (!Array.isArray(r.recommendedBookData) || 0 === r.recommendedBookData.length) return {};
                        var t = r.recommendedBookData[0];
                        return e === n.BOOK_TYPE_VIDEO && t.videoOnlyData ? t.videoOnlyData[0] : e && t.bookOnlyData ? t.bookOnlyData[0] : t.bookData[0]
                    }(t)
                })
            },
            clearRecommendedData: function () {
                r.recommendedBookData = [], r.nextBookRecommendation = {}
            }
        };
        return r
    }]),
    function () {
        function e(e, t, o) {
            return {
                shakeScreen: function (e) {
                    (function (e, t) {
                        t.className = t.className.replace(new RegExp("(?:^|\\s)" + e + "(?!\\S)", "g"), "")
                    })("shake", e), requestAnimationFrame(function (t) {
                        requestAnimationFrame(function (t) {
                            ! function (e, t) {
                                var o = [];
                                "" != t.className && (o = t.className.split(" "));
                                if (-1 !== o.indexOf(e)) return;
                                o.push(e), t.className = o.join(" ")
                            }("shake", e)
                        })
                    })
                }
            }
        }
        e.$inject = ["$animate", "$interval", "$q"], angular.module("epicApp").service("ScreenShaker", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u) {
            var d = {
                    setLastSearchTerm: function (e) {
                        p.lastSearchTerm = e
                    },
                    getLastSearchTerm: function () {
                        return p.lastSearchTerm
                    },
                    resetLastTerm: function () {
                        p.lastSearchTerm = ""
                    },
                    searchTextChanged: D,
                    tabClicked: P,
                    autocomplete: function (e, t) {
                        var o = [];
                        return i.get("WebBook", "getAutoCompleteFullDataForSearchTerm", {
                            term: e,
                            uuid: !1,
                            isEducator: !1
                        }).then(function (e) {
                            var t, n, r, i = Math.min(e.result.length, 20);
                            for (t = 0; t < i; t++) "book" !== e.result[t].type && "tag" !== e.result[t].type || (n = e.result[t].type, r = "book" === e.result[t].type ? e.result[t].title : e.result[t].tag, o.push({
                                term: r,
                                type: n,
                                id: e.result[t].id
                            }));
                            if (d.isFocusedOnSearchInput) return o
                        })
                    },
                    selectedSearchTerm: function (e) {
                        if (!e) return;
                        D(e ? e.title : null, {
                            source: "autocomplete"
                        }, e)
                    },
                    getCorrespondingSectionTab: function (e) {
                        var t = e.title.toUpperCase();
                        for (var o in d.tabs)
                            if (d.tabs[o].name === t) return {
                                id: d.tabs[o].id
                            };
                        return {
                            id: 3
                        }
                    },
                    sortByProp: function (e) {
                        if (void 0 === f[e] || !d.searchResults || f[e] === m) return d.sortOrder.value = 1 === d.sortOrder.value ? 2 : 1, void c.log(c.events.SEARCH_SORT_ORDER_CHANGED);
                        d.sortOrder.value = 1, d.sortOrderColumn = e, m = f[e], L(), c.log(c.events.SEARCH_SORT_CHANGED, {
                            sortType: m,
                            sortOrder: d.sortOrder.value
                        })
                    },
                    clearFiltersAndSearch: function () {
                        for (var e in d.filterData) {
                            var t = d.filterData[e];
                            "level_type" != t.model && (d.filterModel[t.model] = t.default)
                        }
                    },
                    filtersSet: function () {
                        for (var e in d.filterData) {
                            var t = d.filterData[e];
                            if ("level_type" != t.model && d.filterModel[t.model] != t.default) return !0
                        }
                        return !1
                    },
                    toggleFavoriteInCurrentScopeSearchResults: function (e, t) {
                        if ("featured" === t)
                            for (var o = 0; o < d.searchResultsNoSections.length; o++)
                                if (d.searchResultsNoSections[o].data.id === e) {
                                    d.searchResultsNoSections[o].data.favorited = !d.searchResultsNoSections[o].data.favorited;
                                    break
                                }
                        "rows" === t && d.featuredSearchResult && d.featuredSearchResult[0].data.id === e && (d.featuredSearchResult[0].data.favorited = !d.featuredSearchResult[0].data.favorited)
                    },
                    getSubjectImagePath: function (e) {
                        return e.image_path ? Globals.GLOBAL_CDN_BASE + e.image_path + "@2x.png" : Globals.GLOBAL_CDN_BASE + "section_thumbnails/section-thumbnail-" + e.subjectId + "@2x.png"
                    },
                    getSearchType: w,
                    restoreSearchText: function (e, o) {
                        e ? t.$broadcast("angucomplete-alt:changeInput", "search_input", e) : t.$broadcast("angucomplete-alt:clearInput")
                    },
                    clearSearch: function () {
                        d.searchTextChanged(""), d.currentTab = 1
                    },
                    init: function () {
                        if (d.numSearchesRunning = 0, g === u.currentProfile.id) return;
                        i.get("WebBook", "getSortData", {}).then(function (e) {
                                if (e.result && e.result.values.length)
                                    for (var t = e.result, o = 0; o < t.values.length; o++) {
                                        var n = t.values[o],
                                            r = n.id;
                                        f[r] = n.property, r == t.default && (m = t.values[o].property)
                                    }
                            }), i.get("WebBook", "getSearchFilterData").then(function (e) {
                                if (e.result)
                                    if (h = {}, d.filterModel = {}, d.filterDataReadingLevel = {
                                            filters: []
                                        }, d.filterDataReadingLevelMapped = {}, d.filterReadingLevelIdToModel = {}, d.filterModelReadingLevel = {}, d.filterModelReadingLevelOther = {}, d.filterModelReadingLevelVideo = {}, d.gradeFilterId = null, d.filterData = e.result, u.currentProfile.isParent) {
                                        for (var o = e.result, n = 0; n < o.length; n++) {
                                            if (c = o[n], d.filterDataReadingLevelMapped[c.model] = c, c.active) {
                                                var r = c.active[0],
                                                    i = c.active[1];
                                                c.id = i, d.filterDataReadingLevel.hasOwnProperty(r) || (d.filterDataReadingLevel[r] = {}), d.filterDataReadingLevel[r][i] = c, d.filterReadingLevelIdToModel[i] = c.model
                                            } else d.filterDataReadingLevel.filters.push(c);
                                            c.expanded = !1, c.hasSubOptions = "level_type" === c.model, d.filterModelReadingLevelOther[c.model] = [], d.filterModelReadingLevelVideo[c.model] = [], c.valuesMap = {};
                                            for (var a = c.values, l = 0; l < a.length; l++) d.filterModelReadingLevelOther[c.model][a[l].id] = !1, "grade" === a[l].model && (d.gradeFilterId = a[l].id), c.valuesMap[a[l].id] = a[l];
                                            d.filterDataReadingLevelMapped[c.model].cleared = d.filterModelReadingLevelOther[c.model].slice()
                                        }
                                        d.filterModelReadingLevelVideo.level_type[d.gradeFilterId] = !0, d.filterModelReadingLevel = d.filterModelReadingLevelOther
                                    } else {
                                        for (var s in d.filterModel = {}, d.filterData) {
                                            var c = d.filterData[s];
                                            d.filterModel[c.model] = c.default, h[c.model] = c.default
                                        }
                                        t.$watch(function () {
                                            return d.filterModel
                                        }, function (e, t) {
                                            e !== t && (angular.forEach(e, function (o, n) {
                                                "level_type" === n && e.level_type !== t.level_type && (d.filterModel = angular.copy(h), d.filterModel.level_type = e.level_type, d.filterModel.non_fiction = e.non_fiction)
                                            }), I())
                                        }, !0)
                                    }
                            }), a.getSearchTabs().then(function (e) {
                                d.tabs = e, d.currentTabName = d.tabs[d.currentTab].name
                            }), i.get("WebUser", "getUserPreferences", {
                                type: "search"
                            }).then(function (e) {
                                var t = {
                                    subjects: [],
                                    readingAge: null
                                };
                                return e && e.result ? (e.result.Subjects && (t.subjects = e.result.Subjects), e.result.UserPreference.age && e.result.UserPreference.age > 0 && (t.readingAge = e.result.UserPreference.age), t) : t
                            }).then(function (e) {
                                d.subjects = e.subjects,
                                    function (e) {
                                        d.loadingTrendingSearchTerms = !0;
                                        var t = {
                                            limit: 10
                                        };
                                        e && (t.age = e);
                                        i.get("WebBook", "getTrendingSearchTerms", t).then(function (e) {
                                            if (!e || 0 === e.result.length) return "age" in t ? i.get("WebBook", "getTrendingSearchTerms", {
                                                limit: 10
                                            }).then(function (e) {
                                                e && e.result && (d.trendingSearchTerms = e.result, d.loadingTrendingSearchTerms = !1)
                                            }) : void(d.loadingTrendingSearchTerms = !1);
                                            d.loadingTrendingSearchTerms = !1, d.trendingSearchTerms = e.result
                                        })
                                    }(e.readingAge)
                            }), t.$watch(function () {
                                return d.sortOrder.value
                            }, function (e, t) {
                                e != t && L()
                            }), g = u.currentProfile.id,
                            function () {
                                if (d.sortByOptions = [y.relevance], u.currentProfile.isParent) {
                                    var e = d.readingLevelSystem ? y[d.readingLevelSystem] : y.grade;
                                    d.sortByOptions.push(e)
                                } else d.sortByOptions.push(y.lexile_level_labeled), d.sortByOptions.push(y.accelerated_level_labeled), d.sortByOptions.push(y.readingAge);
                                d.sortByOptions.push(y.readTime), d.sortByOptions.push(y.title), d.currentSortByProperty = d.sortByOptions[0]
                            }()
                    },
                    logBigQuery: _,
                    showAdvancedFilters: !1,
                    toggleAdvancedFilters: function () {
                        d.showAdvancedFilters = !d.showAdvancedFilters, !0 === d.showAdvancedFilters && c.log(c.events.SEARCH_FILTER_OPEN)
                    },
                    sortByOptions: [],
                    currentSortByProperty: null,
                    toggleFilterOption: function (e, t) {
                        var o = d.filterData.find(function (t) {
                            return t.model === e
                        });
                        if (!o) return;
                        var n = d.filterModelReadingLevel[e][t];
                        o.acceptsMultiple || d.clearFiltersReadingLevel([e]);
                        if (d.filterModelReadingLevel[e][t] = !n, d.filterModelReadingLevel[e][t]) {
                            var r = d.filterDataReadingLevelMapped[e].valuesMap[t].name;
                            c.log(c.events.SEARCH_FILTER_SELECTED, {
                                filter: e,
                                value: r
                            })
                        }
                        k(), I(null, 350)
                    },
                    clearFiltersReadingLevel: function (e) {
                        var t, o = !1;
                        if (e && 0 !== e.length) {
                            for (var n = 0; n < e.length; n++)
                                if (t = e[n], d.filterModelReadingLevel.hasOwnProperty(t) && d.isFilterSelected(t)) {
                                    d.filterDataReadingLevelMapped[t].hasSubOptions && Object.keys(d.filterModelReadingLevel[t]).forEach(function (e) {
                                        d.filterModelReadingLevel[t][e] && d.clearFiltersReadingLevel([d.filterReadingLevelIdToModel[e]]), d.filterModelReadingLevel[t][e] = !1
                                    }), o = !0, d.filterModelReadingLevel[t] = d.filterDataReadingLevelMapped[t].cleared.slice();
                                    break
                                }
                        } else
                            for (var r in d.filterModelReadingLevel) d.isFilterSelected(r) && (d.filterModelReadingLevel[r] = d.filterDataReadingLevelMapped[r].cleared.slice(), o = !0);
                        k(), o && I()
                    },
                    isFilterSelected: function (e) {
                        if (!d.filterModelReadingLevel[e]) return;
                        return d.filterModelReadingLevel[e].filter(function (e) {
                            return e
                        }).length
                    },
                    closeAllFilters: function () {
                        d.filterDataReadingLevel.filters.forEach(function (e) {
                            return e.expanded = !1
                        })
                    },
                    isFiltered: function () {
                        for (var e in d.filterModelReadingLevel)
                            if ("level_type" !== e && d.filterModelReadingLevel[e].filter(function (e) {
                                    return e
                                }).length > 0) return !0;
                        return !1
                    },
                    getSearchResultsCount: function () {
                        var e = 0;
                        return d.searchResults.forEach(function (t) {
                            e += t.searchResultSection.searchResultsData.length
                        }), T(e)
                    },
                    roundSearchResultsSection: T,
                    readingLevelSystem: ""
                },
                p = {
                    lastSearchTerm: ""
                },
                f = {},
                g = null;
            d.isFocusedOnSearchInput = !1, d.numSearchesRunning = 0, d.filterData = {};
            var m, h = {};
            d.filterModel = {}, d.filterDataReadingLevel = {
                filters: []
            }, d.filterDataReadingLevelMapped = {}, d.filterReadingLevelIdToModel = {}, d.filterModelReadingLevel = {}, d.filterModelReadingLevelOther = {}, d.filterModelReadingLevelVideo = {}, d.gradeFilterId = null, d.sortOrder = {
                value: 1
            }, d.sortOrderData = [{
                id: 1,
                name: "Descending"
            }, {
                id: 2,
                name: "Ascending"
            }], d.sortOrderColumn = 0;
            var v, b, S = 1,
                y = {
                    relevance: {
                        property: "relevance",
                        name: "Relevance",
                        shouldReverse: !0
                    },
                    title: {
                        property: "title",
                        name: "Title",
                        shouldReverse: !1
                    },
                    readingAge: {
                        property: "readingAge",
                        name: "Reading Age",
                        shouldReverse: !1
                    },
                    readTime: {
                        property: "readTime",
                        name: "Length",
                        shouldReverse: !1
                    },
                    accelerated_level: {
                        property: "arLevel",
                        name: "Reading Level",
                        shouldReverse: !0
                    },
                    lexile_level: {
                        property: "lexileLevel",
                        name: "Reading Level",
                        shouldReverse: !0
                    },
                    dra_level: {
                        property: "draLevel",
                        name: "Reading Level",
                        shouldReverse: !0
                    },
                    fandp_level: {
                        property: "fandpLevel",
                        name: "Reading Level",
                        shouldReverse: !0
                    },
                    guided_reading_level: {
                        property: "grLevel",
                        name: "Reading Level",
                        shouldReverse: !0
                    },
                    grade: {
                        property: "readingAge",
                        name: "Grade",
                        shouldReverse: !0
                    },
                    accelerated_level_labeled: {
                        property: "arLevel",
                        name: "AR Level",
                        shouldReverse: !0
                    },
                    lexile_level_labeled: {
                        property: "lexileLevel",
                        name: "Lexile Level",
                        shouldReverse: !0
                    }
                };
            d.tabs = {}, d.currentTab = 1, d.currentTabName = "", d.visualTab = d.currentTab - 1, t.$watch(function () {
                return d.currentTab
            }, function (e, t) {
                e !== t && (d.visualTab = d.currentTab - 1)
            }), d.tabData = null, d.currentFilterParams = null;
            var C, E = {
                    popular: 0,
                    autocomplete: 0,
                    my_interest: 0,
                    any_interest: 0,
                    voice: 0
                },
                A = !1;
            d.searchText = "", d.lastSearchTerm = "", d.loadingSearch = !1, d.searchResults = [], d.loadingTrendingSearchTerms = !1, d.trendingSearchTerms = [], d.searchResultsNoSections = [], d.noResultsMessage = "";

            function k() {
                u.currentProfile.isParent ? d.readingLevelSystem = d.filterReadingLevelIdToModel[d.filterModelReadingLevel.level_type.indexOf(!0)] : d.readingLevelSystem = d.filterReadingLevelIdToModel[d.filterModel.level_type], d.readingLevelSystem ? d.sortByOptions[S] = y[d.readingLevelSystem] : d.sortByOptions[S] = y.grade, d.currentSortByProperty = d.sortByOptions[0]
            }

            function T(e) {
                return e >= 100 ? "100+" : e <= 10 ? "".concat(e) : "".concat(e - e % 10, "+")
            }

            function w() {
                for (var e in E)
                    if (E[e]) return e;
                return "manual"
            }

            function D(e, t, r, i) {
                if ("the" !== e) {
                    var a = t && t.source ? t.source : null;
                    for (var l in E) E[l] = 0;
                    if (a && (E[a] = 1), b = r ? r.originalObject : null, d.searchText = e || $("#search_input_value").val() || "", n.cancel(v), d.searchText.length >= 3 || o.hasUnicode(d.searchText) ? (d.loadingSearch = !0, !d.isFocusedOnSearchInput || i ? I() : v = n(I.bind(null, b), 2e3, 1)) : 0 === d.searchText.length && (d.loadingSearch = !1, d.searchResults = []), a) switch (a) {
                        case "popular":
                            c.log(c.events.SEARCH_POPULAR, {
                                term: e
                            });
                            break;
                        case "any_interest":
                            c.log(c.events.SEARCH_INTEREST, {
                                interest: e
                            })
                    }
                }
            }

            function I(e, t) {
                var o = t || 0;
                r.cancel(C), C = r(function () {
                    e = e || null, P({
                        id: d.currentTab
                    }, 0, e)
                }, o)
            }

            function P(t, n, r) {
                if (r = r || null, !((n = n || !1) && d.currentTab === t.id || d.searchText.length < 3)) {
                    n && c.log(c.events.SEARCH_TAB_SELECTED);
                    var a, p = null;
                    d.tabs[d.currentTab] && (p = d.tabs[d.currentTab].name), d.currentTab = t.id, d.currentTabName = d.tabs[t.id] ? d.tabs[t.id].name : null, a = p, !u.currentProfile.isParent || "VIDEOS" === a && "VIDEOS" === d.currentTabName || ("VIDEOS" === d.currentTabName ? d.filterModelReadingLevel = d.filterModelReadingLevelVideo : "VIDEOS" === a && (d.filterModelReadingLevel = d.filterModelReadingLevelOther, k()));
                    var f = 0,
                        g = !1;
                    d.tabs[t.id] && (d.currentFilterParams = d.tabs[t.id].filterParams, function (t) {
                        if ("" === d.searchText) return e.when();
                        var n;
                        d.loadingSearch = !0, d.numSearchesRunning++, d.lastSearchTerm = d.searchText, u.currentProfile.isParent ? (n = function () {
                            var e = {};
                            for (var t in d.filterModelReadingLevel) {
                                e[t] = [];
                                for (var o = 0; o < d.filterModelReadingLevel[t].length; o++) d.filterModelReadingLevel[t][o] && e[t].push(o);
                                "non_fiction" === t && e[t].includes(2) && e[t].includes(3) && (e[t] = 1), d.filterDataReadingLevelMapped[t].isArray && 0 !== e[t].length || (e[t] = e[t][0] || null), e.level_type != d.filterDataReadingLevelMapped[t].id || e[t] || (e[t] = [])
                            }
                            return e
                        }(), n = JSON.stringify(n)) : n = JSON.stringify(d.filterModel);
                        var r = {
                            term: d.searchText,
                            filters: n,
                            filterParams: d.currentFilterParams,
                            autocompleteOptions: JSON.stringify(t)
                        };
                        u.currentProfile.isParent || (r.bookFormatVersion = 1);
                        return bbb(r), c.mark_start(c.events.PERFORMANCE_SEARCH_RESULTS_LOADED), i.get("WebBook", "getSearchResultsBySearchTerm", r).then(function (e) {
                            var t, n = "";
                            if ("searchVersion" in e.result && (n = e.result.searchVersion), A && 0 === e.result.searchResultsGroups.length) return _(c.events.SEARCH_CONFIRMED, {
                                search_version: n
                            }), A = !1, d.numSearchesRunning--, P({
                                id: 1
                            });
                            for (var r in (A = 0 === e.result.searchResultsGroups.length) && (t = Math.floor(3 * Math.random()) + 1, d.noResultsCharacter = "v" + t, d.noResultsMessage = 1 === t ? 'Yowsas! We looked high and low and could not find anything with the name of "' + d.searchText + '."' : 2 === t ? 'Whoopsie! No results found for "' + d.searchText + '."' : 'Zoinks! Our records show no match for "' + d.searchText + '." Double check your search and try again!'), d.loadingSearch = !1, d.numSearchesRunning--, d.searchResults = [], e.result.searchResultsGroups) {
                                var a = new s(r, new l(e.result.searchResultsGroups[r]));
                                d.searchResults.push(a)
                            }
                            d.searchResultsNoSections = d.searchResults.reduce(function (e, t) {
                                return e = e.concat(t.searchResultSection.searchResultsData)
                            }, []);
                            var u = null;
                            u = {}, e.result.autocompleteResults && (e.result.autocompleteResults.bookDescription = o.truncate(e.result.autocompleteResults.bookDescription, 250)), u.data = e.result.autocompleteResults ? e.result.autocompleteResults : null, d.featuredSearchResult = e.result.autocompleteResults ? [] : null, e.result.autocompleteResults && d.featuredSearchResult.push(u);
                            var p = d.searchResultsNoSections.reduce(function (e, t) {
                                return e.push(t.data.id), e
                            }, []);
                            d.featuredSearchResult && p.push(d.featuredSearchResult[0].data.id), i.get("WebUserBook", "getAPIFormattedUserBooks", {
                                bookIds: p
                            }).then(function (e) {
                                var t;
                                return e.result ? (t = e.result.reduce(function (e, t) {
                                    return t.favorited && e.push(t.bookId), e
                                }, [])).forEach(function (e) {
                                    d.featuredSearchResult && d.featuredSearchResult[0].data.id === e && (d.featuredSearchResult[0].data.favorited = 1);
                                    for (var t = 0; t < d.searchResultsNoSections.length; t++)
                                        if (d.searchResultsNoSections[t].data.id === e) return void(d.searchResultsNoSections[t].data.favorited = 1)
                                }) : console.warn("Problem getting book data"), t
                            }), c.mark_end_and_send(c.events.PERFORMANCE_SEARCH_RESULTS_LOADED, {
                                filter: d.currentFilterParams,
                                src: "search"
                            }), _(c.events.SEARCH_CONFIRMED, {
                                search_version: n
                            })
                        })
                    }(r).then(function () {
                        if (d.searchResults && !(d.searchResults.length < 1)) {
                            for (var e = 0; e < d.searchResults.length; e++) {
                                for (var t = d.searchResults[e].searchResultSection.searchResultsData, o = 0, n = 0; n < t.length; n++) {
                                    var r = t[n];
                                    r.data;
                                    r.visible = !0, r.currentIndex = f++, o++, r.index = f
                                }
                                d.searchResults[e].searchResultSection.visibleBooks = o, 0 === o || g || (d.searchResults[e].searchResultSection.isFirst = !0, g = !0)
                            }
                            L()
                        }
                    }))
                }
            }

            function _(e, t) {
                var o = d.filterModel,
                    n = !o || 1 == o.level_type && 1 == o.age && 1 == o.lexile_level && 1 == o.non_fiction && 1 == o.accelerated_level ? 0 : 1;
                u.currentProfile.isParent && (n = d.isFiltered() ? 1 : 0);
                for (var r, i, a = 0, l = d.searchResults.length - 1; l > -1; l--) i = (r = d.searchResults[l].searchResultSection).searchResultsData, r && i && (a += i.length);
                var s = {
                    term: d.searchText,
                    result_count: a,
                    voice_search: 0,
                    filters_used: n,
                    suggest_term: parseInt(E.popular),
                    autocomplete: parseInt(E.autocomplete),
                    tab: d.currentTabName,
                    search_type: w()
                };
                "object" === _typeof(t) && null !== t && Object.assign(s, t), c.log(e, s)
            }

            function L() {
                for (var e = 0; e < d.searchResults.length; e++) {
                    d.searchResults[e].searchResultSection.searchResultsData.sort(R)
                }
                d.searchResultsNoSections.sort(R)
            }

            function R(e, t) {
                var o, n;
                1 == d.sortOrder.value ? (o = t, n = e) : (o = e, n = t);
                var r = o[m],
                    i = n[m];
                if (!r && !i) return 0;
                if (!r || !i)
                    if (1 == d.sortOrder.value) {
                        if (!r) return -1;
                        if (!i) return 1
                    } else {
                        if (!r) return 1;
                        if (!i) return -1
                    } return r < i ? -1 : r > i ? 1 : 0
            }
            return d
        }
        e.$inject = ["$q", "$rootScope", "StringService", "$interval", "$timeout", "Data", "SearchTab", "SearchResultSection", "SearchResultModelEntry", "BigQuery", "ProfileService"], angular.module("epicApp").service("SearchService", e)
    }(), angular.module("epicApp").factory("ShareContentService", ["$modal", "$rootScope", "$mdToast", "ProfileService", "TeacherPickerService", "Data", "BigQuery", "CollectionService", function (e, t, o, n, r, i, a, l) {
        var s = {
            sendToUsersWithMessage: function (e, t, o, r) {
                return i.get("WebSharedContent", "shareContentItemWithUsers", {
                    sharerId: n.currentProfile.id,
                    shareeIds: e,
                    contentType: o.contentType || o.collectionType,
                    contentId: o.contentId || o.id,
                    message: t
                }).then(function (e) {
                    if (e) {
                        if (!r) return !0;
                        r()
                    }
                })
            },
            emailToUsersWithMessage: function (e, t, o, r) {
                return i.get("WebSharedContent", "shareContentItemWithUsers", {
                    sharerId: n.currentProfile.id,
                    pendingShareeEmails: e,
                    contentType: o.contentType || o.collectionType,
                    contentId: o.contentId || o.id,
                    message: t
                }).then(function (e) {
                    if (e) {
                        if (!r) return !0;
                        r()
                    }
                })
            },
            openRecentTeacherSelectorModal: function (o, n) {
                "playlist" === o.collectionType && l.logCollectionEvent(o.id, a.events.COLLECTION_SHARE_EPIC_TEACHER, {
                    source: n
                }), s.getRecommendedSharees().then(function (n) {
                    var r = n.accounts;
                    if (0 === Object.keys(r).length) s.openIntroModal(o);
                    else {
                        var i = t.$new(!0);
                        i.content = o, i.accounts = r, e.open({
                            templateUrl: "modals/collection-sharing/recent-teacher-selector/recent-teacher-selector-modal.html",
                            scope: i,
                            controller: "RecentTeacherSelectorModalController"
                        })
                    }
                })
            },
            getRecommendedSharees: function () {
                return i.get("WebSharedContent", "getRecommendedSharees", {
                    sharerId: n.currentProfile.id,
                    limit: 20
                }).then(function (e) {
                    for (var t = e.result.accounts, o = Object.keys(t).length, n = 0; n < o; n++) t[n].selected = !1, t[n].teacherName = t[n].educatorPrefix + " " + t[n].educatorFirstName + " " + t[n].educatorLastName, t[n].avatarId = t[n].avatar;
                    return {
                        accounts: t
                    }
                })
            },
            sendToSelectedTeachers: function (e, t, o) {
                for (var n = [], r = [], i = 0; i < Object.keys(e).length; i++) e[i].selected && (n.push(e[i]), r.push(e[i].userId));
                s.openShareWithTeachersModal(n, r, t)
            },
            teachersAreSelected: function (e) {
                for (var t = e, o = 0; o < Object.keys(t).length; o++)
                    if (t[o].selected) return !0;
                return !1
            },
            openShareWithTeachersModal: function (o, n, r) {
                var i = t.$new(!0);
                n[0] || (i.email = o[0].email), i.content = r, i.sharees = o, i.shareeIds = n, e.open({
                    templateUrl: "modals/collection-sharing/share-with-teacher/share-with-teacher-modal-template.html",
                    scope: i,
                    controller: "ShareWithTeacherModalController"
                }).result.then(function (e) {
                    e && e.shared && s.openSharedToast(r)
                })
            },
            openEmailShareModal: function (o, n) {
                "playlist" === o.collectionType && l.logCollectionEvent(o.id, a.events.COLLECTION_SHARE_EMAIL, {
                    source: n
                });
                var r = t.$new(!0);
                r.content = o, e.open({
                    templateUrl: "modals/collection-sharing/collection-email-share/collection-email-share-modal.html",
                    scope: r,
                    controller: "CollectionEmailShareModalController"
                }).result.then(function (e) {
                    e && e.shared && s.openSharedToast(o)
                })
            },
            shareToEmail: function (e, t, o, n) {
                return i.get("WebAccount", "getTeacherPickerAccountByEmail", {
                    email: e
                }).then(function (r) {
                    var i = r.result;
                    if (i.userId) {
                        var a = [];
                        return a.push(i.userId), s.sendToUsersWithMessage(a, t, o, n)
                    }
                    var l = [];
                    return l.push(e), s.emailToUsersWithMessage(l, t, o, n)
                })
            },
            openIntroModal: function (o) {
                var n = t.$new(!0);
                n.content = o, e.open({
                    templateUrl: "modals/collection-sharing/share-collection/share-collection-modal.html",
                    scope: n,
                    controller: "ShareCollectionModalController"
                })
            },
            openPinterestUrl: function (e, t, o) {
                return window.open(e, "_pinIt", "status=no,resizable=yes,scrollbars=yes,personalbar=no,directories=no,location=no,toolbar=no,menubar=no,width=780,height=570,left=200,top=100"), l.logCollectionEvent(t, a.events.COLLECTION_SHARE_PINTEREST, {
                    source: o
                }), !1
            },
            openCopyCollectionLinkModal: function (o, n) {
                l.logCollectionEvent(o.id, a.events.COLLECTION_SHARE_COPY_LINK, {
                    source: n
                });
                var r = t.$new(!0);
                r.collection = o, e.open({
                    templateUrl: "modals/collection-sharing/copy-collection-link/copy-collection-link-modal.html",
                    scope: r,
                    controller: "CopyCollectionLinkModalController"
                })
            },
            openSharedToast: function (e) {
                o.show({
                    hideDelay: 3e3,
                    position: "bottom right",
                    controller: "CollectionSharedToastController",
                    templateUrl: "toasts/collection-shared/collection-shared-toast.html",
                    locals: {
                        content: e
                    }
                })
            },
            openTeacherPicker: function (e) {
                r.open().then(function (t) {
                    if (t) {
                        var o = [];
                        o.push(t);
                        var n = [];
                        t.userId && n.push(t.userId), s.openShareWithTeachersModal(o, n, e)
                    }
                })
            }
        };
        return s
    }]),
    function () {
        function e(e, t, o) {
            var n = {
                openQuiz: function (o, r) {
                    t.close();
                    var i = e.$new();
                    i.quizData = o, i.startCard = r || "beginning", i.isInDom = !1, t.show({
                        template: "<standalone-quiz-overlay></standalone-quiz-overlay>",
                        scope: i
                    }), n.currentScope = i
                }
            };
            return n
        }
        e.$inject = ["$rootScope", "EpicOverlay", "Logsly"], angular.module("epicApp").service("StandaloneQuiz", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            var a = "No files selected, please select a file",
                l = "FileReader is not supported by your browser",
                s = "File uploaded is not a CSV file. Please upload a CSV file",
                c = "CSV imported has too little fields, please check the headers again",
                u = ["csv"],
                d = ["firstName", "lastName", "pin", "email"];
            return {
                getFileUploadAndParsePromise: function (t) {
                    var n = e.defer();
                    if (t.length <= 0) n.reject(a);
                    else if (function (e) {
                            var t = (o = e.name, o.slice((Math.max(0, o.lastIndexOf(".")) || 1 / 0) + 1).toLowerCase());
                            var o;
                            return u.indexOf(t) >= 0
                        }(t[0]))
                        if (window.FileReader) {
                            var r = t[0],
                                i = [],
                                c = [];
                            o.parse(r, {
                                header: !0,
                                skipEmptyLines: !0,
                                chunk: f(n, i, c)
                            }).then(function () {
                                var e = {
                                    validUserData: i,
                                    invalidUserData: c
                                };
                                n.resolve(e)
                            }, function (e) {
                                return function (t) {
                                    e.reject(t)
                                }
                            }(n))
                        } else n.reject(l);
                    else n.reject(s);
                    return n.promise
                },
                showCsvErrorsDialogPromise: function (e) {
                    return i.show({
                        templateUrl: "md-dialog/csv/upload-students-csv-error/upload-students-csv-error-dialog.html",
                        controller: "UploadStudentsCsvErrorDialogCtrl",
                        multiple: !0,
                        clickOutsideToClose: !1,
                        skipHide: !0,
                        resolve: {
                            params: function () {
                                return {
                                    usersData: e,
                                    createValidChildProfiles: p
                                }
                            }
                        }
                    })
                },
                showSuccessfullyUploadedMdToast: function (e) {
                    return t.show({
                        hideDelay: 3e3,
                        position: "bottom right",
                        controller: "CsvProfileImportController",
                        templateUrl: "toasts/csv-profile-import/csv-profile-import.html",
                        resolve: {
                            params: function () {
                                return {
                                    numberOfNewProfiles: e
                                }
                            }
                        }
                    })
                },
                createValidChildProfiles: p
            };

            function p(t) {
                for (var o = [], r = 0; r < t.length; r += 50) {
                    var i = n.post("WebAccount", "batchImportStudentUsersForAccount", {
                        userData: t.slice(r, r + 50)
                    });
                    o.push(i)
                }
                return e.all(o).then(function (e) {
                    var t = e.reduce(function (e, t) {
                        return t.success ? e + t.result.numProfilesCreated : e
                    }, 0);
                    return t
                })
            }

            function f(e, t, o) {
                return function (n, i) {
                    var a = n.meta.fields;
                    if (a.length < d.length) return e.reject(c), void i.abort();
                    for (var l = n.data, s = 0; s < l.length; s++) {
                        var u = g(l[s], a, d);
                        u.row = s, r.isValidUserData(u.firstName, u.lastName, u.pin, u.email) ? t.push(u) : o.push(u)
                    }
                }
            }

            function g(e, t, o) {
                for (var n = {}, r = 0; r < o.length; r++) n[o[r]] = e[t[r]] ? e[t[r]] : "";
                return n
            }
        }
        e.$inject = ["$q", "$mdToast", "CsvParserService", "Data", "StudentUploadValidator", "$mdDialog"], angular.module("epicApp").service("StudentCsvUploadService", e)
    }(),
    function () {
        angular.module("epicApp").service("StudentUploadValidator", function () {
            var e = 1,
                t = 2,
                o = 3,
                n = 4,
                r = 5,
                i = 6;
            return {
                MAX_UPLOADS: 40,
                isEmptyUserData: function (e, t, o, n) {
                    return s(e) && s(t) && 0 === o.length && 0 === n.length
                },
                isValidUserData: function (e, t, o, n) {
                    return l(e) && l(t) && c(o) && u(n)
                },
                getErrorMessages: function (d, p, f, g) {
                    var m = [];
                    s(d) ? m.push(a(e)) : l(d) || m.push(a(o));
                    s(p) ? m.push(a(t)) : l(p) || m.push(a(n));
                    c(f) || m.push(a(r));
                    u(g) && m.push(a(i));
                    return m
                }
            };

            function a(a) {
                switch (a) {
                    case e:
                        return "First Name is Required!";
                    case t:
                        return "Last Name is Required!";
                    case o:
                        return "First Name is more than 15 characters";
                    case n:
                        return "Last Name is more than 15 characters";
                    case r:
                        return "Pin must be 4 numerical digits";
                    case i:
                        return "Email is invalid"
                }
                return ""
            }

            function l(e) {
                return !s(e) && /^.{1,15}$/.test(e)
            }

            function s(e) {
                return /^\s{0,}$/.test(e)
            }

            function c(e) {
                return function (e) {
                    return /^[0-9]{4}$/.test(parseInt(e))
                }(e) || 0 === e.length
            }

            function u(e) {
                return function (e) {
                    return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e) && e.length <= 255
                }(e) || 0 === e.length
            }
        })
    }(), angular.module("epicApp").factory("TeacherPickerService", ["$modal", "$rootScope", "$timeout", "Data", function (e, t, o, n) {
        var r = {
            open: function (t) {
                return r.isChildsTeacher = t || !1, r.initTeacherPickerData(), r.createNavigationTabs(), r.nav.currIndex = 0, r.modal = e.open({
                    template: "<teacher-picker></teacher-picker>"
                }), r.modal.result
            },
            createNavigationTabs: function () {
                r.navigationTabs = [{
                    name: "find-by-state",
                    title: "Find Your Teacher",
                    content: "<teacher-picker-find-by-state></teacher-picker-find-by-state>"
                }, {
                    name: "find-city",
                    title: r.isChildsTeacher ? "Find a City" : "Select a City",
                    content: "<teacher-picker-find-city></teacher-picker-find-city>",
                    condition: function () {
                        return !!r.selectedState
                    }
                }, {
                    name: "find-school",
                    title: r.isChildsTeacher ? "Find a School" : "Select a School",
                    content: "<teacher-picker-find-school></teacher-picker-find-school>",
                    condition: function () {
                        return !(!r.selectedState || !r.selectedCity)
                    }
                }, {
                    name: "find-teacher",
                    title: r.isChildsTeacher ? "Find a Teacher" : "Select a Teacher",
                    content: "<teacher-picker-find-teacher></teacher-picker-find-teacher>",
                    condition: function () {
                        return !!(r.selectedState && r.selectedCity && r.selectedSchool)
                    }
                }, {
                    name: "find-by-email",
                    title: "Find a Teacher",
                    content: "<teacher-picker-find-by-email></teacher-picker-find-by-email>"
                }]
            }
        };
        return r.nav = {
            currIndex: 0,
            throttleAmount: 500,
            history: [],
            nextTab: function () {
                var e = r.nav;
                if (!e.throttleNext) {
                    var t = r.navigationTabs[e.currIndex + 1];
                    !t || t.condition && !t.condition() ? (r.initSelectionData(), e.goTab("find-by-state")) : (e.history.push(e.currIndex), e.currIndex = e.currIndex + 1), e.throttleNext = !0, o(function () {
                        e.throttleNext = !1
                    }, e.throttleAmount)
                }
            },
            goTab: function (e) {
                var t;
                r.navigationTabs.forEach(function (o, n) {
                    e === o.name && (t = n)
                });
                var o = r.nav;
                t > -1 ? (o.history.push(o.currIndex), o.currIndex = t) : console.warn("Error: Teacher Picker navigation tab does not exist.")
            },
            goBack: function () {
                var e = r.nav;
                "join-classroom-by-email" === r.navigationTabs[e.currIndex].name && (r.teacherEmail = null, r.initSelectionData());
                var t = e.history.pop(),
                    o = r.navigationTabs[t];
                !o.condition || o.condition() ? e.currIndex = t : (e.goTab("find-by-state"), e.history = [0])
            },
            showBackButton: function () {
                var e = r.nav.currIndex,
                    t = e > 0,
                    o = "request-sent" !== r.navigationTabs[e].name;
                return t && o
            }
        }, r.initSelectionData = function () {
            r.selectedState = null, r.selectedCity = null, r.selectedSchool = null, r.selectedTeacher = null
        }, r.initSearchTermData = function () {
            r.searchTerms = {
                state: "",
                city: "",
                school: "",
                teacher: ""
            }
        }, r.initTeacherPickerData = function () {
            r.cityList = [], r.schoolList = [], r.teacherList = [], r.initSelectionData(), r.initSearchTermData()
        }, r.initTeacherPickerData(), r.getUsStates = function () {
            n.get("WebTeacherPicker", "getRegions", {}).then(function (e) {
                e.result && Array.isArray(e.result.regions) ? r.statesList = e.result.regions : console.warn("Problem getting states")
            })
        }, r.selectState = function (e) {
            return r.selectedState = e, n.get("WebTeacherPicker", "getCityNamesByState", {
                state: e.abbreviation
            }).then(function (e) {
                return e.result && Array.isArray(e.result.cityNames) && (r.cityList = e.result.cityNames), e
            })
        }, r.selectCity = function (e) {
            r.selectedCity = e;
            var t = {
                state: r.selectedState.abbreviation,
                cityName: e
            };
            return n.get("WebTeacherPicker", "findSchoolNamesByCityName", t).then(function (e) {
                return !(!e.result || !Array.isArray(e.result.schoolNames) || (r.schoolList = e.result.schoolNames, 0))
            })
        }, r.selectSchool = function (e) {
            r.selectedSchool = e;
            var t = {
                state: r.selectedState.abbreviation,
                cityName: r.selectedCity,
                schoolName: e,
                includeIds: 1
            };
            return n.get("WebTeacherPicker", "findAccountsBySchoolName", t).then(function (e) {
                return !(!e.result || !Array.isArray(e.result.accounts) || (r.teacherList = e.result.accounts, 0))
            })
        }, r.selectTeacher = function (e) {
            r.selectedTeacher = e
        }, r.selectTeacherByClassroomCode = function (e) {
            return n.get("WebTeacherPicker", "getJoinClassroomAccountByClassroomCode", {
                classroomCode: e
            }).then(function (e) {
                if (e.result && "object" === _typeof(e.result.account) && Object.keys(e.result.account).length > 0) {
                    var t = e.result.account;
                    r.selectedTeacher = t, r.selectedState = {
                        abbreviation: t.state
                    }, r.selectedCity = t.cityName, r.selectedSchool = t.schoolName
                } else r.initSelectionData();
                return e
            })
        }, r.selectTeacherByEmail = function (e) {
            return n.get("WebTeacherPicker", "getJoinClassroomAccountByEmail", {
                email: e
            }).then(function (t) {
                if (t.result && "object" === _typeof(t.result.account) && Object.keys(t.result.account).length > 0) {
                    r.teacherEmail = e;
                    var o = t.result.account;
                    r.selectedTeacher = o, r.selectedState = {
                        abbreviation: o.state
                    }, r.selectedCity = o.cityName, r.selectedSchool = o.schoolName
                } else t.result && "object" === _typeof(t.result.account) && 0 === Object.keys(t.result.account).length ? (r.teacherEmail = e, r.initSelectionData()) : r.selectedTeacher = null;
                return t
            })
        }, r.closeAndReturnSelectedTeacher = function () {
            var e;
            r.selectedTeacher ? (r.selectedTeacher.email = r.teacherEmail, r.modal.close(r.selectedTeacher)) : (r.teacherEmail && (e = {
                email: r.teacherEmail
            }), r.modal.close(e || null))
        }, r.titleCase = function (e) {
            return e.split("").map(function (e, t, o) {
                var n = o[t - 1];
                return n && " " !== n && "-" !== n ? e.toLowerCase() : e.toUpperCase()
            }).join("")
        }, r.getFormattedLocationString = function () {
            return r.selectedState && r.selectedState.abbreviation && r.selectedCity ? r.titleCase(r.selectedCity) + ", " + r.selectedState.abbreviation : null
        }, r
    }]);
for (var base64Str, base64Count, END_OF_INPUT = -1, base64Chars = new Array("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"), reverseBase64Chars = new Array, i = 0; i < base64Chars.length; i++) reverseBase64Chars[base64Chars[i]] = i;

function setBase64Str(e) {
    base64Str = e, base64Count = 0
}

function readBase64() {
    if (!base64Str) return END_OF_INPUT;
    if (base64Count >= base64Str.length) return END_OF_INPUT;
    var e = 255 & base64Str.charCodeAt(base64Count);
    return base64Count++, e
}

function encodeBase64(e) {
    setBase64Str(e);
    for (var t = "", o = new Array(3), n = 0, r = !1; !r && (o[0] = readBase64()) != END_OF_INPUT;) o[1] = readBase64(), o[2] = readBase64(), t += base64Chars[o[0] >> 2], o[1] != END_OF_INPUT ? (t += base64Chars[o[0] << 4 & 48 | o[1] >> 4], o[2] != END_OF_INPUT ? (t += base64Chars[o[1] << 2 & 60 | o[2] >> 6], t += base64Chars[63 & o[2]]) : (t += base64Chars[o[1] << 2 & 60], t += "=", r = !0)) : (t += base64Chars[o[0] << 4 & 48], t += "=", t += "=", r = !0), (n += 4) >= 76 && (t += "\n", n = 0);
    return t
}

function readReverseBase64() {
    if (!base64Str) return END_OF_INPUT;
    for (;;) {
        if (base64Count >= base64Str.length) return END_OF_INPUT;
        var e = base64Str.charAt(base64Count);
        if (base64Count++, reverseBase64Chars[e]) return reverseBase64Chars[e];
        if ("A" == e) return 0
    }
    return END_OF_INPUT
}

function ntos(e) {
    return 1 == (e = e.toString(16)).length && (e = "0" + e), e = "%" + e, unescape(e)
}

function decodeBase64(e) {
    setBase64Str(e);
    for (var t = "", o = new Array(4), n = !1; !n && (o[0] = readReverseBase64()) != END_OF_INPUT && (o[1] = readReverseBase64()) != END_OF_INPUT;) o[2] = readReverseBase64(), o[3] = readReverseBase64(), t += ntos(o[0] << 2 & 255 | o[1] >> 4), o[2] != END_OF_INPUT ? (t += ntos(o[1] << 4 & 255 | o[2] >> 2), o[3] != END_OF_INPUT ? t += ntos(o[2] << 6 & 255 | o[3]) : n = !0) : n = !0;
    return t
}
var digitArray = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");

function toHex(e) {
    for (var t = "", o = !0, n = 32; n > 0;) {
        var r = e >> (n -= 4) & 15;
        o && 0 == r || (o = !1, t += digitArray[r])
    }
    return "" == t ? "0" : t
}

function pad(e, t, o) {
    for (var n = e, r = e.length; r < t; r++) n = o + n;
    return n
}

function encodeHex(e) {
    for (var t = "", o = 0; o < e.length; o++) t += pad(toHex(255 & e.charCodeAt(o)), 2, "0");
    return t
}
var hexv = {
    "00": 0,
    "01": 1,
    "02": 2,
    "03": 3,
    "04": 4,
    "05": 5,
    "06": 6,
    "07": 7,
    "08": 8,
    "09": 9,
    "0A": 10,
    "0B": 11,
    "0C": 12,
    "0D": 13,
    "0E": 14,
    "0F": 15,
    10: 16,
    11: 17,
    12: 18,
    13: 19,
    14: 20,
    15: 21,
    16: 22,
    17: 23,
    18: 24,
    19: 25,
    "1A": 26,
    "1B": 27,
    "1C": 28,
    "1D": 29,
    "1E": 30,
    "1F": 31,
    20: 32,
    21: 33,
    22: 34,
    23: 35,
    24: 36,
    25: 37,
    26: 38,
    27: 39,
    28: 40,
    29: 41,
    "2A": 42,
    "2B": 43,
    "2C": 44,
    "2D": 45,
    "2E": 46,
    "2F": 47,
    30: 48,
    31: 49,
    32: 50,
    33: 51,
    34: 52,
    35: 53,
    36: 54,
    37: 55,
    38: 56,
    39: 57,
    "3A": 58,
    "3B": 59,
    "3C": 60,
    "3D": 61,
    "3E": 62,
    "3F": 63,
    40: 64,
    41: 65,
    42: 66,
    43: 67,
    44: 68,
    45: 69,
    46: 70,
    47: 71,
    48: 72,
    49: 73,
    "4A": 74,
    "4B": 75,
    "4C": 76,
    "4D": 77,
    "4E": 78,
    "4F": 79,
    50: 80,
    51: 81,
    52: 82,
    53: 83,
    54: 84,
    55: 85,
    56: 86,
    57: 87,
    58: 88,
    59: 89,
    "5A": 90,
    "5B": 91,
    "5C": 92,
    "5D": 93,
    "5E": 94,
    "5F": 95,
    60: 96,
    61: 97,
    62: 98,
    63: 99,
    64: 100,
    65: 101,
    66: 102,
    67: 103,
    68: 104,
    69: 105,
    "6A": 106,
    "6B": 107,
    "6C": 108,
    "6D": 109,
    "6E": 110,
    "6F": 111,
    70: 112,
    71: 113,
    72: 114,
    73: 115,
    74: 116,
    75: 117,
    76: 118,
    77: 119,
    78: 120,
    79: 121,
    "7A": 122,
    "7B": 123,
    "7C": 124,
    "7D": 125,
    "7E": 126,
    "7F": 127,
    80: 128,
    81: 129,
    82: 130,
    83: 131,
    84: 132,
    85: 133,
    86: 134,
    87: 135,
    88: 136,
    89: 137,
    "8A": 138,
    "8B": 139,
    "8C": 140,
    "8D": 141,
    "8E": 142,
    "8F": 143,
    90: 144,
    91: 145,
    92: 146,
    93: 147,
    94: 148,
    95: 149,
    96: 150,
    97: 151,
    98: 152,
    99: 153,
    "9A": 154,
    "9B": 155,
    "9C": 156,
    "9D": 157,
    "9E": 158,
    "9F": 159,
    A0: 160,
    A1: 161,
    A2: 162,
    A3: 163,
    A4: 164,
    A5: 165,
    A6: 166,
    A7: 167,
    A8: 168,
    A9: 169,
    AA: 170,
    AB: 171,
    AC: 172,
    AD: 173,
    AE: 174,
    AF: 175,
    B0: 176,
    B1: 177,
    B2: 178,
    B3: 179,
    B4: 180,
    B5: 181,
    B6: 182,
    B7: 183,
    B8: 184,
    B9: 185,
    BA: 186,
    BB: 187,
    BC: 188,
    BD: 189,
    BE: 190,
    BF: 191,
    C0: 192,
    C1: 193,
    C2: 194,
    C3: 195,
    C4: 196,
    C5: 197,
    C6: 198,
    C7: 199,
    C8: 200,
    C9: 201,
    CA: 202,
    CB: 203,
    CC: 204,
    CD: 205,
    CE: 206,
    CF: 207,
    D0: 208,
    D1: 209,
    D2: 210,
    D3: 211,
    D4: 212,
    D5: 213,
    D6: 214,
    D7: 215,
    D8: 216,
    D9: 217,
    DA: 218,
    DB: 219,
    DC: 220,
    DD: 221,
    DE: 222,
    DF: 223,
    E0: 224,
    E1: 225,
    E2: 226,
    E3: 227,
    E4: 228,
    E5: 229,
    E6: 230,
    E7: 231,
    E8: 232,
    E9: 233,
    EA: 234,
    EB: 235,
    EC: 236,
    ED: 237,
    EE: 238,
    EF: 239,
    F0: 240,
    F1: 241,
    F2: 242,
    F3: 243,
    F4: 244,
    F5: 245,
    F6: 246,
    F7: 247,
    F8: 248,
    F9: 249,
    FA: 250,
    FB: 251,
    FC: 252,
    FD: 253,
    FE: 254,
    FF: 255
};

function decodeHex(e) {
    e = e.toUpperCase().replace(new RegExp("s/[^0-9A-Z]//g"));
    for (var t = "", o = "", n = 0; n < e.length; n++) 2 == (o += e.charAt(n)).length && (t += ntos(hexv[o]), o = "");
    return t
}

function utf8_encode(e) {
    var t, o, n, r = "";
    t = o = 0, n = (e = (e + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n")).length;
    for (var i = 0; i < n; i++) {
        var a = e.charCodeAt(i),
            l = null;
        a < 128 ? o++ : l = a > 127 && a < 2048 ? String.fromCharCode(a >> 6 | 192) + String.fromCharCode(63 & a | 128) : String.fromCharCode(a >> 12 | 224) + String.fromCharCode(a >> 6 & 63 | 128) + String.fromCharCode(63 & a | 128), null != l && (o > t && (r += e.substring(t, o)), r += l, t = o = i + 1)
    }
    return o > t && (r += e.substring(t, e.length)), r
}

function _defineProperty(e, t, o) {
    return t in e ? Object.defineProperty(e, t, {
        value: o,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : e[t] = o, e
}

function _slicedToArray(e, t) {
    return _arrayWithHoles(e) || _iterableToArrayLimit(e, t) || _nonIterableRest()
}

function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance")
}

function _iterableToArrayLimit(e, t) {
    var o = [],
        n = !0,
        r = !1,
        i = void 0;
    try {
        for (var a, l = e[Symbol.iterator](); !(n = (a = l.next()).done) && (o.push(a.value), !t || o.length !== t); n = !0);
    } catch (e) {
        r = !0, i = e
    } finally {
        try {
            n || null == l.return || l.return()
        } finally {
            if (r) throw i
        }
    }
    return o
}

function _arrayWithHoles(e) {
    if (Array.isArray(e)) return e
}

function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e
    } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}
angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.transition", "ui.bootstrap.collapse", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.bindHtml", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.dateparser", "ui.bootstrap.position", "ui.bootstrap.datepicker", "ui.bootstrap.dropdown", "ui.bootstrap.modal", "ui.bootstrap.pagination", "ui.bootstrap.tooltip", "ui.bootstrap.popover", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.timepicker", "ui.bootstrap.typeahead"]), angular.module("ui.bootstrap.tpls", ["template/accordion/accordion-group.html", "template/accordion/accordion.html", "template/alert/alert.html", "template/carousel/carousel.html", "template/carousel/slide.html", "template/datepicker/datepicker.html", "template/datepicker/day.html", "template/datepicker/month.html", "template/datepicker/popup.html", "template/datepicker/year.html", "template/modal/backdrop.html", "template/modal/window.html", "template/pagination/pager.html", "template/pagination/pagination.html", "template/tooltip/tooltip-html-unsafe-popup.html", "template/tooltip/tooltip-popup.html", "template/popover/popover.html", "template/progressbar/bar.html", "template/progressbar/progress.html", "template/progressbar/progressbar.html", "template/rating/rating.html", "template/tabs/tab.html", "template/tabs/tabset.html", "template/timepicker/timepicker.html", "template/typeahead/typeahead-match.html", "template/typeahead/typeahead-popup.html"]), angular.module("ui.bootstrap.transition", []).factory("$transition", ["$q", "$timeout", "$rootScope", function (e, t, o) {
        function n(e) {
            for (var t in e)
                if (void 0 !== i.style[t]) return e[t]
        }
        var r = function n(r, i, a) {
                a = a || {};
                var l = e.defer(),
                    s = n[a.animation ? "animationEndEventName" : "transitionEndEventName"],
                    c = function e() {
                        o.$apply(function () {
                            r.unbind(s, e), l.resolve(r)
                        })
                    };
                return s && r.bind(s, c), t(function () {
                    angular.isString(i) ? r.addClass(i) : angular.isFunction(i) ? i(r) : angular.isObject(i) && r.css(i), s || l.resolve(r)
                }), l.promise.cancel = function () {
                    s && r.unbind(s, c), l.reject("Transition cancelled")
                }, l.promise
            },
            i = document.createElement("trans");
        return r.transitionEndEventName = n({
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd",
            transition: "transitionend"
        }), r.animationEndEventName = n({
            WebkitTransition: "webkitAnimationEnd",
            MozTransition: "animationend",
            OTransition: "oAnimationEnd",
            transition: "animationend"
        }), r
    }]), angular.module("ui.bootstrap.collapse", ["ui.bootstrap.transition"]).directive("collapse", ["$transition", function (e) {
        return {
            link: function (t, o, n) {
                function r(t) {
                    function n() {
                        l === r && (l = void 0)
                    }
                    var r = e(o, t);
                    return l && l.cancel(), l = r, r.then(n, n), r
                }

                function i() {
                    o.removeClass("collapsing"), o.addClass("collapse in"), o.css({
                        height: "auto"
                    })
                }

                function a() {
                    o.removeClass("collapsing"), o.addClass("collapse")
                }
                var l, s = !0;
                t.$watch(n.collapse, function (e) {
                    e ? s ? (s = !1, a(), o.css({
                        height: 0
                    })) : (o.css({
                        height: o[0].scrollHeight + "px"
                    }), o[0].offsetWidth, o.removeClass("collapse in").addClass("collapsing"), r({
                        height: 0
                    }).then(a)) : s ? (s = !1, i()) : (o.removeClass("collapse").addClass("collapsing"), r({
                        height: o[0].scrollHeight + "px"
                    }).then(i))
                })
            }
        }
    }]), angular.module("ui.bootstrap.accordion", ["ui.bootstrap.collapse"]).constant("accordionConfig", {
        closeOthers: !0
    }).controller("AccordionController", ["$scope", "$attrs", "accordionConfig", function (e, t, o) {
        this.groups = [], this.closeOthers = function (n) {
            (angular.isDefined(t.closeOthers) ? e.$eval(t.closeOthers) : o.closeOthers) && angular.forEach(this.groups, function (e) {
                e !== n && (e.isOpen = !1)
            })
        }, this.addGroup = function (e) {
            var t = this;
            this.groups.push(e), e.$on("$destroy", function () {
                t.removeGroup(e)
            })
        }, this.removeGroup = function (e) {
            var t = this.groups.indexOf(e); - 1 !== t && this.groups.splice(t, 1)
        }
    }]).directive("accordion", function () {
        return {
            restrict: "EA",
            controller: "AccordionController",
            transclude: !0,
            replace: !1,
            templateUrl: "template/accordion/accordion.html"
        }
    }).directive("accordionGroup", function () {
        return {
            require: "^accordion",
            restrict: "EA",
            transclude: !0,
            replace: !0,
            templateUrl: "template/accordion/accordion-group.html",
            scope: {
                heading: "@",
                isOpen: "=?",
                isDisabled: "=?"
            },
            controller: function () {
                this.setHeading = function (e) {
                    this.heading = e
                }
            },
            link: function (e, t, o, n) {
                n.addGroup(e), e.$watch("isOpen", function (t) {
                    t && n.closeOthers(e)
                }), e.toggleOpen = function () {
                    e.isDisabled || (e.isOpen = !e.isOpen)
                }
            }
        }
    }).directive("accordionHeading", function () {
        return {
            restrict: "EA",
            transclude: !0,
            template: "",
            replace: !0,
            require: "^accordionGroup",
            link: function (e, t, o, n, r) {
                n.setHeading(r(e, function () {}))
            }
        }
    }).directive("accordionTransclude", function () {
        return {
            require: "^accordionGroup",
            link: function (e, t, o, n) {
                e.$watch(function () {
                    return n[o.accordionTransclude]
                }, function (e) {
                    e && (t.html(""), t.append(e))
                })
            }
        }
    }), angular.module("ui.bootstrap.alert", []).controller("AlertController", ["$scope", "$attrs", function (e, t) {
        e.closeable = "close" in t, this.close = e.close
    }]).directive("alert", function () {
        return {
            restrict: "EA",
            controller: "AlertController",
            templateUrl: "template/alert/alert.html",
            transclude: !0,
            replace: !0,
            scope: {
                type: "@",
                close: "&"
            }
        }
    }).directive("dismissOnTimeout", ["$timeout", function (e) {
        return {
            require: "alert",
            link: function (t, o, n, r) {
                e(function () {
                    r.close()
                }, parseInt(n.dismissOnTimeout, 10))
            }
        }
    }]), angular.module("ui.bootstrap.bindHtml", []).directive("bindHtmlUnsafe", function () {
        return function (e, t, o) {
            t.addClass("ng-binding").data("$binding", o.bindHtmlUnsafe), e.$watch(o.bindHtmlUnsafe, function (e) {
                t.html(e || "")
            })
        }
    }), angular.module("ui.bootstrap.buttons", []).constant("buttonConfig", {
        activeClass: "active",
        toggleEvent: "click"
    }).controller("ButtonsController", ["buttonConfig", function (e) {
        this.activeClass = e.activeClass || "active", this.toggleEvent = e.toggleEvent || "click"
    }]).directive("btnRadio", function () {
        return {
            require: ["btnRadio", "ngModel"],
            controller: "ButtonsController",
            link: function (e, t, o, n) {
                var r = n[0],
                    i = n[1];
                i.$render = function () {
                    t.toggleClass(r.activeClass, angular.equals(i.$modelValue, e.$eval(o.btnRadio)))
                }, t.bind(r.toggleEvent, function () {
                    var n = t.hasClass(r.activeClass);
                    (!n || angular.isDefined(o.uncheckable)) && e.$apply(function () {
                        i.$setViewValue(n ? null : e.$eval(o.btnRadio)), i.$render()
                    })
                })
            }
        }
    }).directive("btnCheckbox", function () {
        return {
            require: ["btnCheckbox", "ngModel"],
            controller: "ButtonsController",
            link: function (e, t, o, n) {
                function r() {
                    return i(o.btnCheckboxTrue, !0)
                }

                function i(t, o) {
                    var n = e.$eval(t);
                    return angular.isDefined(n) ? n : o
                }
                var a = n[0],
                    l = n[1];
                l.$render = function () {
                    t.toggleClass(a.activeClass, angular.equals(l.$modelValue, r()))
                }, t.bind(a.toggleEvent, function () {
                    e.$apply(function () {
                        l.$setViewValue(t.hasClass(a.activeClass) ? i(o.btnCheckboxFalse, !1) : r()), l.$render()
                    })
                })
            }
        }
    }), angular.module("ui.bootstrap.carousel", ["ui.bootstrap.transition"]).controller("CarouselController", ["$scope", "$timeout", "$interval", "$transition", function (e, t, o, n) {
        function r() {
            i();
            var t = +e.interval;
            !isNaN(t) && t > 0 && (l = o(a, t))
        }

        function i() {
            l && (o.cancel(l), l = null)
        }

        function a() {
            var t = +e.interval;
            s && !isNaN(t) && t > 0 ? e.next() : e.pause()
        }
        var l, s, c = this,
            u = c.slides = e.slides = [],
            d = -1;
        c.currentSlide = null;
        var p = !1;
        c.select = e.select = function (o, i) {
            function a() {
                p || (c.currentSlide && angular.isString(i) && !e.noTransition && o.$element ? (o.$element.addClass(i), o.$element[0].offsetWidth, angular.forEach(u, function (e) {
                    angular.extend(e, {
                        direction: "",
                        entering: !1,
                        leaving: !1,
                        active: !1
                    })
                }), angular.extend(o, {
                    direction: i,
                    active: !0,
                    entering: !0
                }), angular.extend(c.currentSlide || {}, {
                    direction: i,
                    leaving: !0
                }), e.$currentTransition = n(o.$element, {}), function (t, o) {
                    e.$currentTransition.then(function () {
                        l(t, o)
                    }, function () {
                        l(t, o)
                    })
                }(o, c.currentSlide)) : l(o, c.currentSlide), c.currentSlide = o, d = s, r())
            }

            function l(t, o) {
                angular.extend(t, {
                    direction: "",
                    active: !0,
                    leaving: !1,
                    entering: !1
                }), angular.extend(o || {}, {
                    direction: "",
                    active: !1,
                    leaving: !1,
                    entering: !1
                }), e.$currentTransition = null
            }
            var s = u.indexOf(o);
            void 0 === i && (i = s > d ? "next" : "prev"), o && o !== c.currentSlide && (e.$currentTransition ? (e.$currentTransition.cancel(), t(a)) : a())
        }, e.$on("$destroy", function () {
            p = !0
        }), c.indexOfSlide = function (e) {
            return u.indexOf(e)
        }, e.next = function () {
            var t = (d + 1) % u.length;
            return e.$currentTransition ? void 0 : c.select(u[t], "next")
        }, e.prev = function () {
            var t = 0 > d - 1 ? u.length - 1 : d - 1;
            return e.$currentTransition ? void 0 : c.select(u[t], "prev")
        }, e.isActive = function (e) {
            return c.currentSlide === e
        }, e.$watch("interval", r), e.$on("$destroy", i), e.play = function () {
            s || (s = !0, r())
        }, e.pause = function () {
            e.noPause || (s = !1, i())
        }, c.addSlide = function (t, o) {
            t.$element = o, u.push(t), 1 === u.length || t.active ? (c.select(u[u.length - 1]), 1 == u.length && e.play()) : t.active = !1
        }, c.removeSlide = function (e) {
            var t = u.indexOf(e);
            u.splice(t, 1), u.length > 0 && e.active ? c.select(t >= u.length ? u[t - 1] : u[t]) : d > t && d--
        }
    }]).directive("carousel", [function () {
        return {
            restrict: "EA",
            transclude: !0,
            replace: !0,
            controller: "CarouselController",
            require: "carousel",
            templateUrl: "template/carousel/carousel.html",
            scope: {
                interval: "=",
                noTransition: "=",
                noPause: "="
            }
        }
    }]).directive("slide", function () {
        return {
            require: "^carousel",
            restrict: "EA",
            transclude: !0,
            replace: !0,
            templateUrl: "template/carousel/slide.html",
            scope: {
                active: "=?"
            },
            link: function (e, t, o, n) {
                n.addSlide(e, t), e.$on("$destroy", function () {
                    n.removeSlide(e)
                }), e.$watch("active", function (t) {
                    t && n.select(e)
                })
            }
        }
    }), angular.module("ui.bootstrap.dateparser", []).service("dateParser", ["$locale", "orderByFilter", function (e, t) {
        function o(e) {
            var o = [],
                r = e.split("");
            return angular.forEach(n, function (t, n) {
                var i = e.indexOf(n);
                if (i > -1) {
                    e = e.split(""), r[i] = "(" + t.regex + ")", e[i] = "$";
                    for (var a = i + 1, l = i + n.length; l > a; a++) r[a] = "", e[a] = "$";
                    e = e.join(""), o.push({
                        index: i,
                        apply: t.apply
                    })
                }
            }), {
                regex: new RegExp("^" + r.join("") + "$"),
                map: t(o, "index")
            }
        }
        this.parsers = {};
        var n = {
            yyyy: {
                regex: "\\d{4}",
                apply: function (e) {
                    this.year = +e
                }
            },
            yy: {
                regex: "\\d{2}",
                apply: function (e) {
                    this.year = +e + 2e3
                }
            },
            y: {
                regex: "\\d{1,4}",
                apply: function (e) {
                    this.year = +e
                }
            },
            MMMM: {
                regex: e.DATETIME_FORMATS.MONTH.join("|"),
                apply: function (t) {
                    this.month = e.DATETIME_FORMATS.MONTH.indexOf(t)
                }
            },
            MMM: {
                regex: e.DATETIME_FORMATS.SHORTMONTH.join("|"),
                apply: function (t) {
                    this.month = e.DATETIME_FORMATS.SHORTMONTH.indexOf(t)
                }
            },
            MM: {
                regex: "0[1-9]|1[0-2]",
                apply: function (e) {
                    this.month = e - 1
                }
            },
            M: {
                regex: "[1-9]|1[0-2]",
                apply: function (e) {
                    this.month = e - 1
                }
            },
            dd: {
                regex: "[0-2][0-9]{1}|3[0-1]{1}",
                apply: function (e) {
                    this.date = +e
                }
            },
            d: {
                regex: "[1-2]?[0-9]{1}|3[0-1]{1}",
                apply: function (e) {
                    this.date = +e
                }
            },
            EEEE: {
                regex: e.DATETIME_FORMATS.DAY.join("|")
            },
            EEE: {
                regex: e.DATETIME_FORMATS.SHORTDAY.join("|")
            }
        };
        this.parse = function (t, n) {
            if (!angular.isString(t) || !n) return t;
            n = e.DATETIME_FORMATS[n] || n, this.parsers[n] || (this.parsers[n] = o(n));
            var r = this.parsers[n],
                i = r.regex,
                a = r.map,
                l = t.match(i);
            if (l && l.length) {
                for (var s, c = {
                        year: 1900,
                        month: 0,
                        date: 1,
                        hours: 0
                    }, u = 1, d = l.length; d > u; u++) {
                    var p = a[u - 1];
                    p.apply && p.apply.call(c, l[u])
                }
                return function (e, t, o) {
                    return 1 === t && o > 28 ? 29 === o && (e % 4 == 0 && e % 100 != 0 || e % 400 == 0) : 3 !== t && 5 !== t && 8 !== t && 10 !== t || 31 > o
                }(c.year, c.month, c.date) && (s = new Date(c.year, c.month, c.date, c.hours)), s
            }
        }
    }]), angular.module("ui.bootstrap.position", []).factory("$position", ["$document", "$window", function (e, t) {
        function o(e) {
            return "static" === (function (e, o) {
                return e.currentStyle ? e.currentStyle[o] : t.getComputedStyle ? t.getComputedStyle(e)[o] : e.style[o]
            }(e, "position") || "static")
        }
        var n = function (t) {
            for (var n = e[0], r = t.offsetParent || n; r && r !== n && o(r);) r = r.offsetParent;
            return r || n
        };
        return {
            position: function (t) {
                var o = this.offset(t),
                    r = {
                        top: 0,
                        left: 0
                    },
                    i = n(t[0]);
                i != e[0] && ((r = this.offset(angular.element(i))).top += i.clientTop - i.scrollTop, r.left += i.clientLeft - i.scrollLeft);
                var a = t[0].getBoundingClientRect();
                return {
                    width: a.width || t.prop("offsetWidth"),
                    height: a.height || t.prop("offsetHeight"),
                    top: o.top - r.top,
                    left: o.left - r.left
                }
            },
            offset: function (o) {
                var n = o[0].getBoundingClientRect();
                return {
                    width: n.width || o.prop("offsetWidth"),
                    height: n.height || o.prop("offsetHeight"),
                    top: n.top + (t.pageYOffset || e[0].documentElement.scrollTop),
                    left: n.left + (t.pageXOffset || e[0].documentElement.scrollLeft)
                }
            },
            positionElements: function (e, t, o, n) {
                var r, i, a, l, s = o.split("-"),
                    c = s[0],
                    u = s[1] || "center";
                r = n ? this.offset(e) : this.position(e), i = t.prop("offsetWidth"), a = t.prop("offsetHeight");
                var d = {
                        center: function () {
                            return r.left + r.width / 2 - i / 2
                        },
                        left: function () {
                            return r.left
                        },
                        right: function () {
                            return r.left + r.width
                        }
                    },
                    p = {
                        center: function () {
                            return r.top + r.height / 2 - a / 2
                        },
                        top: function () {
                            return r.top
                        },
                        bottom: function () {
                            return r.top + r.height
                        }
                    };
                switch (c) {
                    case "right":
                        l = {
                            top: p[u](),
                            left: d[c]()
                        };
                        break;
                    case "left":
                        l = {
                            top: p[u](),
                            left: r.left - i
                        };
                        break;
                    case "bottom":
                        l = {
                            top: p[c](),
                            left: d[u]()
                        };
                        break;
                    default:
                        l = {
                            top: r.top - a,
                            left: d[u]()
                        }
                }
                return l
            }
        }
    }]), angular.module("ui.bootstrap.datepicker", ["ui.bootstrap.dateparser", "ui.bootstrap.position"]).constant("datepickerConfig", {
        formatDay: "dd",
        formatMonth: "MMMM",
        formatYear: "yyyy",
        formatDayHeader: "EEE",
        formatDayTitle: "MMMM yyyy",
        formatMonthTitle: "yyyy",
        datepickerMode: "day",
        minMode: "day",
        maxMode: "year",
        showWeeks: !0,
        startingDay: 0,
        yearRange: 20,
        minDate: null,
        maxDate: null
    }).controller("DatepickerController", ["$scope", "$attrs", "$parse", "$interpolate", "$timeout", "$log", "dateFilter", "datepickerConfig", function (e, t, o, n, r, i, a, l) {
        var s = this,
            c = {
                $setViewValue: angular.noop
            };
        this.modes = ["day", "month", "year"], angular.forEach(["formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle", "minMode", "maxMode", "showWeeks", "startingDay", "yearRange"], function (o, r) {
            s[o] = angular.isDefined(t[o]) ? 8 > r ? n(t[o])(e.$parent) : e.$parent.$eval(t[o]) : l[o]
        }), angular.forEach(["minDate", "maxDate"], function (n) {
            t[n] ? e.$parent.$watch(o(t[n]), function (e) {
                s[n] = e ? new Date(e) : null, s.refreshView()
            }) : s[n] = l[n] ? new Date(l[n]) : null
        }), e.datepickerMode = e.datepickerMode || l.datepickerMode, e.uniqueId = "datepicker-" + e.$id + "-" + Math.floor(1e4 * Math.random()), this.activeDate = angular.isDefined(t.initDate) ? e.$parent.$eval(t.initDate) : new Date, e.isActive = function (t) {
            return 0 === s.compare(t.date, s.activeDate) && (e.activeDateId = t.uid, !0)
        }, this.init = function (e) {
            (c = e).$render = function () {
                s.render()
            }
        }, this.render = function () {
            if (c.$modelValue) {
                var e = new Date(c.$modelValue),
                    t = !isNaN(e);
                t ? this.activeDate = e : i.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'), c.$setValidity("date", t)
            }
            this.refreshView()
        }, this.refreshView = function () {
            if (this.element) {
                this._refreshView();
                var e = c.$modelValue ? new Date(c.$modelValue) : null;
                c.$setValidity("date-disabled", !e || this.element && !this.isDisabled(e))
            }
        }, this.createDateObject = function (e, t) {
            var o = c.$modelValue ? new Date(c.$modelValue) : null;
            return {
                date: e,
                label: a(e, t),
                selected: o && 0 === this.compare(e, o),
                disabled: this.isDisabled(e),
                current: 0 === this.compare(e, new Date)
            }
        }, this.isDisabled = function (o) {
            return this.minDate && this.compare(o, this.minDate) < 0 || this.maxDate && this.compare(o, this.maxDate) > 0 || t.dateDisabled && e.dateDisabled({
                date: o,
                mode: e.datepickerMode
            })
        }, this.split = function (e, t) {
            for (var o = []; e.length > 0;) o.push(e.splice(0, t));
            return o
        }, e.select = function (t) {
            if (e.datepickerMode === s.minMode) {
                var o = c.$modelValue ? new Date(c.$modelValue) : new Date(0, 0, 0, 0, 0, 0, 0);
                o.setFullYear(t.getFullYear(), t.getMonth(), t.getDate()), c.$setViewValue(o), c.$render()
            } else s.activeDate = t, e.datepickerMode = s.modes[s.modes.indexOf(e.datepickerMode) - 1]
        }, e.move = function (e) {
            var t = s.activeDate.getFullYear() + e * (s.step.years || 0),
                o = s.activeDate.getMonth() + e * (s.step.months || 0);
            s.activeDate.setFullYear(t, o, 1), s.refreshView()
        }, e.toggleMode = function (t) {
            t = t || 1, e.datepickerMode === s.maxMode && 1 === t || e.datepickerMode === s.minMode && -1 === t || (e.datepickerMode = s.modes[s.modes.indexOf(e.datepickerMode) + t])
        }, e.keys = {
            13: "enter",
            32: "space",
            33: "pageup",
            34: "pagedown",
            35: "end",
            36: "home",
            37: "left",
            38: "up",
            39: "right",
            40: "down"
        };
        var u = function () {
            r(function () {
                s.element[0].focus()
            }, 0, !1)
        };
        e.$on("datepicker.focus", u), e.keydown = function (t) {
            var o = e.keys[t.which];
            if (o && !t.shiftKey && !t.altKey)
                if (t.preventDefault(), t.stopPropagation(), "enter" === o || "space" === o) {
                    if (s.isDisabled(s.activeDate)) return;
                    e.select(s.activeDate), u()
                } else !t.ctrlKey || "up" !== o && "down" !== o ? (s.handleKeyDown(o, t), s.refreshView()) : (e.toggleMode("up" === o ? 1 : -1), u())
        }
    }]).directive("datepicker", function () {
        return {
            restrict: "EA",
            replace: !0,
            templateUrl: "template/datepicker/datepicker.html",
            scope: {
                datepickerMode: "=?",
                dateDisabled: "&"
            },
            require: ["datepicker", "?^ngModel"],
            controller: "DatepickerController",
            link: function (e, t, o, n) {
                var r = n[0],
                    i = n[1];
                i && r.init(i)
            }
        }
    }).directive("daypicker", ["dateFilter", function (e) {
        return {
            restrict: "EA",
            replace: !0,
            templateUrl: "template/datepicker/day.html",
            require: "^datepicker",
            link: function (t, o, n, r) {
                function i(e, t) {
                    return 1 !== t || e % 4 != 0 || e % 100 == 0 && e % 400 != 0 ? a[t] : 29
                }
                t.showWeeks = r.showWeeks, r.step = {
                    months: 1
                }, r.element = o;
                var a = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                r._refreshView = function () {
                    var o = r.activeDate.getFullYear(),
                        n = r.activeDate.getMonth(),
                        i = new Date(o, n, 1),
                        a = r.startingDay - i.getDay(),
                        l = a > 0 ? 7 - a : -a,
                        s = new Date(i);
                    l > 0 && s.setDate(1 - l);
                    for (var c = function (e, t) {
                            var o = new Array(t),
                                n = new Date(e),
                                r = 0;
                            for (n.setHours(12); t > r;) o[r++] = new Date(n), n.setDate(n.getDate() + 1);
                            return o
                        }(s, 42), u = 0; 42 > u; u++) c[u] = angular.extend(r.createDateObject(c[u], r.formatDay), {
                        secondary: c[u].getMonth() !== n,
                        uid: t.uniqueId + "-" + u
                    });
                    t.labels = new Array(7);
                    for (var d = 0; 7 > d; d++) t.labels[d] = {
                        abbr: e(c[d].date, r.formatDayHeader),
                        full: e(c[d].date, "EEEE")
                    };
                    if (t.title = e(r.activeDate, r.formatDayTitle), t.rows = r.split(c, 7), t.showWeeks) {
                        t.weekNumbers = [];
                        for (var p = function (e) {
                                var t = new Date(e);
                                t.setDate(t.getDate() + 4 - (t.getDay() || 7));
                                var o = t.getTime();
                                return t.setMonth(0), t.setDate(1), Math.floor(Math.round((o - t) / 864e5) / 7) + 1
                            }(t.rows[0][0].date), f = t.rows.length; t.weekNumbers.push(p++) < f;);
                    }
                }, r.compare = function (e, t) {
                    return new Date(e.getFullYear(), e.getMonth(), e.getDate()) - new Date(t.getFullYear(), t.getMonth(), t.getDate())
                }, r.handleKeyDown = function (e) {
                    var t = r.activeDate.getDate();
                    if ("left" === e) t -= 1;
                    else if ("up" === e) t -= 7;
                    else if ("right" === e) t += 1;
                    else if ("down" === e) t += 7;
                    else if ("pageup" === e || "pagedown" === e) {
                        var o = r.activeDate.getMonth() + ("pageup" === e ? -1 : 1);
                        r.activeDate.setMonth(o, 1), t = Math.min(i(r.activeDate.getFullYear(), r.activeDate.getMonth()), t)
                    } else "home" === e ? t = 1 : "end" === e && (t = i(r.activeDate.getFullYear(), r.activeDate.getMonth()));
                    r.activeDate.setDate(t)
                }, r.refreshView()
            }
        }
    }]).directive("monthpicker", ["dateFilter", function (e) {
        return {
            restrict: "EA",
            replace: !0,
            templateUrl: "template/datepicker/month.html",
            require: "^datepicker",
            link: function (t, o, n, r) {
                r.step = {
                    years: 1
                }, r.element = o, r._refreshView = function () {
                    for (var o = new Array(12), n = r.activeDate.getFullYear(), i = 0; 12 > i; i++) o[i] = angular.extend(r.createDateObject(new Date(n, i, 1), r.formatMonth), {
                        uid: t.uniqueId + "-" + i
                    });
                    t.title = e(r.activeDate, r.formatMonthTitle), t.rows = r.split(o, 3)
                }, r.compare = function (e, t) {
                    return new Date(e.getFullYear(), e.getMonth()) - new Date(t.getFullYear(), t.getMonth())
                }, r.handleKeyDown = function (e) {
                    var t = r.activeDate.getMonth();
                    if ("left" === e) t -= 1;
                    else if ("up" === e) t -= 3;
                    else if ("right" === e) t += 1;
                    else if ("down" === e) t += 3;
                    else if ("pageup" === e || "pagedown" === e) {
                        var o = r.activeDate.getFullYear() + ("pageup" === e ? -1 : 1);
                        r.activeDate.setFullYear(o)
                    } else "home" === e ? t = 0 : "end" === e && (t = 11);
                    r.activeDate.setMonth(t)
                }, r.refreshView()
            }
        }
    }]).directive("yearpicker", ["dateFilter", function () {
        return {
            restrict: "EA",
            replace: !0,
            templateUrl: "template/datepicker/year.html",
            require: "^datepicker",
            link: function (e, t, o, n) {
                function r(e) {
                    return parseInt((e - 1) / i, 10) * i + 1
                }
                var i = n.yearRange;
                n.step = {
                    years: i
                }, n.element = t, n._refreshView = function () {
                    for (var t = new Array(i), o = 0, a = r(n.activeDate.getFullYear()); i > o; o++) t[o] = angular.extend(n.createDateObject(new Date(a + o, 0, 1), n.formatYear), {
                        uid: e.uniqueId + "-" + o
                    });
                    e.title = [t[0].label, t[i - 1].label].join(" - "), e.rows = n.split(t, 5)
                }, n.compare = function (e, t) {
                    return e.getFullYear() - t.getFullYear()
                }, n.handleKeyDown = function (e) {
                    var t = n.activeDate.getFullYear();
                    "left" === e ? t -= 1 : "up" === e ? t -= 5 : "right" === e ? t += 1 : "down" === e ? t += 5 : "pageup" === e || "pagedown" === e ? t += ("pageup" === e ? -1 : 1) * n.step.years : "home" === e ? t = r(n.activeDate.getFullYear()) : "end" === e && (t = r(n.activeDate.getFullYear()) + i - 1), n.activeDate.setFullYear(t)
                }, n.refreshView()
            }
        }
    }]).constant("datepickerPopupConfig", {
        datepickerPopup: "yyyy-MM-dd",
        currentText: "Today",
        clearText: "Clear",
        closeText: "Done",
        closeOnDateSelection: !0,
        appendToBody: !1,
        showButtonBar: !0
    }).directive("datepickerPopup", ["$compile", "$parse", "$document", "$position", "dateFilter", "dateParser", "datepickerPopupConfig", function (e, t, o, n, r, i, a) {
        return {
            restrict: "EA",
            require: "ngModel",
            scope: {
                isOpen: "=?",
                currentText: "@",
                clearText: "@",
                closeText: "@",
                dateDisabled: "&"
            },
            link: function (l, s, c, u) {
                function d(e) {
                    return e.replace(/([A-Z])/g, function (e) {
                        return "-" + e.toLowerCase()
                    })
                }

                function p(e) {
                    if (!e) return u.$setValidity("date", !0), null;
                    if (angular.isDate(e) && !isNaN(e)) return u.$setValidity("date", !0), e;
                    if (angular.isString(e)) {
                        var t = i.parse(e, f) || new Date(e);
                        return isNaN(t) ? void u.$setValidity("date", !1) : (u.$setValidity("date", !0), t)
                    }
                    u.$setValidity("date", !1)
                }
                var f, g = angular.isDefined(c.closeOnDateSelection) ? l.$parent.$eval(c.closeOnDateSelection) : a.closeOnDateSelection,
                    m = angular.isDefined(c.datepickerAppendToBody) ? l.$parent.$eval(c.datepickerAppendToBody) : a.appendToBody;
                l.showButtonBar = angular.isDefined(c.showButtonBar) ? l.$parent.$eval(c.showButtonBar) : a.showButtonBar, l.getText = function (e) {
                    return l[e + "Text"] || a[e + "Text"]
                }, c.$observe("datepickerPopup", function (e) {
                    f = e || a.datepickerPopup, u.$render()
                });
                var h = angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");
                h.attr({
                    "ng-model": "date",
                    "ng-change": "dateSelection()"
                });
                var v = angular.element(h.children()[0]);
                c.datepickerOptions && angular.forEach(l.$parent.$eval(c.datepickerOptions), function (e, t) {
                    v.attr(d(t), e)
                }), l.watchData = {}, angular.forEach(["minDate", "maxDate", "datepickerMode"], function (e) {
                    if (c[e]) {
                        var o = t(c[e]);
                        if (l.$parent.$watch(o, function (t) {
                                l.watchData[e] = t
                            }), v.attr(d(e), "watchData." + e), "datepickerMode" === e) {
                            var n = o.assign;
                            l.$watch("watchData." + e, function (e, t) {
                                e !== t && n(l.$parent, e)
                            })
                        }
                    }
                }), c.dateDisabled && v.attr("date-disabled", "dateDisabled({ date: date, mode: mode })"), u.$parsers.unshift(p), l.dateSelection = function (e) {
                    angular.isDefined(e) && (l.date = e), u.$setViewValue(l.date), u.$render(), g && (l.isOpen = !1, s[0].focus())
                }, s.bind("input change keyup", function () {
                    l.$apply(function () {
                        l.date = u.$modelValue
                    })
                }), u.$render = function () {
                    var e = u.$viewValue ? r(u.$viewValue, f) : "";
                    s.val(e), l.date = p(u.$modelValue)
                };
                var b = function (e) {
                        l.isOpen && e.target !== s[0] && l.$apply(function () {
                            l.isOpen = !1
                        })
                    },
                    S = function (e) {
                        l.keydown(e)
                    };
                s.bind("keydown", S), l.keydown = function (e) {
                    27 === e.which ? (e.preventDefault(), e.stopPropagation(), l.close()) : 40 !== e.which || l.isOpen || (l.isOpen = !0)
                }, l.$watch("isOpen", function (e) {
                    e ? (l.$broadcast("datepicker.focus"), l.position = m ? n.offset(s) : n.position(s), l.position.top = l.position.top + s.prop("offsetHeight"), o.bind("click", b)) : o.unbind("click", b)
                }), l.select = function (e) {
                    if ("today" === e) {
                        var t = new Date;
                        angular.isDate(u.$modelValue) ? (e = new Date(u.$modelValue)).setFullYear(t.getFullYear(), t.getMonth(), t.getDate()) : e = new Date(t.setHours(0, 0, 0, 0))
                    }
                    l.dateSelection(e)
                }, l.close = function () {
                    l.isOpen = !1, s[0].focus()
                };
                var y = e(h)(l);
                h.remove(), m ? o.find("body").append(y) : s.after(y), l.$on("$destroy", function () {
                    y.remove(), s.unbind("keydown", S), o.unbind("click", b)
                })
            }
        }
    }]).directive("datepickerPopupWrap", function () {
        return {
            restrict: "EA",
            replace: !0,
            transclude: !0,
            templateUrl: "template/datepicker/popup.html",
            link: function (e, t) {
                t.bind("click", function (e) {
                    e.preventDefault(), e.stopPropagation()
                })
            }
        }
    }), angular.module("ui.bootstrap.dropdown", []).constant("dropdownConfig", {
        openClass: "open"
    }).service("dropdownService", ["$document", function (e) {
        var t = null;
        this.open = function (r) {
            t || (e.bind("click", o), e.bind("keydown", n)), t && t !== r && (t.isOpen = !1), t = r
        }, this.close = function (r) {
            t === r && (t = null, e.unbind("click", o), e.unbind("keydown", n))
        };
        var o = function (e) {
                if (t) {
                    var o = t.getToggleElement();
                    e && o && o[0].contains(e.target) || t.$apply(function () {
                        t.isOpen = !1
                    })
                }
            },
            n = function (e) {
                27 === e.which && (t.focusToggleElement(), o())
            }
    }]).controller("DropdownController", ["$scope", "$attrs", "$parse", "dropdownConfig", "dropdownService", "$animate", function (e, t, o, n, r, i) {
        var a, l = this,
            s = e.$new(),
            c = n.openClass,
            u = angular.noop,
            d = t.onToggle ? o(t.onToggle) : angular.noop;
        this.init = function (n) {
            l.$element = n, t.isOpen && (a = o(t.isOpen), u = a.assign, e.$watch(a, function (e) {
                s.isOpen = !!e
            }))
        }, this.toggle = function (e) {
            return s.isOpen = arguments.length ? !!e : !s.isOpen
        }, this.isOpen = function () {
            return s.isOpen
        }, s.getToggleElement = function () {
            return l.toggleElement
        }, s.focusToggleElement = function () {
            l.toggleElement && l.toggleElement[0].focus()
        }, s.$watch("isOpen", function (t, o) {
            i[t ? "addClass" : "removeClass"](l.$element, c), t ? (s.focusToggleElement(), r.open(s)) : r.close(s), u(e, t), angular.isDefined(t) && t !== o && d(e, {
                open: !!t
            })
        }), e.$on("$locationChangeSuccess", function () {
            s.isOpen = !1
        }), e.$on("$destroy", function () {
            s.$destroy()
        })
    }]).directive("dropdown", function () {
        return {
            controller: "DropdownController",
            link: function (e, t, o, n) {
                n.init(t)
            }
        }
    }).directive("dropdownToggle", function () {
        return {
            require: "?^dropdown",
            link: function (e, t, o, n) {
                if (n) {
                    n.toggleElement = t;
                    var r = function (r) {
                        r.preventDefault(), t.hasClass("disabled") || o.disabled || e.$apply(function () {
                            n.toggle()
                        })
                    };
                    t.bind("click", r), t.attr({
                        "aria-haspopup": !0,
                        "aria-expanded": !1
                    }), e.$watch(n.isOpen, function (e) {
                        t.attr("aria-expanded", !!e)
                    }), e.$on("$destroy", function () {
                        t.unbind("click", r)
                    })
                }
            }
        }
    }), angular.module("ui.bootstrap.modal", ["ui.bootstrap.transition"]).factory("$$stackedMap", function () {
        return {
            createNew: function () {
                var e = [];
                return {
                    add: function (t, o) {
                        e.push({
                            key: t,
                            value: o
                        })
                    },
                    get: function (t) {
                        for (var o = 0; o < e.length; o++)
                            if (t == e[o].key) return e[o]
                    },
                    keys: function () {
                        for (var t = [], o = 0; o < e.length; o++) t.push(e[o].key);
                        return t
                    },
                    top: function () {
                        return e[e.length - 1]
                    },
                    remove: function (t) {
                        for (var o = -1, n = 0; n < e.length; n++)
                            if (t == e[n].key) {
                                o = n;
                                break
                            } return e.splice(o, 1)[0]
                    },
                    removeTop: function () {
                        return e.splice(e.length - 1, 1)[0]
                    },
                    length: function () {
                        return e.length
                    }
                }
            }
        }
    }).directive("modalBackdrop", ["$timeout", function (e) {
        return {
            restrict: "EA",
            replace: !0,
            templateUrl: "template/modal/backdrop.html",
            link: function (t, o, n) {
                t.backdropClass = n.backdropClass || "", t.animate = !1, e(function () {
                    t.animate = !0
                })
            }
        }
    }]).directive("modalWindow", ["$modalStack", "$timeout", function (e, t) {
        return {
            restrict: "EA",
            scope: {
                index: "@",
                animate: "="
            },
            replace: !0,
            transclude: !0,
            templateUrl: function (e, t) {
                return t.templateUrl || "template/modal/window.html"
            },
            link: function (o, n, r) {
                n.addClass(r.windowClass || ""), o.size = r.size, t(function () {
                    o.animate = !0, n[0].querySelectorAll("[autofocus]").length || n[0].focus()
                }), o.close = function (t) {
                    var o = e.getTop();
                    o && o.value.backdrop && "static" != o.value.backdrop && t.target === t.currentTarget && (t.preventDefault(), t.stopPropagation(), e.dismiss(o.key, "backdrop click"))
                }
            }
        }
    }]).directive("modalTransclude", function () {
        return {
            link: function (e, t, o, n, r) {
                r(e.$parent, function (e) {
                    t.empty(), t.append(e)
                })
            }
        }
    }).factory("$modalStack", ["$transition", "$timeout", "$document", "$compile", "$rootScope", "$$stackedMap", function (e, t, o, n, r, i) {
        function a() {
            for (var e = -1, t = p.keys(), o = 0; o < t.length; o++) p.get(t[o]).value.backdrop && (e = o);
            return e
        }

        function l(e) {
            var t = o.find("body").eq(0),
                n = p.get(e).value;
            p.remove(e), s(n.modalDomEl, n.modalScope, 300, function () {
                n.modalScope.$destroy(), t.toggleClass(d, p.length() > 0),
                    function () {
                        if (c && -1 == a()) {
                            var e = u;
                            s(c, u, 150, function () {
                                e.$destroy(), e = null
                            }), c = void 0, u = void 0
                        }
                    }()
            })
        }

        function s(o, n, r, i) {
            function a() {
                a.done || (a.done = !0, o.remove(), i && i())
            }
            n.animate = !1;
            var l = e.transitionEndEventName;
            if (l) {
                var s = t(a, r);
                o.bind(l, function () {
                    t.cancel(s), a(), n.$apply()
                })
            } else t(a)
        }
        var c, u, d = "modal-open",
            p = i.createNew(),
            f = {};
        return r.$watch(a, function (e) {
            u && (u.index = e)
        }), o.bind("keydown", function (e) {
            var t;
            27 === e.which && ((t = p.top()) && t.value.keyboard && (e.preventDefault(), r.$apply(function () {
                f.dismiss(t.key, "escape key press")
            })))
        }), f.open = function (e, t) {
            p.add(e, {
                deferred: t.deferred,
                modalScope: t.scope,
                backdrop: t.backdrop,
                keyboard: t.keyboard
            });
            var i = o.find("body").eq(0),
                l = a();
            if (l >= 0 && !c) {
                (u = r.$new(!0)).index = l;
                var s = angular.element("<div modal-backdrop></div>");
                s.attr("backdrop-class", t.backdropClass), c = n(s)(u), i.append(c)
            }
            var f = angular.element("<div modal-window></div>");
            f.attr({
                "template-url": t.windowTemplateUrl,
                "window-class": t.windowClass,
                size: t.size,
                index: p.length() - 1,
                animate: "animate"
            }).html(t.content);
            var g = n(f)(t.scope);
            p.top().value.modalDomEl = g, i.append(g), i.addClass(d)
        }, f.close = function (e, t) {
            var o = p.get(e);
            o && (o.value.deferred.resolve(t), l(e))
        }, f.dismiss = function (e, t) {
            var o = p.get(e);
            o && (o.value.deferred.reject(t), l(e))
        }, f.dismissAll = function (e) {
            for (var t = this.getTop(); t;) this.dismiss(t.key, e), t = this.getTop()
        }, f.getTop = function () {
            return p.top()
        }, f
    }]).provider("$modal", function () {
        var e = {
            options: {
                backdrop: !0,
                keyboard: !0
            },
            $get: ["$injector", "$rootScope", "$q", "$http", "$templateCache", "$controller", "$modalStack", function (t, o, n, r, i, a, l) {
                function s(e) {
                    return e.template ? n.when(e.template) : r.get(angular.isFunction(e.templateUrl) ? e.templateUrl() : e.templateUrl, {
                        cache: i
                    }).then(function (e) {
                        return e.data
                    })
                }

                function c(e) {
                    var o = [];
                    return angular.forEach(e, function (e) {
                        (angular.isFunction(e) || angular.isArray(e)) && o.push(n.when(t.invoke(e)))
                    }), o
                }
                var u = {
                    open: function (t) {
                        var r = n.defer(),
                            i = n.defer(),
                            u = {
                                result: r.promise,
                                opened: i.promise,
                                close: function (e) {
                                    l.close(u, e)
                                },
                                dismiss: function (e) {
                                    l.dismiss(u, e)
                                }
                            };
                        if ((t = angular.extend({}, e.options, t)).resolve = t.resolve || {}, !t.template && !t.templateUrl) throw new Error("One of template or templateUrl options is required.");
                        var d = n.all([s(t)].concat(c(t.resolve)));
                        return d.then(function (e) {
                            var n = (t.scope || o).$new();
                            n.$close = u.close, n.$dismiss = u.dismiss;
                            var i, s = {},
                                c = 1;
                            t.controller && (s.$scope = n, s.$modalInstance = u, angular.forEach(t.resolve, function (t, o) {
                                s[o] = e[c++]
                            }), i = a(t.controller, s), t.controllerAs && (n[t.controllerAs] = i)), l.open(u, {
                                scope: n,
                                deferred: r,
                                content: e[0],
                                backdrop: t.backdrop,
                                keyboard: t.keyboard,
                                backdropClass: t.backdropClass,
                                windowClass: t.windowClass,
                                windowTemplateUrl: t.windowTemplateUrl,
                                size: t.size
                            })
                        }, function (e) {
                            r.reject(e)
                        }), d.then(function () {
                            i.resolve(!0)
                        }, function () {
                            i.reject(!1)
                        }), u
                    }
                };
                return u
            }]
        };
        return e
    }), angular.module("ui.bootstrap.pagination", []).controller("PaginationController", ["$scope", "$attrs", "$parse", function (e, t, o) {
        var n = this,
            r = {
                $setViewValue: angular.noop
            },
            i = t.numPages ? o(t.numPages).assign : angular.noop;
        this.init = function (i, a) {
            r = i, this.config = a, r.$render = function () {
                n.render()
            }, t.itemsPerPage ? e.$parent.$watch(o(t.itemsPerPage), function (t) {
                n.itemsPerPage = parseInt(t, 10), e.totalPages = n.calculateTotalPages()
            }) : this.itemsPerPage = a.itemsPerPage
        }, this.calculateTotalPages = function () {
            var t = this.itemsPerPage < 1 ? 1 : Math.ceil(e.totalItems / this.itemsPerPage);
            return Math.max(t || 0, 1)
        }, this.render = function () {
            e.page = parseInt(r.$viewValue, 10) || 1
        }, e.selectPage = function (t) {
            e.page !== t && t > 0 && t <= e.totalPages && (r.$setViewValue(t), r.$render())
        }, e.getText = function (t) {
            return e[t + "Text"] || n.config[t + "Text"]
        }, e.noPrevious = function () {
            return 1 === e.page
        }, e.noNext = function () {
            return e.page === e.totalPages
        }, e.$watch("totalItems", function () {
            e.totalPages = n.calculateTotalPages()
        }), e.$watch("totalPages", function (t) {
            i(e.$parent, t), e.page > t ? e.selectPage(t) : r.$render()
        })
    }]).constant("paginationConfig", {
        itemsPerPage: 10,
        boundaryLinks: !1,
        directionLinks: !0,
        firstText: "First",
        previousText: "Previous",
        nextText: "Next",
        lastText: "Last",
        rotate: !0
    }).directive("pagination", ["$parse", "paginationConfig", function (e, t) {
        return {
            restrict: "EA",
            scope: {
                totalItems: "=",
                firstText: "@",
                previousText: "@",
                nextText: "@",
                lastText: "@"
            },
            require: ["pagination", "?ngModel"],
            controller: "PaginationController",
            templateUrl: "template/pagination/pagination.html",
            replace: !0,
            link: function (o, n, r, i) {
                function a(e, t, o) {
                    return {
                        number: e,
                        text: t,
                        active: o
                    }
                }
                var l = i[0],
                    s = i[1];
                if (s) {
                    var c = angular.isDefined(r.maxSize) ? o.$parent.$eval(r.maxSize) : t.maxSize,
                        u = angular.isDefined(r.rotate) ? o.$parent.$eval(r.rotate) : t.rotate;
                    o.boundaryLinks = angular.isDefined(r.boundaryLinks) ? o.$parent.$eval(r.boundaryLinks) : t.boundaryLinks, o.directionLinks = angular.isDefined(r.directionLinks) ? o.$parent.$eval(r.directionLinks) : t.directionLinks, l.init(s, t), r.maxSize && o.$parent.$watch(e(r.maxSize), function (e) {
                        c = parseInt(e, 10), l.render()
                    });
                    var d = l.render;
                    l.render = function () {
                        d(), o.page > 0 && o.page <= o.totalPages && (o.pages = function (e, t) {
                            var o = [],
                                n = 1,
                                r = t,
                                i = angular.isDefined(c) && t > c;
                            i && (u ? (r = (n = Math.max(e - Math.floor(c / 2), 1)) + c - 1) > t && (n = (r = t) - c + 1) : (n = (Math.ceil(e / c) - 1) * c + 1, r = Math.min(n + c - 1, t)));
                            for (var l = n; r >= l; l++) {
                                var s = a(l, l, l === e);
                                o.push(s)
                            }
                            if (i && !u) {
                                if (n > 1) {
                                    var d = a(n - 1, "...", !1);
                                    o.unshift(d)
                                }
                                if (t > r) {
                                    var p = a(r + 1, "...", !1);
                                    o.push(p)
                                }
                            }
                            return o
                        }(o.page, o.totalPages))
                    }
                }
            }
        }
    }]).constant("pagerConfig", {
        itemsPerPage: 10,
        previousText: "� Previous",
        nextText: "Next �",
        align: !0
    }).directive("pager", ["pagerConfig", function (e) {
        return {
            restrict: "EA",
            scope: {
                totalItems: "=",
                previousText: "@",
                nextText: "@"
            },
            require: ["pager", "?ngModel"],
            controller: "PaginationController",
            templateUrl: "template/pagination/pager.html",
            replace: !0,
            link: function (t, o, n, r) {
                var i = r[0],
                    a = r[1];
                a && (t.align = angular.isDefined(n.align) ? t.$parent.$eval(n.align) : e.align, i.init(a, e))
            }
        }
    }]), angular.module("ui.bootstrap.tooltip", ["ui.bootstrap.position", "ui.bootstrap.bindHtml"]).provider("$tooltip", function () {
        var e = {
                placement: "top",
                animation: !0,
                popupDelay: 0
            },
            t = {
                mouseenter: "mouseleave",
                click: "click",
                focus: "blur"
            },
            o = {};
        this.options = function (e) {
            angular.extend(o, e)
        }, this.setTriggers = function (e) {
            angular.extend(t, e)
        }, this.$get = ["$window", "$compile", "$timeout", "$document", "$position", "$interpolate", function (n, r, i, a, l, s) {
            return function (n, c, u) {
                function d(e) {
                    var o = e || p.trigger || u;
                    return {
                        show: o,
                        hide: t[o] || o
                    }
                }
                var p = angular.extend({}, e, o),
                    f = function (e) {
                        return e.replace(/[A-Z]/g, function (e, t) {
                            return (t ? "-" : "") + e.toLowerCase()
                        })
                    }(n),
                    g = s.startSymbol(),
                    m = s.endSymbol(),
                    h = "<div " + f + '-popup title="' + g + "title" + m + '" content="' + g + "content" + m + '" placement="' + g + "placement" + m + '" animation="animation" is-open="isOpen"></div>';
                return {
                    restrict: "EA",
                    compile: function () {
                        var e = r(h);
                        return function (t, o, r) {
                            function s() {
                                k.isOpen ? f() : u()
                            }

                            function u() {
                                var e;
                                (!A || t.$eval(r[c + "Enable"])) && (e = r[c + "Placement"], k.placement = angular.isDefined(e) ? e : p.placement, function () {
                                    var e = r[c + "PopupDelay"],
                                        t = parseInt(e, 10);
                                    k.popupDelay = isNaN(t) ? p.popupDelay : t
                                }(), k.popupDelay ? y || (y = i(g, k.popupDelay, !1)).then(function (e) {
                                    e()
                                }) : g()())
                            }

                            function f() {
                                t.$apply(function () {
                                    m()
                                })
                            }

                            function g() {
                                return y = null, S && (i.cancel(S), S = null), k.content ? (v && h(), b = k.$new(), (v = e(b, angular.noop)).css({
                                    top: 0,
                                    left: 0,
                                    display: "block"
                                }), C ? a.find("body").append(v) : o.after(v), T(), k.isOpen = !0, k.$digest(), T) : angular.noop
                            }

                            function m() {
                                k.isOpen = !1, i.cancel(y), y = null, k.animation ? S || (S = i(h, 500)) : h()
                            }

                            function h() {
                                S = null, v && (v.remove(), v = null), b && (b.$destroy(), b = null)
                            }
                            var v, b, S, y, C = !!angular.isDefined(p.appendToBody) && p.appendToBody,
                                E = d(void 0),
                                A = angular.isDefined(r[c + "Enable"]),
                                k = t.$new(!0),
                                T = function () {
                                    var e = l.positionElements(o, v, k.placement, C);
                                    e.top += "px", e.left += "px", v.css(e)
                                };
                            k.isOpen = !1, r.$observe(n, function (e) {
                                k.content = e, !e && k.isOpen && m()
                            }), r.$observe(c + "Title", function (e) {
                                k.title = e
                            });
                            var w = function () {
                                o.unbind(E.show, u), o.unbind(E.hide, f)
                            };
                            ! function () {
                                var e = r[c + "Trigger"];
                                w(), (E = d(e)).show === E.hide ? o.bind(E.show, s) : (o.bind(E.show, u), o.bind(E.hide, f))
                            }();
                            var D = t.$eval(r[c + "Animation"]);
                            k.animation = angular.isDefined(D) ? !!D : p.animation;
                            var I = t.$eval(r[c + "AppendToBody"]);
                            (C = angular.isDefined(I) ? I : C) && t.$on("$locationChangeSuccess", function () {
                                k.isOpen && m()
                            }), t.$on("$destroy", function () {
                                i.cancel(S), i.cancel(y), w(), h(), k = null
                            })
                        }
                    }
                }
            }
        }]
    }).directive("tooltipPopup", function () {
        return {
            restrict: "EA",
            replace: !0,
            scope: {
                content: "@",
                placement: "@",
                animation: "&",
                isOpen: "&"
            },
            templateUrl: "template/tooltip/tooltip-popup.html"
        }
    }).directive("tooltip", ["$tooltip", function (e) {
        return e("tooltip", "tooltip", "mouseenter")
    }]).directive("tooltipHtmlUnsafePopup", function () {
        return {
            restrict: "EA",
            replace: !0,
            scope: {
                content: "@",
                placement: "@",
                animation: "&",
                isOpen: "&"
            },
            templateUrl: "template/tooltip/tooltip-html-unsafe-popup.html"
        }
    }).directive("tooltipHtmlUnsafe", ["$tooltip", function (e) {
        return e("tooltipHtmlUnsafe", "tooltip", "mouseenter")
    }]), angular.module("ui.bootstrap.popover", ["ui.bootstrap.tooltip"]).directive("popoverPopup", function () {
        return {
            restrict: "EA",
            replace: !0,
            scope: {
                title: "@",
                content: "@",
                placement: "@",
                animation: "&",
                isOpen: "&"
            },
            templateUrl: "template/popover/popover.html"
        }
    }).directive("popover", ["$tooltip", function (e) {
        return e("popover", "popover", "click")
    }]), angular.module("ui.bootstrap.progressbar", []).constant("progressConfig", {
        animate: !0,
        max: 100
    }).controller("ProgressController", ["$scope", "$attrs", "progressConfig", function (e, t, o) {
        var n = this,
            r = angular.isDefined(t.animate) ? e.$parent.$eval(t.animate) : o.animate;
        this.bars = [], e.max = angular.isDefined(t.max) ? e.$parent.$eval(t.max) : o.max, this.addBar = function (t, o) {
            r || o.css({
                transition: "none"
            }), this.bars.push(t), t.$watch("value", function (o) {
                t.percent = +(100 * o / e.max).toFixed(2)
            }), t.$on("$destroy", function () {
                o = null, n.removeBar(t)
            })
        }, this.removeBar = function (e) {
            this.bars.splice(this.bars.indexOf(e), 1)
        }
    }]).directive("progress", function () {
        return {
            restrict: "EA",
            replace: !0,
            transclude: !0,
            controller: "ProgressController",
            require: "progress",
            scope: {},
            templateUrl: "template/progressbar/progress.html"
        }
    }).directive("bar", function () {
        return {
            restrict: "EA",
            replace: !0,
            transclude: !0,
            require: "^progress",
            scope: {
                value: "=",
                type: "@"
            },
            templateUrl: "template/progressbar/bar.html",
            link: function (e, t, o, n) {
                n.addBar(e, t)
            }
        }
    }).directive("progressbar", function () {
        return {
            restrict: "EA",
            replace: !0,
            transclude: !0,
            controller: "ProgressController",
            scope: {
                value: "=",
                type: "@"
            },
            templateUrl: "template/progressbar/progressbar.html",
            link: function (e, t, o, n) {
                n.addBar(e, angular.element(t.children()[0]))
            }
        }
    }), angular.module("ui.bootstrap.rating", []).constant("ratingConfig", {
        max: 5,
        stateOn: null,
        stateOff: null
    }).controller("RatingController", ["$scope", "$attrs", "ratingConfig", function (e, t, o) {
        var n = {
            $setViewValue: angular.noop
        };
        this.init = function (r) {
            (n = r).$render = this.render, this.stateOn = angular.isDefined(t.stateOn) ? e.$parent.$eval(t.stateOn) : o.stateOn, this.stateOff = angular.isDefined(t.stateOff) ? e.$parent.$eval(t.stateOff) : o.stateOff;
            var i = angular.isDefined(t.ratingStates) ? e.$parent.$eval(t.ratingStates) : new Array(angular.isDefined(t.max) ? e.$parent.$eval(t.max) : o.max);
            e.range = this.buildTemplateObjects(i)
        }, this.buildTemplateObjects = function (e) {
            for (var t = 0, o = e.length; o > t; t++) e[t] = angular.extend({
                index: t
            }, {
                stateOn: this.stateOn,
                stateOff: this.stateOff
            }, e[t]);
            return e
        }, e.rate = function (t) {
            !e.readonly && t >= 0 && t <= e.range.length && (n.$setViewValue(t), n.$render())
        }, e.enter = function (t) {
            e.readonly || (e.value = t), e.onHover({
                value: t
            })
        }, e.reset = function () {
            e.value = n.$viewValue, e.onLeave()
        }, e.onKeydown = function (t) {
            /(37|38|39|40)/.test(t.which) && (t.preventDefault(), t.stopPropagation(), e.rate(e.value + (38 === t.which || 39 === t.which ? 1 : -1)))
        }, this.render = function () {
            e.value = n.$viewValue
        }
    }]).directive("rating", function () {
        return {
            restrict: "EA",
            require: ["rating", "ngModel"],
            scope: {
                readonly: "=?",
                onHover: "&",
                onLeave: "&"
            },
            controller: "RatingController",
            templateUrl: "template/rating/rating.html",
            replace: !0,
            link: function (e, t, o, n) {
                var r = n[0],
                    i = n[1];
                i && r.init(i)
            }
        }
    }), angular.module("ui.bootstrap.tabs", []).controller("TabsetController", ["$scope", function (e) {
        var t, o = this,
            n = o.tabs = e.tabs = [];
        o.select = function (e) {
            angular.forEach(n, function (t) {
                t.active && t !== e && (t.active = !1, t.onDeselect())
            }), e.active = !0, e.onSelect()
        }, o.addTab = function (e) {
            n.push(e), 1 === n.length ? e.active = !0 : e.active && o.select(e)
        }, o.removeTab = function (e) {
            var r = n.indexOf(e);
            if (e.active && n.length > 1 && !t) {
                var i = r == n.length - 1 ? r - 1 : r + 1;
                o.select(n[i])
            }
            n.splice(r, 1)
        }, e.$on("$destroy", function () {
            t = !0
        })
    }]).directive("tabset", function () {
        return {
            restrict: "EA",
            transclude: !0,
            replace: !0,
            scope: {
                type: "@"
            },
            controller: "TabsetController",
            templateUrl: "template/tabs/tabset.html",
            link: function (e, t, o) {
                e.vertical = !!angular.isDefined(o.vertical) && e.$parent.$eval(o.vertical), e.justified = !!angular.isDefined(o.justified) && e.$parent.$eval(o.justified)
            }
        }
    }).directive("tab", ["$parse", function (e) {
        return {
            require: "^tabset",
            restrict: "EA",
            replace: !0,
            templateUrl: "template/tabs/tab.html",
            transclude: !0,
            scope: {
                active: "=?",
                heading: "@",
                onSelect: "&select",
                onDeselect: "&deselect"
            },
            controller: function () {},
            compile: function (t, o, n) {
                return function (t, o, r, i) {
                    t.$watch("active", function (e) {
                        e && i.select(t)
                    }), t.disabled = !1, r.disabled && t.$parent.$watch(e(r.disabled), function (e) {
                        t.disabled = !!e
                    }), t.select = function () {
                        t.disabled || (t.active = !0)
                    }, i.addTab(t), t.$on("$destroy", function () {
                        i.removeTab(t)
                    }), t.$transcludeFn = n
                }
            }
        }
    }]).directive("tabHeadingTransclude", [function () {
        return {
            restrict: "A",
            require: "^tab",
            link: function (e, t) {
                e.$watch("headingElement", function (e) {
                    e && (t.html(""), t.append(e))
                })
            }
        }
    }]).directive("tabContentTransclude", function () {
        return {
            restrict: "A",
            require: "^tabset",
            link: function (e, t, o) {
                var n = e.$eval(o.tabContentTransclude);
                n.$transcludeFn(n.$parent, function (e) {
                    angular.forEach(e, function (e) {
                        ! function (e) {
                            return e.tagName && (e.hasAttribute("tab-heading") || e.hasAttribute("data-tab-heading") || "tab-heading" === e.tagName.toLowerCase() || "data-tab-heading" === e.tagName.toLowerCase())
                        }(e) ? t.append(e): n.headingElement = e
                    })
                })
            }
        }
    }), angular.module("ui.bootstrap.timepicker", []).constant("timepickerConfig", {
        hourStep: 1,
        minuteStep: 1,
        showMeridian: !0,
        meridians: null,
        readonlyInput: !1,
        mousewheel: !0
    }).controller("TimepickerController", ["$scope", "$attrs", "$parse", "$log", "$locale", "timepickerConfig", function (e, t, o, n, r, i) {
        function a() {
            var t = parseInt(e.hours, 10);
            return (e.showMeridian ? t > 0 && 13 > t : t >= 0 && 24 > t) ? (e.showMeridian && (12 === t && (t = 0), e.meridian === m[1] && (t += 12)), t) : void 0
        }

        function l() {
            var t = parseInt(e.minutes, 10);
            return t >= 0 && 60 > t ? t : void 0
        }

        function s(e) {
            return angular.isDefined(e) && e.toString().length < 2 ? "0" + e : e
        }

        function c(e) {
            u(), g.$setViewValue(new Date(f)), d(e)
        }

        function u() {
            g.$setValidity("time", !0), e.invalidHours = !1, e.invalidMinutes = !1
        }

        function d(t) {
            var o = f.getHours(),
                n = f.getMinutes();
            e.showMeridian && (o = 0 === o || 12 === o ? 12 : o % 12), e.hours = "h" === t ? o : s(o), e.minutes = "m" === t ? n : s(n), e.meridian = f.getHours() < 12 ? m[0] : m[1]
        }

        function p(e) {
            var t = new Date(f.getTime() + 6e4 * e);
            f.setHours(t.getHours(), t.getMinutes()), c()
        }
        var f = new Date,
            g = {
                $setViewValue: angular.noop
            },
            m = angular.isDefined(t.meridians) ? e.$parent.$eval(t.meridians) : i.meridians || r.DATETIME_FORMATS.AMPMS;
        this.init = function (o, n) {
            (g = o).$render = this.render;
            var r = n.eq(0),
                a = n.eq(1);
            (angular.isDefined(t.mousewheel) ? e.$parent.$eval(t.mousewheel) : i.mousewheel) && this.setupMousewheelEvents(r, a), e.readonlyInput = angular.isDefined(t.readonlyInput) ? e.$parent.$eval(t.readonlyInput) : i.readonlyInput, this.setupInputEvents(r, a)
        };
        var h = i.hourStep;
        t.hourStep && e.$parent.$watch(o(t.hourStep), function (e) {
            h = parseInt(e, 10)
        });
        var v = i.minuteStep;
        t.minuteStep && e.$parent.$watch(o(t.minuteStep), function (e) {
            v = parseInt(e, 10)
        }), e.showMeridian = i.showMeridian, t.showMeridian && e.$parent.$watch(o(t.showMeridian), function (t) {
            if (e.showMeridian = !!t, g.$error.time) {
                var o = a(),
                    n = l();
                angular.isDefined(o) && angular.isDefined(n) && (f.setHours(o), c())
            } else d()
        }), this.setupMousewheelEvents = function (t, o) {
            var n = function (e) {
                e.originalEvent && (e = e.originalEvent);
                var t = e.wheelDelta ? e.wheelDelta : -e.deltaY;
                return e.detail || t > 0
            };
            t.bind("mousewheel wheel", function (t) {
                e.$apply(n(t) ? e.incrementHours() : e.decrementHours()), t.preventDefault()
            }), o.bind("mousewheel wheel", function (t) {
                e.$apply(n(t) ? e.incrementMinutes() : e.decrementMinutes()), t.preventDefault()
            })
        }, this.setupInputEvents = function (t, o) {
            if (e.readonlyInput) return e.updateHours = angular.noop, void(e.updateMinutes = angular.noop);
            var n = function (t, o) {
                g.$setViewValue(null), g.$setValidity("time", !1), angular.isDefined(t) && (e.invalidHours = t), angular.isDefined(o) && (e.invalidMinutes = o)
            };
            e.updateHours = function () {
                var e = a();
                angular.isDefined(e) ? (f.setHours(e), c("h")) : n(!0)
            }, t.bind("blur", function () {
                !e.invalidHours && e.hours < 10 && e.$apply(function () {
                    e.hours = s(e.hours)
                })
            }), e.updateMinutes = function () {
                var e = l();
                angular.isDefined(e) ? (f.setMinutes(e), c("m")) : n(void 0, !0)
            }, o.bind("blur", function () {
                !e.invalidMinutes && e.minutes < 10 && e.$apply(function () {
                    e.minutes = s(e.minutes)
                })
            })
        }, this.render = function () {
            var e = g.$modelValue ? new Date(g.$modelValue) : null;
            isNaN(e) ? (g.$setValidity("time", !1), n.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')) : (e && (f = e), u(), d())
        }, e.incrementHours = function () {
            p(60 * h)
        }, e.decrementHours = function () {
            p(60 * -h)
        }, e.incrementMinutes = function () {
            p(v)
        }, e.decrementMinutes = function () {
            p(-v)
        }, e.toggleMeridian = function () {
            p(720 * (f.getHours() < 12 ? 1 : -1))
        }
    }]).directive("timepicker", function () {
        return {
            restrict: "EA",
            require: ["timepicker", "?^ngModel"],
            controller: "TimepickerController",
            replace: !0,
            scope: {},
            templateUrl: "template/timepicker/timepicker.html",
            link: function (e, t, o, n) {
                var r = n[0],
                    i = n[1];
                i && r.init(i, t.find("input"))
            }
        }
    }), angular.module("ui.bootstrap.typeahead", ["ui.bootstrap.position", "ui.bootstrap.bindHtml"]).factory("typeaheadParser", ["$parse", function (e) {
        var t = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
        return {
            parse: function (o) {
                var n = o.match(t);
                if (!n) throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "' + o + '".');
                return {
                    itemName: n[3],
                    source: e(n[4]),
                    viewMapper: e(n[2] || n[1]),
                    modelMapper: e(n[1])
                }
            }
        }
    }]).directive("typeahead", ["$compile", "$parse", "$q", "$timeout", "$document", "$position", "typeaheadParser", function (e, t, o, n, r, i, a) {
        var l = [9, 13, 27, 38, 40];
        return {
            require: "ngModel",
            link: function (s, c, u, d) {
                var p, f = s.$eval(u.typeaheadMinLength) || 1,
                    g = s.$eval(u.typeaheadWaitMs) || 0,
                    m = !1 !== s.$eval(u.typeaheadEditable),
                    h = t(u.typeaheadLoading).assign || angular.noop,
                    v = t(u.typeaheadOnSelect),
                    b = u.typeaheadInputFormatter ? t(u.typeaheadInputFormatter) : void 0,
                    S = !!u.typeaheadAppendToBody && s.$eval(u.typeaheadAppendToBody),
                    y = !1 !== s.$eval(u.typeaheadFocusFirst),
                    C = t(u.ngModel).assign,
                    E = a.parse(u.typeahead),
                    A = s.$new();
                s.$on("$destroy", function () {
                    A.$destroy()
                });
                var k = "typeahead-" + A.$id + "-" + Math.floor(1e4 * Math.random());
                c.attr({
                    "aria-autocomplete": "list",
                    "aria-expanded": !1,
                    "aria-owns": k
                });
                var T = angular.element("<div typeahead-popup></div>");
                T.attr({
                    id: k,
                    matches: "matches",
                    active: "activeIdx",
                    select: "select(activeIdx)",
                    query: "query",
                    position: "position"
                }), angular.isDefined(u.typeaheadTemplateUrl) && T.attr("template-url", u.typeaheadTemplateUrl);
                var w = function () {
                        A.matches = [], A.activeIdx = -1, c.attr("aria-expanded", !1)
                    },
                    D = function (e) {
                        return k + "-option-" + e
                    };
                A.$watch("activeIdx", function (e) {
                    0 > e ? c.removeAttr("aria-activedescendant") : c.attr("aria-activedescendant", D(e))
                });
                var I = function (e) {
                    var t = {
                        $viewValue: e
                    };
                    h(s, !0), o.when(E.source(s, t)).then(function (o) {
                        var n = e === d.$viewValue;
                        if (n && p)
                            if (o.length > 0) {
                                A.activeIdx = y ? 0 : -1, A.matches.length = 0;
                                for (var r = 0; r < o.length; r++) t[E.itemName] = o[r], A.matches.push({
                                    id: D(r),
                                    label: E.viewMapper(A, t),
                                    model: o[r]
                                });
                                A.query = e, A.position = S ? i.offset(c) : i.position(c), A.position.top = A.position.top + c.prop("offsetHeight"), c.attr("aria-expanded", !0)
                            } else w();
                        n && h(s, !1)
                    }, function () {
                        w(), h(s, !1)
                    })
                };
                w(), A.query = void 0;
                var P, _ = function () {
                    P && n.cancel(P)
                };
                d.$parsers.unshift(function (e) {
                    return p = !0, e && e.length >= f ? g > 0 ? (_(), function (e) {
                        P = n(function () {
                            I(e)
                        }, g)
                    }(e)) : I(e) : (h(s, !1), _(), w()), m ? e : e ? void d.$setValidity("editable", !1) : (d.$setValidity("editable", !0), e)
                }), d.$formatters.push(function (e) {
                    var t, o = {};
                    return b ? (o.$model = e, b(s, o)) : (o[E.itemName] = e, t = E.viewMapper(s, o), o[E.itemName] = void 0, t !== E.viewMapper(s, o) ? t : e)
                }), A.select = function (e) {
                    var t, o, r = {};
                    r[E.itemName] = o = A.matches[e].model, t = E.modelMapper(s, r), C(s, t), d.$setValidity("editable", !0), v(s, {
                        $item: o,
                        $model: t,
                        $label: E.viewMapper(s, r)
                    }), w(), n(function () {
                        c[0].focus()
                    }, 0, !1)
                }, c.bind("keydown", function (e) {
                    0 !== A.matches.length && -1 !== l.indexOf(e.which) && (-1 != A.activeIdx || 13 !== e.which && 9 !== e.which) && (e.preventDefault(), 40 === e.which ? (A.activeIdx = (A.activeIdx + 1) % A.matches.length, A.$digest()) : 38 === e.which ? (A.activeIdx = (A.activeIdx > 0 ? A.activeIdx : A.matches.length) - 1, A.$digest()) : 13 === e.which || 9 === e.which ? A.$apply(function () {
                        A.select(A.activeIdx)
                    }) : 27 === e.which && (e.stopPropagation(), w(), A.$digest()))
                }), c.bind("blur", function () {
                    p = !1
                });
                var L = function (e) {
                    c[0] !== e.target && (w(), A.$digest())
                };
                r.bind("click", L), s.$on("$destroy", function () {
                    r.unbind("click", L), S && R.remove()
                });
                var R = e(T)(A);
                S ? r.find("body").append(R) : c.after(R)
            }
        }
    }]).directive("typeaheadPopup", function () {
        return {
            restrict: "EA",
            scope: {
                matches: "=",
                query: "=",
                active: "=",
                position: "=",
                select: "&"
            },
            replace: !0,
            templateUrl: "template/typeahead/typeahead-popup.html",
            link: function (e, t, o) {
                e.templateUrl = o.templateUrl, e.isOpen = function () {
                    return e.matches.length > 0
                }, e.isActive = function (t) {
                    return e.active == t
                }, e.selectActive = function (t) {
                    e.active = t
                }, e.selectMatch = function (t) {
                    e.select({
                        activeIdx: t
                    })
                }
            }
        }
    }).directive("typeaheadMatch", ["$http", "$templateCache", "$compile", "$parse", function (e, t, o, n) {
        return {
            restrict: "EA",
            scope: {
                index: "=",
                match: "=",
                query: "="
            },
            link: function (r, i, a) {
                var l = n(a.templateUrl)(r.$parent) || "template/typeahead/typeahead-match.html";
                e.get(l, {
                    cache: t
                }).success(function (e) {
                    i.replaceWith(o(e.trim())(r))
                })
            }
        }
    }]).filter("typeaheadHighlight", function () {
        return function (e, t) {
            return t ? ("" + e).replace(new RegExp(function (e) {
                return e.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1")
            }(t), "gi"), "<strong>$&</strong>") : e
        }
    }), angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function (e) {
        e.put("template/accordion/accordion-group.html", '<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a href class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n\t  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')
    }]), angular.module("template/accordion/accordion.html", []).run(["$templateCache", function (e) {
        e.put("template/accordion/accordion.html", '<div class="panel-group" ng-transclude></div>')
    }]), angular.module("template/alert/alert.html", []).run(["$templateCache", function (e) {
        e.put("template/alert/alert.html", '<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')
    }]), angular.module("template/carousel/carousel.html", []).run(["$templateCache", function (e) {
        e.put("template/carousel/carousel.html", '<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')
    }]), angular.module("template/carousel/slide.html", []).run(["$templateCache", function (e) {
        e.put("template/carousel/slide.html", "<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")
    }]), angular.module("template/datepicker/datepicker.html", []).run(["$templateCache", function (e) {
        e.put("template/datepicker/datepicker.html", '<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')
    }]), angular.module("template/datepicker/day.html", []).run(["$templateCache", function (e) {
        e.put("template/datepicker/day.html", '<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')
    }]), angular.module("template/datepicker/month.html", []).run(["$templateCache", function (e) {
        e.put("template/datepicker/month.html", '<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')
    }]), angular.module("template/datepicker/popup.html", []).run(["$templateCache", function (e) {
        e.put("template/datepicker/popup.html", '<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n\t<li ng-transclude></li>\n\t<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n\t\t<span class="btn-group pull-left">\n\t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n\t\t\t<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n\t\t</span>\n\t\t<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n\t</li>\n</ul>\n')
    }]), angular.module("template/datepicker/year.html", []).run(["$templateCache", function (e) {
        e.put("template/datepicker/year.html", '<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')
    }]), angular.module("template/modal/backdrop.html", []).run(["$templateCache", function (e) {
        e.put("template/modal/backdrop.html", '<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')
    }]), angular.module("template/modal/window.html", []).run(["$templateCache", function (e) {
        e.put("template/modal/window.html", '<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>')
    }]), angular.module("template/pagination/pager.html", []).run(["$templateCache", function (e) {
        e.put("template/pagination/pager.html", '<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')
    }]), angular.module("template/pagination/pagination.html", []).run(["$templateCache", function (e) {
        e.put("template/pagination/pagination.html", '<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')
    }]), angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function (e) {
        e.put("template/tooltip/tooltip-html-unsafe-popup.html", '<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')
    }]), angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function (e) {
        e.put("template/tooltip/tooltip-popup.html", '<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')
    }]), angular.module("template/popover/popover.html", []).run(["$templateCache", function (e) {
        e.put("template/popover/popover.html", '<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')
    }]), angular.module("template/progressbar/bar.html", []).run(["$templateCache", function (e) {
        e.put("template/progressbar/bar.html", '<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')
    }]), angular.module("template/progressbar/progress.html", []).run(["$templateCache", function (e) {
        e.put("template/progressbar/progress.html", '<div class="progress" ng-transclude></div>')
    }]), angular.module("template/progressbar/progressbar.html", []).run(["$templateCache", function (e) {
        e.put("template/progressbar/progressbar.html", '<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')
    }]), angular.module("template/rating/rating.html", []).run(["$templateCache", function (e) {
        e.put("template/rating/rating.html", '<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')
    }]), angular.module("template/tabs/tab.html", []).run(["$templateCache", function (e) {
        e.put("template/tabs/tab.html", '<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')
    }]), angular.module("template/tabs/tabset.html", []).run(["$templateCache", function (e) {
        e.put("template/tabs/tabset.html", '<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')
    }]), angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function (e) {
        e.put("template/timepicker/timepicker.html", '<table>\n\t<tbody>\n\t\t<tr class="text-center">\n\t\t\t<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n\t\t\t<td ng-show="showMeridian"></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n\t\t\t\t<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n\t\t\t</td>\n\t\t\t<td>:</td>\n\t\t\t<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n\t\t\t\t<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n\t\t\t</td>\n\t\t\t<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n\t\t</tr>\n\t\t<tr class="text-center">\n\t\t\t<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n\t\t\t<td>&nbsp;</td>\n\t\t\t<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n\t\t\t<td ng-show="showMeridian"></td>\n\t\t</tr>\n\t</tbody>\n</table>\n')
    }]), angular.module("template/typeahead/typeahead-match.html", []).run(["$templateCache", function (e) {
        e.put("template/typeahead/typeahead-match.html", '<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')
    }]), angular.module("template/typeahead/typeahead-popup.html", []).run(["$templateCache", function (e) {
        e.put("template/typeahead/typeahead-popup.html", '<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')
    }]),
    function () {
        function e(e) {
            var t = {
                openAudiobook: function (t, o) {
                    o || Globals.GLOBAL_STAGING_MODE ? BookOverlay.open(t) : e.show(t)
                }
            };
            return t
        }
        e.$inject = ["InactiveBookModal"], angular.module("epicApp").service("AudiobookService", e)
    }(), angular.module("epicApp").factory("BookPagesService", ["$rootScope", "BookService", "UserAgent", function (e, t, o) {
        var n = {
            pageBuffer: 6,
            urlTable: {},
            pageWidth: null,
            pageHeight: null,
            getPageFlipArrowStyle: function (e) {
                var t = Globals.GLOBAL_CDN_BASE;
                if ("next" === e || "back" === e) return "Firefox" === o.browser.name ? _defineProperty({
                    cursor: 'url("'.concat(t, "/website/book/icn-").concat(e, '-page.png") 28 28, pointer')
                }, "cursor", 'url("'.concat(t, "/website/book/icn-").concat(e, '-page.svg") 28 28, pointer')) : _defineProperty({
                    cursor: 'url("'.concat(t, "/website/book/icn-").concat(e, '-page.png") 28 28, pointer')
                }, "cursor", '-webkit-image-set(url("'.concat(t, "/website/book/icn-").concat(e, '-page.png") 1x, url("').concat(t, "/website/book/icn-").concat(e, '-page@2x.png") 2x) 28 28, pointer'))
            },
            getOrLoadPageImageByPageIndex: function (o) {
                var r = t.getPageCdnByPageIndex(o);
                if (!r) return {};
                var i = r.split("?")[0],
                    a = n.urlTable[i];
                return a && a.ttl > Date.now() ? a.complete ? {
                    cdnUrl: a.src
                } : {
                    broadcastEvent: "book-pages." + i
                } : (a = new Image, n.urlTable[i] = a, a.onload = function () {
                    e.$broadcast("book-pages." + i, a.src)
                }, a.src = r, a.ttl = Date.now() + 36e5, {
                    broadcastEvent: "book-pages." + i
                })
            },
            setPageDimensions: function (e, t) {
                n.pageWidth = e, n.pageHeight = t
            },
            getPageDimensions: function () {
                return {
                    width: n.pageWidth || 0,
                    height: n.pageHeight || 0
                }
            },
            pageDimensionsAreReady: function () {
                return n.pageWidth > 0 && n.pageHeight > 0
            }
        };
        return e.$watch(function () {
            return t.getCurrentPage()
        }, function (e, o) {
            if (1 === t.getBookType() && "number" == typeof e && e !== o)
                for (var r = e - n.pageBuffer; r <= e + n.pageBuffer; r++) n.getOrLoadPageImageByPageIndex(r)
        }), n
    }]), angular.module("epicApp").factory("BookWordDataService", ["$rootScope", "$window", "$http", "$q", "$sce", "BookService", "AssetService", function (e, t, o, n, r, i, a) {
        var l = {};

        function s(e) {
            return !(!i.isReadToMe() || !i.getAudioPropertyByPageIndex(e) && (e % 2 != 0 || !i.getAudioPropertyByPageIndex(e - 1)))
        }
        return l.featureIsOn = !0, l.testMode = !1, l.pageBuffer = 6, l.memoizationTimeToLive = 36e5, l.wordDataTable = {}, l.selectedWord = null, l.constructWordDataKey = function (e, t) {
            return e + "|" + t
        }, l.constructWordDataAssetPath = function (e, t, o) {
            return "drm/" + (e = e.toString())[e.length - 1] + "/" + e + "/OEBPS/JSON/" + (s(o) ? "rtm-" : "") + "word-data/" + t + ".json"
        }, l.getOrLoadWordDataByPageIndex = function (e) {
            var t = n.defer(),
                c = i.getBookId(),
                u = i.getPageHashByPageIndex(e);
            if (!c || !u) return t.resolve(null), t.promise;
            var d = l.constructWordDataKey(c, u),
                p = l.wordDataTable[d];
            if (p && Date.now() < p.ttl) return t.resolve(p.wordData), t.promise;
            var f = l.constructWordDataAssetPath(c, u, e),
                g = a.getFinalAssetPath(f);
            return r.trustAsResourceUrl(g), o.get(g).then(function (t) {
                var o = t.data || null;
                return o = s(e) ? {
                    word_data: o
                } : o, p = {
                    wordData: o,
                    ttl: Date.now() + l.memoizationTimeToLive
                }, l.wordDataTable[d] = p, o
            }, function (e) {
                return console.warn("Problem retrieving CDN word data from URL: " + g), {
                    word_data: []
                }
            })
        }, l.getOrLoadWordDOListByPageIndexRange = function (e, t) {
            for (var o = n.defer(), r = {}, i = [], a = e; a <= t; a++) i.push(a);
            return i.forEach(function (e) {
                l.getOrLoadWordDataByPageIndex(e).then(function (t) {
                    r[e] = t.word_data;
                    var n = !0;
                    if (i.forEach(function (e) {
                            e in r || (n = !1)
                        }), n) {
                        var a = [];
                        i.forEach(function (e) {
                            a = a.concat(r[e])
                        }), o.resolve(a)
                    }
                })
            }), o.promise
        }, l.preSelectWord = function (e) {
            l.dePreSelectCurrentWord(), l.preSelectedWord = e, l.preSelectedWord.isPreSelected = !0
        }, l.dePreSelectCurrentWord = function () {
            l.preSelectedWord && (l.preSelectedWord.isPreSelected = !1, l.preSelectedWord = null)
        }, l.selectWord = function (e) {
            l.deSelectCurrentWord(), l.selectedWord = e, l.selectedWord.isSelected = !0
        }, l.deSelectCurrentWord = function () {
            l.selectedWord && (l.selectedWord.isSelected = !1, l.selectedWord = null)
        }, l.checkForWordInteractionByWordDataList = function (e, t) {
            var o = t[0],
                n = t[1];
            if (!e) return !1;
            for (var r = 0; r < e.length; r++) {
                var i = e[r];
                if (o > i.bbox[0] && o < i.bbox[2] && n > i.bbox[1] && n < i.bbox[3]) return i
            }
        }, l.checkForWordInteractionByPageIndex = function (e, t) {
            var o = i.getBookId(),
                n = i.getPageHashByPageIndex(e),
                r = l.wordDataTable[l.constructWordDataKey(o, n)];
            return !!(r && r.wordData && r.wordData.word_data) && l.checkForWordInteractionByWordDataList(r.wordData.word_data, t)
        }, l.preloadWordDataFromPageIndex = function (e) {
            for (var t = e - l.pageBuffer; t <= e + l.pageBuffer; t++) l.getOrLoadWordDataByPageIndex(t)
        }, e.$watch(function () {
            return i.getCurrentPage()
        }, function (e, t) {
            1 === i.getBookType() && "number" == typeof e && l.preloadWordDataFromPageIndex(e)
        }), l
    }]), angular.module("epicApp").factory("DictionaryLookupAPIService", ["$q", "Data", function (e, t) {
        var o = {
            contractionWords: ["aren't", "can't", "couldn't", "didn't", "doesn't", "don't", "hadn't", "hasn't", "haven't", "he'd", "he'll", "he's", "I'd", "I'll", "I'm", "I've", "isn't", "let's", "mightn't", "mustn't", "shan't", "she'd", "she'll", "she's", "shouldn't", "that's", "there's", "they'd", "they'll", "they're", "they've", "we'd", "we're", "we've", "weren't", "what'll", "what're", "what's", "what've", "where's", "who's", "who'll", "who're", "who's", "who've", "won't", "wouldn't", "you'd", "you'll", "you're", "you've"],
            definitionStore: {},
            getWordDefinition: function (n) {
                (n = n.toLowerCase()).search(/[\u0027\u2019]/g) > -1 && (n = n.replace("’", "'"), -1 === o.contractionWords.indexOf(n) && (n = n.split("'")[0]));
                var r = e.defer(),
                    i = {};
                return "string" != typeof n || n.length < 1 ? (i.error = "Problem getting word definition.", r.resolve(i), r.promise) : o.definitionStore[n] ? (r.resolve(o.definitionStore[n]), r.promise) : t.get("WebBook", "getDictionaryWordData", {
                    word: n
                }).then(function (e) {
                    if (e && e.success && e.result && e.result.DictionaryWord ? i.definition = e.result.DictionaryWord : e && e.success && e.result && e.result.error ? i.error = e.result.error : i.error = "Problem getting word definition.", i.definition) {
                        var t = {};
                        i.definition.meanings.forEach(function (e) {
                            var o = e.definition.split(":");
                            t[e.partOfSpeech] ? t[e.partOfSpeech] = t[e.partOfSpeech].concat(o) : t[e.partOfSpeech] = o
                        });
                        var r = {
                            word: i.definition.word,
                            pronunciation: i.definition.pronunciation,
                            audioURL: i.definition.audioURL,
                            meanings: []
                        };
                        for (var a in t) r.meanings.push({
                            partOfSpeech: a,
                            definitions: t[a]
                        });
                        i.definition = r
                    }
                    return o.definitionStore[n] = i, i
                })
            }
        };
        return o
    }]), angular.module("epicApp").factory("BookPresentationsLogger", ["$http", "Data", "ProfileService", "AccountService", "$locale", "$window", "$timeout", "$interval", "$state", "$rootScope", "$filter", "BrowseService", "BigQuery", "LoggingSourceTranslation", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f) {
        var g, m = {
                addViewedContentData: B,
                addOpenedContentData: function (e, t, o) {
                    if (m.loggingIsActive) {
                        var n, r, i;
                        r = o.rowIndex >= 0 ? o.rowIndex : null, t = f.translateSourceString(t, o.section, o.rowTitle, r, o.sourceId, o.parentLoggingContext, o.tabName, o.isFeaturedBanner), n = o.index + 1;
                        var a = M(e, n, r, t);
                        if (a) C && C.logs && Array.isArray(C.logs) && (i = C.logs.indexOf(a), C.logs[i].o += 1);
                        else {
                            if (r = 0 === (r = f.adjustRowIndexToOneBased(o.rowTitle, o.rowIndex)) ? r : r - 1, B(e, t, o), a = M(e, n, r, t), C && C.logs && Array.isArray(C.logs) && (i = C.logs.indexOf(a)), !i || !C.logs[i]) return;
                            C.logs[i].v = 0, C.logs[i].o = 1
                        }
                    }
                },
                getElementIsInWindow: N,
                watchVerticalScrolling: U,
                watchHorizontalScrolling: x,
                makeContentItemLevelCheckIfViewedAndLog: function (e, t, o, n) {
                    if (m.loggingIsActive) {
                        var r = !1,
                            i = 0;
                        "read" !== s.current.name && "standalone-quiz" !== s.current.name && a(function () {
                            f()
                        }), n.parentLoggingContext && a(function () {
                            f()
                        });
                        var l = c.$on("vertical-scroll", function () {
                                f()
                            }),
                            u = c.$on("horizontal-scroll", function () {
                                f()
                            }),
                            d = c.$on("horizontal-scroll-mixed-content", function () {
                                f()
                            }),
                            p = c.$on("overlay-closed", function () {
                                f()
                            });
                        n.$on("$destroy", function () {
                            l(), u(), d(), p()
                        })
                    }

                    function f() {
                        r !== N(e) && ((r = !r) ? (0 === i || $() - i > b) && B(o, t, n) : i = $())
                    }
                },
                sendLogToBigQuery: P,
                setScrollWatchers: function (e, t) {
                    m.loggingIsActive && !m.verticalScrollWatchHolder && (e && (m.verticalScrollWatchHolder = U()), t && (m.horizontalScrollWatchHolder = x()))
                },
                destroyScrollWatchers: function () {
                    m.loggingIsActive && (m.verticalScrollWatchHolder && (l.cancel(m.verticalScrollWatchHolder), m.verticalScrollWatchHolder = null), m.horizontalScrollWatchHolder && (l.cancel(m.horizontalScrollWatchHolder), m.horizontalScrollWatchHolder = null))
                },
                init: _,
                getRenderedDomElements: function (e, t) {
                    return t = t || 1, document.getElementsByClassName(e).length > 0 ? a(function () {
                        return document.getElementsByClassName(e)
                    }, 0) : t >= 5 ? a(function () {
                        return null
                    }) : a(function () {
                        return m.getRenderedDomElements(e, t + 1)
                    }, 1e3)
                },
                addressBookViewsArrayItemsNotInWindow: function (e, t) {
                    return e < 0 ? t : (0 === t[e][1] ? t[e][1] = $() : $() - t[e][1] > b ? t.splice(e, 1) : t[e][1] = $(), t)
                },
                cancelSendLogTimer: function () {
                    m.loggingIsActive && l.cancel(g)
                },
                loggingIsActive: !0
            },
            h = 1e3,
            v = 2e3,
            b = 10,
            S = Globals.GLOBAL_DEV_MODE ? 120 : 300,
            y = Globals.GLOBAL_DEV_MODE ? 3 : 5,
            C = {},
            E = [],
            A = [],
            k = [],
            T = !1,
            w = null;

        function D(e) {
            if (C && C.logs && Array.isArray(C.logs)) return e ? C.logs.filter(function (e) {
                if (e.v >= y || e.o >= 1) return e
            }) : C.logs.filter(function (e) {
                if (e.v < y && 0 === e.o) return e
            })
        }

        function I() {
            C.logs && 0 !== C.logs.length && 0 !== (A = D(!0)).length && (k = D(), C.logs = A, T = !0, P().then(L).then(function () {
                E = [], T = !1
            }))
        }

        function P(o) {
            if (m.loggingIsActive && C.logs && 0 !== C.logs.length && (C.logs = D(!0), 0 !== C.logs.length)) {
                var n;
                C.st = (n = Globals.GLOBAL_SESSION_LENGTH) < 0 ? Math.ceil(n) : Math.floor(n), C.logs = JSON.stringify(C.logs);
                var r = p.validateParams(C),
                    i = t.urlEncode(r, !0),
                    a = Globals.GLOBAL_ANALYTICS_URL + "bookdata/?";
                if (o) {
                    var l = new XMLHttpRequest;
                    return l.open("POST", a, !1), l.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8"), void l.send(i)
                }
                return e({
                    url: a,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8"
                    },
                    transformResponse: function (e) {
                        return e
                    },
                    data: i
                }).then(function (e) {
                    return C.logs = [], e
                }, function (e) {
                    C.logs = []
                })
            }
        }

        function _() {
            m.loggingIsActive && (t.get("WebFavorite", "getFavoriteRowsForUserId").then(function (e) {
                e && e.result && (w = function (e) {
                    var t = [];
                    for (var o in e) e[o].forEach(function (e) {
                        t.push(e.modelId)
                    });
                    return t
                }(e.result))
            }).catch(function () {}), C = {
                at: null,
                aid: null,
                p: "web",
                de: "browser",
                sid: null,
                loc: r.id,
                logs: []
            }, R().then(function (e) {
                C.at = e.accountType, C.aid = e.accountId
            }), O().then(function (e) {
                C.sid = e
            }), g = l(I, 1e3 * S), i.onbeforeunload = function () {
                P(!0)
            })
        }

        function L() {
            E.forEach(function (e) {
                var t, o, n, r, i = (t = e.contentId, o = e.contentIndex, n = e.rowIndex, r = e.source, k && 0 !== k.length ? u("filter")(k, {
                    c: t,
                    so: r,
                    r: n,
                    i: o
                }, !0)[0] : null);
                if (i) {
                    var a = k.indexOf(i);
                    k[a].v += 1, k[a].l = $()
                } else k.push(e)
            }), C.logs = k
        }

        function R() {
            return null === o.currentProfile ? a(R, 1e3) : a(function () {
                return o.currentProfile
            })
        }

        function O() {
            return n.email ? a(function () {
                return n.getSessionKeyForLogin(n.email)
            }) : a(O, 1e3)
        }

        function $() {
            return Math.round(Date.now() / 1e3)
        }

        function B(e, t, r) {
            var i, a;
            if (m.loggingIsActive && C && C.logs && ("read" !== s.current.name && "standalone-quiz" !== s.current.name || "reccommendRow" === r.parentLoggingContext || "reccommendRowVideo" === r.parentLoggingContext)) {
                a = r.rowIndex >= 0 ? r.rowIndex : null;
                var l = M(e, i = r.index + 1, a, t = f.translateSourceString(t, r.section, r.rowTitle, a, r.sourceId, r.parentLoggingContext, r.tabName, r.isFeaturedBanner));
                if (l) {
                    var c = C.logs.indexOf(l);
                    return C.logs[c].v += 1, void(C.logs[c].l = $())
                }
                var u = {
                    c: e,
                    ct: r.contentType,
                    f: F(e),
                    i,
                    l: $(),
                    r: a,
                    rt: r.rowTitle || null,
                    so: t,
                    s: r.section,
                    v: 1,
                    av: Globals.GLOBAL_ASSETS_VERSION,
                    u: o.currentProfile.id,
                    ss: n.status,
                    d: $(),
                    a: o.currentProfile.age,
                    ip: o.currentProfile.isParent ? 1 : 0,
                    o: 0
                };
                r.sourceId && (u.si = r.sourceId), T ? E.push(u) : C && C.logs && Array.isArray(C.logs) && C.logs.push(u)
            }
        }

        function N(e) {
            if (!e) return !1;
            var t = angular.element(e).offset().top,
                o = t + angular.element(e).height(),
                n = angular.element(e).offset().left,
                r = n + angular.element(e).width();
            return (0 !== t || 0 !== o || 0 !== n || 0 !== r) && (n >= 0 && r <= angular.element(i).width() && t >= 0 && o <= angular.element(i).height())
        }

        function U() {
            if (m.loggingIsActive) {
                var e = document.getElementById("ng-view"),
                    t = angular.element(e).position().top;
                return l(function () {
                    t !== angular.element(e).position().top && (c.$broadcast("vertical-scroll"), t = angular.element(e).position().top)
                }, h)
            }
        }

        function x() {
            if (m.loggingIsActive) {
                for (var e = document.getElementsByClassName("md-virtual-repeat-offsetter"), t = [], o = 0; o < e.length;) t[o] = 0, o++;
                return l(function () {
                    for (var o = 0; o < e.length; o++) e[o].style.transform !== t[o] && (c.$broadcast("horizontal-scroll"), t[o] = e[o].style.transform)
                }, v)
            }
        }

        function M(e, t, o, n) {
            return C && C.logs && 0 !== C.logs.length ? u("filter")(C.logs, {
                c: e,
                so: n,
                r: o,
                i: t
            }, !0)[0] : null
        }

        function F(e) {
            return w && w.includes(e) ? 1 : 0
        }
        return Globals.GLOBAL_IS_AUTHED && _(), m
    }]),
    function () {
        function e(e) {
            var t = {
                consecutivePlays: 0,
                openVideo: function (t, o) {
                    o || Globals.GLOBAL_STAGING_MODE ? BookOverlay.open(t) : e.show(t)
                },
                incrementPlayCount: function () {
                    t.consecutivePlays++
                },
                resetPlayCount: function () {
                    t.consecutivePlays = 0
                }
            };
            return t
        }
        e.$inject = ["InactiveBookModal"], angular.module("epicApp").factory("VideoService", e)
    }(), angular.module("epicApp").factory("HighlightingTestDataService", ["$http", "$sce", function (e, t) {
        var o = {
            isOn: !0,
            data: {},
            getHighlightWordData: function (e, t) {
                if (e && t) {
                    var n = o.data[e];
                    if (n && n[t]) return n[t].word_data || []
                }
            },
            getHighlightErrorData: function (e, t) {
                if (e && t) {
                    var n = o.data[e];
                    if (n && n[t]) return n[t].word_errors || []
                }
            },
            getHighlightStyle: function (e) {
                var t = e.map(function (e) {
                        return parseFloat(e)
                    }),
                    o = t[0],
                    n = t[1];
                return {
                    width: t[2] - o + "%",
                    height: t[3] - n + "%",
                    left: o + "%",
                    bottom: n + "%"
                }
            }
        };
        return o
    }]), angular.module("epicApp").directive("wordDictionaryLookupModal", ["$timeout", "$mdDialog", "BookService", "DictionaryLookupAPIService", "BigQuery", "Logsly", function (e, t, o, n, r, i) {
        return {
            restrict: "E",
            templateUrl: "md-dialog/book/word-dictionary-lookup/word-dictionary-lookup-modal.html",
            scope: !0,
            link: function (e, t, i) {
                e.maxPartsOfSpeech = 3, e.maxDefinitions = 3, e.loadingDefData = !0, e.defData = null;
                var a = null;
                e.pronunciationAvailable = !1, e.pronunciationPlaying = !1;
                var l = null,
                    s = null;
                e.getFormattedWordText = function (e) {
                    return e.indexOf("(cid:") < 0 ? e : ""
                }, e.playPronunciation = function () {
                    a && a.play()
                }, e.startLookupLoadAnim = function () {
                    l = l || t[0].querySelector(".word-lookup-loading-lottie"), (s = bodymovin.loadAnimation({
                        container: l,
                        renderer: "svg",
                        loop: !0,
                        autoplay: !0,
                        path: "/assets/app/animations/word-dictionary-lookup-loader.json"
                    })).setSpeed(1)
                }, e.stopLookupLoadAnim = function () {
                    s.destroy()
                }, e.startLookupLoadAnim(), n.getWordDefinition(e.wordText).then(function (t) {
                    if (e.stopLookupLoadAnim(), e.loadingDefData = !1, e.defData = t, e.defData.definition && e.defData.definition.audioURL)(a = new Audio(e.defData.definition.audioURL)).addEventListener("loadeddata", function () {
                        e.$apply(function () {
                            e.pronunciationAvailable = !0, e.modalReadyPromise.then(function () {
                                a.play()
                            })
                        })
                    }), a.addEventListener("play", function () {
                        e.$apply(function () {
                            e.pronunciationPlaying = !0
                        })
                    }), a.addEventListener("ended", function () {
                        e.$apply(function () {
                            e.pronunciationPlaying = !1
                        })
                    }), a.addEventListener("error", function () {
                        console.warn("Audio error for word pronunciation: " + e.wordText)
                    });
                    else if (e.defData.error) {
                        var n = {
                            word: e.wordText,
                            book_id: o.getBookId().toString(),
                            pageHash: o.getPageHashByPageIndex(o.getCurrentPage())
                        };
                        r.log(r.events.TEXT_HIGHLIGHT_DEFINITION_NOT_FOUND, n)
                    }
                })
            }
        }
    }]),
    function () {
        function e(e, t, o, n) {
            e.profileService = o, e.selectCtrl = n.selectCtrl, e.group = n.group, e.submitting = !1, e.submit = function () {
                e.submitting = !0, n.addToGroup().then(function (o) {
                    e.submitting = !1, t.hide()
                })
            };
            for (var r = 0; r < e.selectCtrl.selectables.length; r++)
                if (e.selectCtrl.selectables[r].isDefault && "Guest" === e.selectCtrl.selectables[r].firstName) {
                    e.selectCtrl.selectables.splice(r, 1);
                    break
                }
        }
        e.$inject = ["$scope", "$mdDialog", "ProfileService", "params"], angular.module("epicApp").controller("ClassroomAddProfilesDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n) {
            e.profileService = o, e.selectCtrl = n.groupSelectCtrl, e.profile = n.profile, e.submitting = !1, n.profile ? (e.title = "View Groups", e.loading = !0, o.getGroupIdsForProfile(e.profile.id).then(function (t) {
                if (e.loading = !1, t)
                    for (var n = 0; n < t.length; n++)
                        for (var r = 0; r < o.classroomGroups.length; r++) {
                            var i = o.classroomGroups[r];
                            i.id == t[n] && e.selectCtrl.select(i)
                        }
            })) : e.title = "Add to Group(s)", e.submit = function () {
                e.submitting = !0, n.addToGroups().then(function (o) {
                    e.submitting = !1, t.hide()
                })
            }
        }
        e.$inject = ["$scope", "$mdDialog", "ProfileService", "params"], angular.module("epicApp").controller("ClassroomAddToGroupsDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            e.groupName = "", e.error = "", e.submitting = !1, e.$watch(function () {
                return e.groupName
            }, function (t, o) {
                e.error = ""
            }), e.submit = function () {
                if (e.error = "", e.submitting = !0, !e.groupName || "" === e.groupName) return e.submitting = !1, void(e.error = "Please enter a name for your classroom group.");
                var t, l = r.classroomGroups.length;
                for (t = 0; t < l; t++)
                    if (r.classroomGroups[t].name.toLowerCase() == e.groupName.toLowerCase()) return e.submitting = !1, void(e.error = "You have already created a group with that name.");
                i.createGroup(e.groupName).then(function (t) {
                    e.submitting = !1, t ? (n.isEducator() && r.currentProfile.isParent && a.log(a.events.EDU_ROSTER_CREATE_GROUP_SUCCESS, {
                        group_name: e.groupName,
                        group_count: t.length
                    }), o.hide()) : e.error = "There was an error creating your group."
                })
            }
        }
        e.$inject = ["$scope", "$document", "$mdDialog", "AccountService", "ProfileService", "params", "BigQuery"], angular.module("epicApp").controller("ClassroomCreateGroupDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o) {
            e.params = o, e.submitting = !1, e.submit = function () {
                e.submitting = !0, o.deleteGroup().then(function (o) {
                    e.submitting = !1, t.hide()
                })
            }
        }
        e.$inject = ["$scope", "$mdDialog", "params"], angular.module("epicApp").controller("ClassroomGroupDeleteDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o) {
            e.submitting = !1;
            var n = 1 != o.numSelected ? "s" : "";
            o.numSelected != o.total ? e.text = o.numSelected + " profile" + n : e.text = "all profiles", e.submit = function () {
                e.error = "", e.submitting = !0, o.removeFromGroup().then(function (o) {
                    e.submitting = !1, t.hide()
                })
            }
        }
        e.$inject = ["$scope", "$mdDialog", "params"], angular.module("epicApp").controller("ClassroomRemoveFromGroupDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n) {
            function r() {
                if (e.error = "", e.submitting = !0, !e.groupName || "" === e.groupName) return e.submitting = !1, e.groupName = "My Group", void(e.error = "Please enter a name for your classroom group.");
                n.renameGroup(e.groupName).then(function (t) {
                    e.submitting = !1, t ? o.hide() : e.error = "There was an error renaming your group."
                })
            }
            e.groupName = n.groupName || "", e.error = "", e.submitting = !1, e.$watch(function () {
                return e.groupName
            }, function (t, o) {
                e.error = ""
            }), t.bind("keydown", function (e) {
                13 === e.keyCode && r()
            }), e.$on("$destroy", function () {
                t.unbind("keydown")
            }), e.submit = r
        }
        e.$inject = ["$scope", "$document", "$mdDialog", "params"], angular.module("epicApp").controller("ClassroomRenameGroupDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            e.selectCtrl = new n, e.submitting = !1, e.title = "Assign Collection", e.loading = !0, o.getCollections(o.TYPES.REGULAR).then(function (t) {
                e.loading = !1, e.selectCtrl.initWith(Object.values(t))
            }), e.submit = function () {
                e.submitting = !0, r.assignCollections(e.selectCtrl).then(function (o) {
                    e.submitting = !1, t.hide()
                })
            }
        }
        e.$inject = ["$scope", "$mdDialog", "CollectionService", "SelectCtrl", "params"], angular.module("epicApp").controller("CollectionAssignDialogCtrl", e)
    }(),
    function () {
        function e(e) {
            return {
                restrict: "E",
                templateUrl: "md-dialog/components/dialog-select-row/dialog-select-row.html",
                scope: {
                    selectCtrl: "="
                },
                link: function (e, t, o) {}
            }
        }
        e.$inject = ["$mdDialog"], angular.module("epicApp").directive("dialogSelectRow", e)
    }(),
    function () {
        function e(e) {
            return {
                restrict: "E",
                templateUrl: "md-dialog/components/dialog-title-bar/dialog-title-bar.html",
                scope: {
                    title: "=",
                    blocking: "=?"
                },
                link: function (t, o, n) {
                    t.cancel = function () {
                        e.cancel()
                    }
                }
            }
        }
        e.$inject = ["$mdDialog"], angular.module("epicApp").directive("dialogTitleBar", e)
    }(),
    function () {
        function e(e, t, o, n) {
            function r(r) {
                r.invalidUserData.length <= 0 && r.validUserData.length + r.invalidUserData.length <= n.MAX_UPLOADS ? o.createValidChildProfiles(r.validUserData).then(function (n) {
                    e.uploadButtonIsLoading = !1, o.showSuccessfullyUploadedMdToast(n), t.hide()
                }) : (e.uploadButtonIsLoading = !1, o.showCsvErrorsDialogPromise(r))
            }

            function i(t) {
                e.uploadButtonIsLoading = !1, e.error = t
            }
            e.error = "", e.uploadButtonIsLoading = !1, e.csvURL = Globals.GLOBAL_CDN_BASE + "/website/csv-template.csv", e.maxUploads = n.MAX_UPLOADS, e.handleFileUpload = function (t) {
                e.uploadButtonIsLoading = !0, e.error = "";
                var n = o.getFileUploadAndParsePromise(t);
                return n.then(r, i), n
            }
        }
        e.$inject = ["$scope", "$mdDialog", "StudentCsvUploadService", "StudentUploadValidator"], angular.module("epicApp").controller("UploadStudentsCsvDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n) {
            var r;
            e.params = o, e.submitting = !1, e.userData = (r = o.usersData.invalidUserData, o.usersData.validUserData.concat(r).sort(function (e, t) {
                return e.row - t.row
            })), e.maxUploads = n.MAX_UPLOADS, e.cancel = function () {
                t.cancel()
            }, e.errorRowStyle = function (e) {
                if (n.isEmptyUserData(e.firstName, e.lastName, e.pin, e.email)) return "blank";
                if (!n.isValidUserData(e.firstName, e.lastName, e.pin, e.email)) return "error";
                return !1
            }
        }
        e.$inject = ["$scope", "$mdDialog", "params", "StudentUploadValidator"], angular.module("epicApp").controller("UploadStudentsCsvErrorDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o) {
            e.cdn = Globals.GLOBAL_CDN_BASE, e.close = function () {
                t.go("tap.faq"), o.hide()
            }
        }
        e.$inject = ["$scope", "$state", "$mdDialog"], angular.module("epicApp").controller("ShareWithParentsDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            e.profile = i, e.tabs = [{
                label: "activity"
            }, {
                label: "quizzes",
                condition: function () {
                    return ProfileService.currentProfile.isParent && n.isEducator()
                }
            }, {
                label: "assignments"
            }], e.cardSubViewIndex = 0, e.$watch("cardSubViewIndex", function (o, n) {
                o !== n && t.go("dashboard.profiles." + e.tabs[o].label)
            }), r.get("WebUserActivity", "getUserActivitySummaryByUserId", {
                userId: i.id
            }).then(function (t) {
                e.videosWatched = t.result.videosWatched, e.numAssignments = t.result.numAssignments, e.readTime = t.result.readTime, e.booksFinished = t.result.booksFinished
            }), e.videosWatched = 0, e.numAssignments = 0, e.readTime = 0, e.booksFinished = 0, e.close = function () {
                o.hide()
            }
        }
        e.$inject = ["$scope", "$state", "$mdDialog", "AccountService", "Data", "profile"], angular.module("epicApp").controller("ProfileActivityDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            e.profiles = n.profiles, e.close = close, e.archiveProfiles = function () {
                if (e.archiveInProgress) return;
                e.archiveInProgress = !0, n.archiveProfiles(e.profiles).then(function (t) {
                    r.log(r.events.EDU_ROSTER_ARCHIVE_STUDENT, {
                        archive_student_count: e.profiles.length
                    }), e.$close()
                })
            }, e.firstProfile = n.profiles[0], e.canArchive = e.profiles.length > 0, e.archiveInProgress = !1
        }
        e.$inject = ["$scope", "AccountService", "ProfileService", "params", "BigQuery"], angular.module("epicApp").controller("ProfileArchiveDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            e.profiles = r.profiles, e.firstProfile = r.profiles[0], e.deleteEnabled = n.childProfiles.length > 1, e.close = function () {
                t.hide()
            }, e.deleteProfiles = function () {
                r.deleteProfiles(e.profiles).then(function (r) {
                    o.isEducator() && n.currentProfile.isParent && i.log(i.events.EDU_ROSTER_DROP_STUDENT_SUCCESS, {
                        dropped_student_count: e.profiles.length
                    }), t.hide()
                })
            }
        }
        e.$inject = ["$scope", "$mdDialog", "AccountService", "ProfileService", "params", "BigQuery"], angular.module("epicApp").controller("ProfileDeleteDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n) {
            function r() {
                n.transferProfiles(e.profiles, email).then(function (e) {
                    o.hide()
                })
            }
            e.profiles = n.profiles, e.email = "", e.iconLimit = 3, e.$watch("email", function (t, o) {
                e.error = ""
            }), t.bind("keydown", function (e) {
                13 === e.keyCode && r()
            }), e.$on("$destroy", function () {
                t.unbind("keydown")
            }), e.submit = r, e.calcPos = function (e) {
                return {
                    left: 16 * e + "px"
                }
            }, e.containerWidth = function () {
                return 120 + 16 * Math.min(e.profiles.length - 1, e.iconLimit) + "px"
            }
        }
        e.$inject = ["$scope", "$document", "$mdDialog", "params"], angular.module("epicApp").controller("ProfileTransferDialogCtrl", e)
    }(), angular.module("epicApp").directive("classroomConnectConfirm", ["$timeout", "ProfileService", "ClassroomConnectService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/classroom-connect/confirm/classroom-connect-confirm.html",
            scope: !0,
            link: function (n, r, i) {
                n.ccs = o, n.profileService = t, n.confirmJoinClassroom = function () {
                    n.joinClassroomRequestPending || (n.joinClassroomRequestPending = !0, o.confirmJoinClassroom().then(function (t) {
                        e(function () {
                            n.joinClassroomRequestPending = !1
                        }, 500);
                        var r = t.result;
                        r && Array.isArray(r.UserAccountLink) && r.UserAccountLink.length > 0 ? (o.openRequestSentModal(), n.$close()) : n.joinClassroomError = "There was a problem processing your request. Please try again later."
                    }))
                }
            }
        }
    }]), angular.module("epicApp").directive("classroomConnectParentIntro", ["ClassroomConnectService", "ProfileService", function (e, t) {
        return {
            restrict: "E",
            templateUrl: "modals/classroom-connect/parent-profile-intro/parent-profile-intro.html",
            scope: !0,
            link: function (o, n, r) {
                o.ccs = e, o.profileService = t, o.close = function () {
                    o.$close({
                        connect: !0
                    })
                }
            }
        }
    }]),
    function () {
        function e(e, t) {
            return {
                restrict: "E",
                templateUrl: "modals/classroom-connect/request-sent/classroom-connect-request-sent.html",
                scope: !0,
                link: function (o, n, r) {
                    o.ccs = e, o.profileService = t
                }
            }
        }
        e.$inject = ["ClassroomConnectService", "ProfileService"], angular.module("epicApp").directive("classroomConnectRequestSent", e)
    }(), angular.module("epicApp").controller("CollectionEmailShareModalController", ["$scope", "ShareContentService", "BigQuery", "CollectionService", function (e, t, o, n) {
        e.submitting = !1, e.message = "I'd like to share this collection with you.", e.shareToEmail = function (r, i, a) {
            var l = i || "";
            e.submitting = !0, t.shareToEmail(r, l, a, function () {
                e.$close({
                    shared: !0
                })
            }).then(function () {
                e.submitting = !1
            }), n.logCollectionEvent(a.id, o.events.COLLECTION_SHARE_EMAIL_SEND)
        }
    }]), angular.module("epicApp").controller("CollectionSharedModalController", ["$scope", "$modal", "$modalInstance", "ProfileService", "Data", function (e, t, o, n, r) {
        e.teacherName = e.teacherAccount.educatorPrefix + " " + e.teacherAccount.educatorFirstName + " " + e.teacherAccount.educatorLastName, e.schoolName = e.teacherAccount.schoolName, e.schoolAddress = e.teacherAccount.cityName + ", " + e.teacherAccount.state, e.showSchool = !!e.teacherAccount.schoolName, e.showAddress = !(!e.teacherAccount.cityName && !e.teacherAccount.state), e.shareAgain = !1, e.close = function () {
            o.close()
        }
    }]), angular.module("epicApp").controller("CollectionSharedEmailModalController", ["$scope", "$modal", "$modalInstance", function (e, t, o) {
        e.close = function () {
            o.close()
        }
    }]), angular.module("epicApp").controller("CopyCollectionLinkModalController", ["$scope", "$modalInstance", "$timeout", "StringService", "CopyToClipboardService", "BigQuery", "CollectionService", function (e, t, o, n, r, i, a) {
        e.stringService = n, e.truncatedLinkLength = 40, e.link = Globals.GLOBAL_URL + "app/user-collection/" + e.collection.id, e.link.length > e.truncatedLinkLength ? e.truncatedLink = e.stringService.truncate(e.link, e.truncatedLinkLength) : e.truncatedLink = e.link, e.close = function () {
            t.close()
        }, e.copyLinkToClipboard = function (t) {
            a.logCollectionEvent(e.collection.id, i.events.COLLECTION_SHARE_COPY_LINK_COPY), r.copy(t), e.showCopied = !0, o(function () {
                e.showCopied = !1
            }, 2e3)
        }
    }]), angular.module("epicApp").controller("RecentTeacherSelectorModalController", ["$scope", "$modal", "$modalInstance", "ProfileService", "Data", "TeacherPickerService", "ShareContentService", function (e, t, o, n, r, i, a) {
        var l = function () {
            e.$close({
                shared: !0
            })
        };
        e.teachersAreSelected = function () {
            return a.teachersAreSelected(e.accounts)
        }, e.sendToSelectedTeachers = function () {
            e.$close(), a.sendToSelectedTeachers(e.accounts, e.content, l)
        }, e.openTeacherPicker = function () {
            e.$close(), a.openTeacherPicker(e.content)
        }
    }]), angular.module("epicApp").controller("ShareCollectionModalController", ["$scope", "$modalInstance", "ShareContentService", function (e, t, o) {
        e.close = function () {
            t.close()
        }, e.openTeacherPicker = function () {
            t.close(), o.openTeacherPicker(e.content)
        }
    }]), angular.module("epicApp").controller("ShareWithTeacherModalController", ["$scope", "$modal", "$modalInstance", "ProfileService", "ShareContentService", "Data", "BigQuery", "CollectionService", function (e, t, o, n, r, i, a, l) {
        e.message = "I'd like to share this collection with you.";
        var s = Object.keys(e.sharees).length;
        1 == s ? e.sharees[0].educatorPrefix ? e.shareeInfo = e.sharees[0].educatorPrefix + " " + e.sharees[0].educatorFirstName + " " + e.sharees[0].educatorLastName : e.shareeInfo = e.email : e.shareeInfo = s + " teachers", e.sendToTeacherWithMessage = function (t, o, n) {
            var i = o || "",
                s = function () {
                    e.$close({
                        shared: !0
                    })
                };
            if (e.email) {
                var c = [];
                c.push(e.email), r.emailToUsersWithMessage(c, i, n, s)
            } else r.sendToUsersWithMessage(t, i, n, s);
            l.logCollectionEvent(n.id, a.events.COLLECTION_SHARE_EPIC_TEACHER_SEND)
        }
    }]), angular.module("epicApp").directive("homeAccessIntro", ["$modal", "$rootScope", "TapService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/enable-home-access/home-access-intro/home-access-intro.html",
            scope: !0,
            link: function (n, r, i) {
                o.refereshTapStudentProfiles(), n.openInviteParents = function () {
                    var o = t.$new(!0);
                    n.$close(), e.open({
                        template: "<invite-parents-modal></invite-parents-modal>",
                        scope: o
                    })
                }
            }
        }
    }]), angular.module("epicApp").directive("inviteParentsModal", ["$modal", "Data", "ProfileService", "TapService", "StringService", "$rootScope", "SiteConstants", function (e, t, o, n, r, i, a) {
        return {
            restrict: "E",
            templateUrl: "modals/enable-home-access/invite-parents/invite-parents.html",
            scope: !0,
            link: function (o, l, s) {
                o.price = a.PRICE, o.unlinkedProfiles = n.filterProfilesByConnectionState("NOT_CONNECTED"), o.pendingProfiles = [], o.linkedProfiles = n.filterProfilesByConnectionState(["CONNECTED_IN_TRIAL", "CONNECTED_PROMOTIONAL_TRIAL"]).concat(n.filterProfilesByConnectionState("CONNECTED")), o.parentEmails = {};
                for (var c = o.unlinkedProfiles.length; c--;) o.unlinkedProfiles[c].profile.isDefault ? o.unlinkedProfiles.splice(c, 1) : o.unlinkedProfiles[c].profile.email && (o.unlinkedProfiles[c].profile.pending = !0, o.pendingProfiles.push(o.unlinkedProfiles[c]), o.unlinkedProfiles.splice(c, 1));
                for (var u = o.linkedProfiles.length; u--;) o.linkedProfiles[u].profile.linked = !0;
                o.childProfiles = o.unlinkedProfiles.concat(o.pendingProfiles).concat(o.linkedProfiles), o.areValidEmails = function () {
                    return Object.keys(o.parentEmails).length > 0
                }, o.sendToParents = function () {
                    t.get("WebEmail", "batchSendEnableHomeAccess", {
                        idsEmails: JSON.stringify(o.parentEmails)
                    }).then(function (e) {
                        e && (n.refereshTapStudentProfiles(), o.$close(), o.openInviteSuccess())
                    })
                }, o.openInviteSuccess = function () {
                    var t = i.$new(!0);
                    e.open({
                        template: "<invite-success-modal></invite-success-modal>",
                        scope: t
                    })
                }, o.validateEmail = function (e) {
                    return r.validateEmail(e.profile.email) ? (o.parentEmails[e.profile.modelId] = e.profile.email, !0) : (delete o.parentEmails[e.profile.modelId], !1)
                }, o.getIcon = function (e) {
                    return e.profile.email ? r.validateEmail(e.profile.email) ? "/assets/app/tap/green-checkmark.svg" : "/assets/app/tap/red-x.svg" : null
                }
            }
        }
    }]), angular.module("epicApp").directive("inviteSuccessModal", ["$modal", function (e) {
        return {
            restrict: "E",
            templateUrl: "modals/enable-home-access/invite-success/invite-success.html",
            scope: !0,
            link: function (e, t, o) {
                e.close = function () {
                    e.$close()
                }
            }
        }
    }]), angular.module("epicApp").directive("epicReadingClubChildIntro", ["Data", "ProfileService", "$modal", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/epic-reading-club/child-intro/epic-reading-club-child-intro.html",
            scope: !0,
            link: function (n, r, i) {
                n.connectToTeacher = function () {
                    o.open({
                        template: "<epic-reading-club-validate-parent-password></epic-reading-club-validate-parent-password>"
                    }), n.$close()
                }, n.dontShow = function () {
                    e.post("WebUserCampaign", "optOut", {
                        userId: t.currentProfile.id,
                        campaignId: n.modalData.campaignId
                    }), n.$close()
                }
            }
        }
    }]), angular.module("epicApp").directive("firstPointsModal", ["Data", "ProfileService", function (e, t) {
        return {
            restrict: "E",
            templateUrl: "modals/epic-reading-club/first-points/first-points.html",
            scope: !0,
            link: function (o, n, r) {
                o.close = function () {
                    e.get("WebUserCampaign", "optOut", {
                        userId: t.currentProfile.id,
                        campaignId: o.modalData.campaignId
                    }).then(function () {
                        o.$close()
                    })
                }
            }
        }
    }]), angular.module("epicApp").directive("epicReadingClubParentIntro", ["$modal", "Data", "ProfileService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/epic-reading-club/parent-intro/epic-reading-club-parent-intro.html",
            scope: !0,
            link: function (n, r, i) {
                n.connectToTeacher = function () {
                    e.open({
                        template: "<epic-reading-club-select-profile></epic-reading-club-select-profile>"
                    }), n.$close()
                }, n.dontShow = function () {
                    t.get("WebUserCampaign", "optOut", {
                        userId: o.currentProfile.id,
                        campaignId: n.modalData.campaignId
                    }).then(function (e) {}), n.$close()
                }
            }
        }
    }]), angular.module("epicApp").directive("epicReadingClubSelectProfile", ["Data", "ClassroomConnectService", "ProfileService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/epic-reading-club/select-profile/epic-reading-club-select-profile.html",
            scope: !0,
            link: function (e, n, r) {
                e.selectedChild = null, e.childProfiles = [], o.childProfiles.forEach(function (t) {
                    t.name = t.name.replace("+", " "), t.isAvailableForLink() || (t.linked = !0, t.isProfilePendingApproval() && (t.pending = !0)), e.childProfiles.push(t)
                }), e.isDisabled = function (e, t) {
                    if (e.linked) return !0
                }, e.setSelectedChild = function (t) {
                    if (t.linked) return !1;
                    e.selectedChild = t
                }, e.goToTeacherPicker = function () {
                    if (e.selectedChild) {
                        var o = e.selectedChild;
                        t.open(o.id, o.name, o.avatar), e.$close()
                    }
                }
            }
        }
    }]), angular.module("epicApp").directive("epicReadingClubStudentIntro", ["$modal", "Data", "ProfileService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/epic-reading-club/student-intro/epic-reading-club-student-intro.html",
            scope: !0,
            link: function (n, r, i) {
                n.askTeacher = function () {
                    n.$close(), t.get("WebUserCampaign", "messageParent", {
                        userId: o.currentProfile.id,
                        campaignId: 1
                    }).then(function (e) {}), e.open({
                        template: "<epic-reading-club-teacher-request-sent></epic-reading-club-teacher-request-sent>"
                    })
                }
            }
        }
    }]), angular.module("epicApp").directive("epicReadingClubTeacherIntro", ["$state", "Data", "ProfileService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/epic-reading-club/teacher-intro/epic-reading-club-teacher-intro.html",
            scope: !0,
            link: function (n, r, i) {
                n.enroll = function () {
                    e.go("tap.enroll"), n.$close()
                }, n.dontShow = function () {
                    t.get("WebUserCampaign", "optOut", {
                        userId: o.currentProfile.id,
                        campaignId: n.modalData.campaignId
                    }).then(function (e) {}), n.$close()
                }
            }
        }
    }]), angular.module("epicApp").directive("epicReadingClubTeacherRequestSent", function () {
        return {
            restrict: "E",
            templateUrl: "modals/epic-reading-club/teacher-request-sent/epic-reading-club-teacher-request-sent.html",
            scope: !0,
            link: function (e, t, o) {}
        }
    }), angular.module("epicApp").directive("epicReadingClubValidateParentPassword", ["Data", "ProfileService", "ClassroomConnectService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/epic-reading-club/validate-parent-password/epic-reading-club-validate-parent-password.html",
            scope: !0,
            link: function (n, r, i) {
                e.get("WebAccount", "getAccountData", {}).then(function (e) {
                    e.result && e.result.login ? n.parentEmail = e.result.login : (n.parentEmail = "parent@home.com", console.warn("Problem getting parent email."))
                }), n.submitParentPassword = function (r) {
                    r && (n.submissionInProg = !0, e.post("WebAccount", "validateParentPassword", {
                        pass: r
                    }).then(function (e) {
                        e.result && e.result.success ? (o.open(t.currentProfile.id, t.currentProfile.name, t.currentProfile.avatar), n.$close()) : (n.submissionInProg = !1, n.errorMessage = "Invalid password. Please try again.")
                    }))
                }
            }
        }
    }]), angular.module("epicApp").directive("viewMessageModal", ["$state", "StringService", "MailboxService", "$window", function (e, t, o, n) {
        return {
            restrict: "E",
            templateUrl: "modals/mailbox/message-modal/view-message-modal.html",
            scope: !0,
            link: function (r, i, a) {
                r.isSystemMessage = function (e) {
                    return o.isSystemMessage(e)
                }, r.getRouteURL = function (e) {
                    return o.getRouteURL(e)
                }, r.getTitle = function (e) {
                    return r.isSystemMessage(e) ? e.title || "Epic! Message" : "Shared With You!"
                }, r.title = r.getTitle(r.message), r.getDaysDiff = function (e) {
                    var t = Math.floor(new Date / 1e3) - e;
                    return Math.floor(t / 86400)
                }, r.getDate = function (e) {
                    var t = e.dateModified,
                        o = r.getDaysDiff(t);
                    return o ? 1 === o ? "Yesterday" : o + " Days Ago" : "Today"
                }, r.goToCollection = function (o) {
                    r.$close(), e.go("user-collection", {
                        collectionId: o.content.id,
                        collectionTitle: t.getSEOFriendlyString(o.content.title)
                    })
                }, r.goToRouteURL = function (e) {
                    n.open(e.content.url, "_blank")
                }, r.getSubheader = function (e) {
                    return o.getSubheader(e).slice(0, -1)
                }
            }
        }
    }]), angular.module("epicApp").directive("viewNotificationModal", ["$state", "StringService", "MailboxService", "Data", function (e, t, o, n) {
        return {
            restrict: "E",
            templateUrl: "modals/mailbox/notification-modal/view-notification-modal.html",
            scope: !0,
            link: function (e, t, r) {
                n.get("WebSharedContent", "scanContentActivityUsers", {
                    sharedContentId: e.message.modelId
                }).then(function (t) {
                    e.contentActivityUsers = t.result.users
                }), e.getTitle = function (e) {
                    return "copy" == e.contentType ? "Copied your collection!" : "favorite" == e.contentType ? "Favorited your collection!" : "feedback" == e.contentType ? "Liked your collection!" : "shared_content" == e.contentType ? "Shared your collection!" : void 0
                }, e.title = e.getTitle(e.message), e.getSubheader = function (e) {
                    return o.getSubheader(e).slice(0, -1)
                }, e.getDaysDiff = function (e) {
                    var t = Math.floor(new Date / 1e3) - e;
                    return Math.floor(t / 86400)
                }, e.getDate = function (t) {
                    var o = t.dateModified,
                        n = e.getDaysDiff(o);
                    return n ? 1 === n ? "Yesterday" : n + " Days Ago" : "Today"
                }, e.getMessage = function (e) {
                    var t = "";
                    return "copy" == e.contentType ? t = 1 == e.content.userCount ? e.sharerUser.journalName + " has copied " + e.content.contentTitle + "!" : e.content.userCount + " people have copied " + e.content.contentTitle + "!" : "favorite" == e.contentType ? t = 1 == e.content.userCount ? e.sharerUser.journalName + " has favorited " + e.content.contentTitle + "!" : e.content.userCount + " people have favorited " + e.content.contentTitle + "!" : "feedback" == e.contentType ? t = 1 == e.content.userCount ? e.sharerUser.journalName + " has liked " + e.content.contentTitle + "!" : e.content.userCount + " people have liked " + e.content.contentTitle + "!" : "shared_content" == e.contentType && (t = 1 == e.content.userCount ? e.sharerUser.journalName + " has shared " + e.content.contentTitle + "!" : e.content.userCount + " people have shared " + e.content.contentTitle + "!"), t
                }
            }
        }
    }]), angular.module("epicApp").directive("frameIcon", ["ProfileEditService", "Logsly", function (e, t) {
        return {
            restrict: "E",
            templateUrl: "modals/profile-edit/frame-icon/frame-icon.html",
            scope: {
                frameId: "=?",
                width: "=?",
                isLocked: "=?",
                toUnlock: "=?",
                isSelected: "=?",
                frameName: "=?"
            },
            link: function (t, o, n) {
                t.frameId = t.frameId || 1, t.width = t.width || 60, t.frameId = t.frameId || 1, t.isLocked = t.isLocked || !1, t.toUnlock = t.toUnlock || "achievement requirement isn't available", t.isSelected = t.isSelected || !1, t.frameName = t.frameName || "frame", o.css({
                    width: t.width + "px",
                    height: t.width + "px"
                });
                var r = ["1"];

                function i() {
                    return r.includes(t.frameId) ? function () {
                        var n = document.createElement("canvas");
                        n.getContext("2d"), n.width = 420, n.height = 350;
                        var r = document.createElement("canvas"),
                            i = r.getContext("2d");
                        r.width = 420, r.height = 350;
                        var a = e.getFrameImage(t.frameId);
                        a.onload = function () {
                            var n = (420 - a.width) / 2,
                                l = (350 - a.height) / 2;
                            i.shadowColor = "rgba(0, 0, 0, 0.2)", i.shadowOffsetX = 0, i.shadowOffsetY = 7, i.shadowBlur = 20, i.drawImage(a, n, l), t.isLocked && i.putImageData(e.desaturateImage(i, 420, 350), 0, 0);
                            var s = r.toDataURL();
                            o[0].getElementsByTagName("img")[0].src = s
                        }
                    }() : function () {
                        var n = document.createElement("canvas"),
                            r = n.getContext("2d");
                        n.width = 420, n.height = 350;
                        var i = e.getFrameImage(t.frameId);
                        i.onload = function () {
                            var a = (420 - i.width) / 2,
                                l = (350 - i.height) / 2;
                            r.globalCompositeOperation = "source-over", r.drawImage(i, a, l), t.isLocked && r.putImageData(e.desaturateImage(r, 420, 350), 0, 0);
                            var s = n.toDataURL();
                            o[0].getElementsByTagName("img")[0].src = s
                        }
                    }()
                }
                Array.prototype.includes || Object.defineProperty(Array.prototype, "includes", {
                    value: function (e, t) {
                        if (null === this) throw new TypeError('"this" is null or not defined');
                        var o = Object(this),
                            n = o.length >>> 0;
                        if (0 === n) return !1;
                        for (var r, i, a = 0 | t, l = Math.max(a >= 0 ? a : n - Math.abs(a), 0); l < n;) {
                            if ((r = o[l]) === (i = e) || "number" == typeof r && "number" == typeof i && isNaN(r) && isNaN(i)) return !0;
                            l++
                        }
                        return !1
                    }
                }), i(), t.$watch("frameId", function () {
                    i()
                })
            }
        }
    }]), angular.module("epicApp").directive("themeIcon", ["ProfileEditService", "Logsly", function (e, t) {
        return {
            restrict: "E",
            templateUrl: "modals/profile-edit/theme-icon/theme-icon.html",
            scope: {
                themeId: "=?",
                width: "=?",
                isLocked: "=?",
                toUnlock: "=?",
                isSelected: "=?",
                themeName: "=?"
            },
            link: function (t, o, n) {
                function r() {
                    var n = document.createElement("canvas"),
                        r = n.getContext("2d");
                    n.width = 1024, n.height = 768;
                    var i = e.getThemeImage(t.themeId);
                    i.onload = function () {
                        r.globalCompositeOperation = "source-over", r.drawImage(i, 0, 0), t.isLocked && r.putImageData(e.desaturateImage(r, 1024, 768), 0, 0);
                        var a = n.toDataURL();
                        o[0].getElementsByTagName("img")[0].src = a
                    }
                }
                t.themeId = t.themeId || 1, t.width = t.width || 60, t.isLocked = t.isLocked || !1, t.toUnlock = t.toUnlock || "achievement requirement isn't available", t.isSelected = t.isSelected || !1, t.themeName = t.themeName || "theme", o.css({
                    width: t.width + "px",
                    height: t.width + "px"
                }), r(), t.$watch("themeId", function () {
                    r()
                })
            }
        }
    }]), angular.module("epicApp").controller("QuizConfirmationController", ["EpicConfirmationService", "$scope", "$modalInstance", "$sce", function (e, t, o, n) {
        var r = e.getTitle(),
            i = e.getDescription();
        e.isOneOption() ? t.oneOption = !0 : t.oneOption = !1, t.title = r || "There are unsaved changes to your quiz!", t.text = i ? n.trustAsHtml(i) : "Are you sure you want to exit this quiz? Your answers won't be saved!", t.closeModal = function () {
            o.close()
        }, t.dismissModal = function () {
            o.dismiss()
        }
    }]), angular.module("epicApp").controller("QuizCreateDrawerController", ["$scope", "$rootScope", "Data", "QuizService", "$modal", "EpicConfirmationService", "$timeout", function (e, t, o, n, r, i, a) {
        var l, s = function (e) {
            return {
                title: "",
                correct: e || 0
            }
        };
        e.newQuestion = function () {
            return {
                title: "",
                quizQuestionChoices: [s(1), s(), s(), s()]
            }
        }, e.closeDrawer = function () {
            e.saveQuizToServer(!0), t.$broadcast("quiz.drawer", {
                openDrawer: !1
            })
        }, e.quizData = {}, e.initialized = !1, e.bookTitle = "", e.isNewQuiz = !1, e.$on("quiz.drawer", function (t, r) {
            r && r.bookTitle && (e.bookTitle = r.bookTitle), r && r.openDrawer && (n.quizData ? e.quizData = n.quizData : o.get("WebQuiz", "getQuizDataByUserIdAndBookId", {
                bookId: e.bookId
            }).then(function (t) {
                t && t.result ? (e.quizData = t.result, e.isNewQuiz = !1) : (e.quizData = {
                    quiz: {
                        book_id: e.bookId,
                        title: null,
                        description: null,
                        published: 0,
                        visibility: 1
                    },
                    quizQuestions: []
                }, e.isNewQuiz = !0), e.quizData.share = !0, e.initialized = !0
            }))
        }), e.$on("quiz.update", function (t, o) {
            o && o.quizData && (e.quizData = o.quizData, e.isNewQuiz = !1)
        }), e.$on("quiz.delete", function (e, o) {
            o && t.$broadcast("quiz.drawer", {
                openDrawer: !1
            })
        }), e.lastPosition = -1, e.lastNode = [], e.addQuestion = function () {
            e.quizData.quizQuestions.length < 20 && (e.targetQuestion = e.quizData.quizQuestions.length, e.td.step = 1)
        }, e.saveQuizToServer = function (t) {
            n.saveQuizToServer(e.quizData, t)
        }, e.deleteQuizFromServer = function () {
            e.isNewQuiz ? e.closeDrawer() : n.deleteQuizFromServer(e.quizData, !0)
        }, e.listConfig = {
            animation: 150,
            onEnd: function (t) {
                e.saveQuizToServer(!1), e.isEditMode = []
            }
        }, e.isEditMode = [], e.td = {}, e.td.step = 0, e.targetQuestion = -1, e.goIntoEditMode = function (t) {
            e.isEditMode[t] = !0
        }, e.goOutOfEditMode = function (t) {
            e.isEditMode[t] = !1
        }, e.editQuestion = function (t) {
            e.td.step = 1, e.targetQuestion = t
        }, e.previewQuiz = function () {
            $("#save-quiz-button").hasClass("disabled") || n.takeQuiz(e.bookTitle)
        }, e.publishQuiz = function () {
            $("#publish-quiz-button").hasClass("disabled") || e.quizData.quiz.id && (n.publishQuiz(e.quizData.quiz.id), t.$broadcast("quiz.drawer", {
                openDrawer: !1
            }))
        }, e.changeTitle = function () {
            l && a.cancel(l), l = a(function () {
                e.saveQuizToServer(!1)
            }, 5e3)
        }, e.changeTitleImmediately = function () {
            l && a.cancel(l), e.saveQuizToServer(!0)
        }
    }]), angular.module("epicApp").directive("quizCreateDrawer", function () {
        return {
            restrict: "E",
            templateUrl: "modals/quiz/quiz-create/quiz-create-drawer.html",
            link: function (e, t, o) {},
            controller: "QuizCreateDrawerController"
        }
    }), angular.module("epicApp").controller("QuizCreateQuestionController", ["$scope", function (e) {
        e.isNewQuestion = !1, e.$watch("td.step", function () {
            e.quizData && (e.targetQuestion >= 0 && e.quizData.quizQuestions[e.targetQuestion] ? (e.q = angular.copy(e.quizData.quizQuestions[e.targetQuestion]), e.verifyDuplicates(), e.isNewQuestion = !1) : (e.q = angular.copy(e.newQuestion()), e.hasDuplicates = !1, e.affectedDuplicate = [!1, !1, !1, !1], e.isNewQuestion = !0))
        }), e.saveQuestion = function () {
            if (!$("#save-question-button").hasClass("disabled")) {
                var o = angular.copy(e.q);
                o.quizQuestionChoices = t(o.quizQuestionChoices), e.quizData.quizQuestions[e.targetQuestion] ? e.quizData.quizQuestions[e.targetQuestion] = o : e.quizData.quizQuestions.push(o), e.saveQuizToServer(!0), e.td.step = 0
            }
        };
        var t = function (e) {
            for (var t = [], o = 0; o < e.length; o++) e[o] && e[o].title && !/^s*$/.test(e[o].title) && t.push(e[o]);
            return t
        };
        e.deleteQuestion = function (t) {
            e.isNewQuestion || (e.quizData.quizQuestions.splice(t, 1), e.saveQuizToServer(!0)), e.td.step = 0
        }, e.hasDuplicates = !1, e.affectedDuplicate = [!1, !1, !1, !1], e.verifyDuplicates = function () {
            var t = [];
            e.affectedDuplicate = [!1, !1, !1, !1];
            for (var o = 0; o < e.q.quizQuestionChoices.length; o++) e.q.quizQuestionChoices[o] && e.q.quizQuestionChoices[o].title && (t[e.q.quizQuestionChoices[o].title] ? t[e.q.quizQuestionChoices[o].title] = t[e.q.quizQuestionChoices[o].title] + 1 : t[e.q.quizQuestionChoices[o].title] = 1);
            var n = !1,
                r = null;
            for (o in t) t[o] && t[o] > 1 ? (n = n || !0, r = o) : n = n || !1;
            if (e.hasDuplicates = n, n)
                for (var i = 0; i < e.q.quizQuestionChoices.length; i++) e.q.quizQuestionChoices[i] && e.q.quizQuestionChoices[i].title && e.q.quizQuestionChoices[i].title === r && (e.affectedDuplicate[i] = !0)
        }, e.questionCheck = function () {
            e.questionProblems = [], e.q.title || e.questionProblems.push("Question cannot be blank"), e.q.quizQuestionChoices[0].title || e.questionProblems.push("Correct answer must be provided"), e.q.quizQuestionChoices[1].title || e.questionProblems.push("At least 1 incorrect answer must be provided"), e.hasDuplicates && e.questionProblems.push("Answers must be unique")
        }, e.$watch("q", e.questionCheck), e.backClicked = function () {
            e.td.step = 0
        }
    }]), angular.module("epicApp").controller("QuizCreateController", ["$scope", "$modalInstance", "Data", "QuizService", "$modal", "EpicConfirmationService", "$timeout", function (e, t, o, n, r, i, a) {
        var l, s = function (e) {
            return {
                title: "",
                correct: e || 0
            }
        };
        e.newQuestion = function () {
            return {
                title: "",
                quizQuestionChoices: [s(1), s(), s(), s()]
            }
        }, e.quizData = {}, e.initialized = !0, n.quizData ? e.quizData = n.quizData : o.get("WebQuiz", "getQuizDataByUserIdAndBookId", {
            bookId: e.bookId
        }).then(function (t) {
            t && t.result ? e.quizData = t.result : (e.quizData = {
                quiz: {
                    book_id: n.bookId,
                    title: null,
                    description: null
                },
                quizQuestions: []
            }, e.quizData.quizQuestions[0].title = "Sample Question! Click me to edit", e.quizData.quizQuestions[0].quizQuestionChoices[0].title = "Correct Answer", e.quizData.quizQuestions[0].quizQuestionChoices[1].title = "Wrong Answer"), e.quizData.share = !0, e.initialized = !0
        }), e.lastPosition = -1, e.lastNode = [], e.addQuestion = function () {
            e.quizData.quizQuestions.length < 20 && (e.targetQuestion = e.quizData.quizQuestions.length, e.td.step = 1)
        }, e.previewQuiz = function () {
            $("#save-quiz-button").hasClass("disabled")
        }, e.isQuizValid = function () {
            var t = e.quizData.quiz.title,
                o = e.quizData.quizQuestions.length;
            return !(e.quizData && e.quiz || !t || o < 1)
        }, e.saveQuizToServer = function () {
            e.isQuizValid() && o.post("WebQuiz", "createOrUpdateQuiz", {
                quizDataJSON: JSON.stringify(e.quizData)
            }).then(function (e) {})
        }, e.draggingIndex = -1, e.isMovingDown = 0, e.dragoverCallback = function (t, o, n, r) {
            if (e.draggingIndex < 0 || e.draggingIndex != o) {
                var i = angular.element(document.querySelector(".epicPlaceholder")),
                    a = parseInt(o);
                if (angular.element(document.querySelector(".move-question-animated:nth-child(" + a + ")")), e.draggingIndex < 0) {
                    var l = angular.element(document.querySelector(".dndDraggingSource"));
                    i.css("margin-top", l.prop("offsetTop"))
                }
                var s = angular.element(document.querySelector(".dndPlaceholder"));
                e.draggingIndex - 1 > e.quizData.quizQuestions.length || i.css("margin-top", s.prop("offsetTop")), e.draggingIndex = o
            }
            return !0
        }, e.onMouseDown = function (t) {
            e.lastPosition = t
        }, e.onMouseUp = function () {
            e.saveQuizToServer(), e.draggingIndex = -1
        }, e.onDrop = function (t, o, n, r, i, a) {
            return -1 != e.lastPosition && e.quizData.quizQuestions.splice(e.lastPosition, 1), e.lastPosition = -1, e.quizData.quizQuestions.splice(o, 0, n), !0
        }, e.isEditMode = [], e.td = {}, e.td.step = 0, e.targetQuestion = -1, e.goIntoEditMode = function (t) {
            e.isEditMode[t] = !0
        }, e.goOutOfEditMode = function (t) {
            e.isEditMode[t] = !1
        }, e.editQuestion = function (t) {
            e.td.step = 1, e.targetQuestion = t
        }, e.previewQuiz = function () {
            n.takeQuiz()
        }, t.result.then(function () {
            e.saveQuizToServer()
        }, function () {
            e.saveQuizToServer()
        }), e.changeTitle = function () {
            l && a.cancel(l), l = a(function () {
                e.saveQuizToServer()
            }, 5e3)
        }, e.changeTitleImmediately = function () {
            l && a.cancel(l), e.saveQuizToServer()
        }
    }]),
    function () {
        function e(e, t, o, n, r) {
            e.quizzes = [], e.showBack = !0, e.td = {}, e.td.quizIndex = 0, e.td.studentIndex = 0, e.selectedQuiz = n, e.selectedUser = r, e.formattedPercentage = t.formattedPercentage, e.formattedColor = t.formattedColor, e.selectedUser ? (e.td.studentIndex = 1, e.showBack = !1) : function () {
                if (e.users = 0, e.usersDict = {}, angular.forEach(e.selectedQuiz.user, function (t) {
                        var o = t.userQuiz;
                        e.usersDict[o.user_id] ? e.usersDict[o.user_id].userQuiz.quizDate < o.quizDate && (e.usersDict[o.user_id] = t) : (e.usersDict[o.user_id] = t, e.users++)
                    }), e.placeholder = [], e.users < 6)
                    for (var t = 0; t < 6 - e.users; t++) e.placeholder.push(!0)
            }(), e.getBookThumbURL = function (e, t) {
                return o.thumbPath(e, t)
            }, e.selectQuizIndex = function (t) {
                e.td.quizIndex = 1, e.selectedQuiz = e.quizzes[t]
            }, e.selectStudentIndexById = function (t) {
                e.td.studentIndex = 1, e.selectedUser = e.usersDict[t]
            }, e.backClicked = function () {
                1 == e.td.studentIndex ? (e.td.studentIndex = 0, e.selectedUser = null) : 1 == e.td.quizIndex && (e.td.quizIndex = 0, e.selectedQuiz = null)
            }
        }
        e.$inject = ["$scope", "QuizService", "BookService", "selectedQuiz", "selectedUser"], angular.module("epicApp").controller("QuizListController", e)
    }(),
    function () {
        function e(e, t, o) {
            e.quizzes = {}, e.td = {}, e.td.quizIndex = 0, t.get("WebQuiz", "getQuizDataForUserId", {
                userId: e.profile.id
            }).then(function (t) {
                if (t && t.result) {
                    e.quizzes = t.result.quizData, e.quizTaker = t.result.quizTaker, e.td.quizIndex = 0;
                    for (var o = 0, n = 0, r = 0; r < e.quizzes.length; r++) o += e.quizzes[r].user.userQuiz.correct, n += e.quizzes[r].user.userQuiz.total;
                    e.averageScore = Math.ceil(o / n * 100) || 0
                }
            }), e.getBookThumbURL = function (e) {
                return Globals.GLOBAL_CDN_BASE + "drm/" + e.toString().slice(-1) + "/" + e + "/cover_small.jpg"
            }, e.selectQuizIndex = function (t) {
                e.td.quizIndex = 1, e.selectedQuiz = e.quizzes[t], e.selectedUser = e.selectedQuiz.user
            }, e.formattedPercentage = o.formattedPercentage, e.formattedColor = o.formattedColor, e.backClicked = function () {
                1 == e.td.quizIndex && (e.td.quizIndex = 0, e.selectedQuiz = null)
            }
        }
        e.$inject = ["$scope", "Data", "QuizService"], angular.module("epicApp").controller("QuizListStudentController", e)
    }(), angular.module("epicApp").directive("teacherPickerFindByEmail", ["TeacherPickerService", function (e) {
        return {
            restrict: "E",
            templateUrl: "modals/teacher-picker/find-by-email/find-by-email.html",
            scope: !0,
            link: function (t, o, n) {
                t.selectTeacherByEmail = function () {
                    t.requestPending || (t.requestPending = !0, t.teacherEmailError = null, e.selectTeacherByEmail(t.teacherEmail).then(function (o) {
                        t.requestPending = !1, e.selectedTeacher || e.teacherEmail ? e.closeAndReturnSelectedTeacher() : t.teacherEmailError = "There was a problem processing your request. Please try again later."
                    }))
                }, t.disableNextButton = function () {
                    return !t.teacherEmail
                }
            }
        }
    }]), angular.module("epicApp").directive("teacherPickerFindByState", ["AccountService", "TeacherPickerService", "Logsly", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/teacher-picker/find-by-state/find-by-state.html",
            scope: !0,
            link: function (o, n, r) {
                o.accountService = e, o.selectTeacherByClassroomCode = function (e) {
                    e && 7 === e.length ? (t.initTeacherPickerData(), o.classroomCodeMessage = null, o.classroomCodeValid = !1, o.classroomCode = e, o.requestPending = !0, t.selectTeacherByClassroomCode(e).then(function (e) {
                        o.requestPending = !1, t.selectedTeacher ? (o.classroomCodeValid = !0, o.classroomCodeMessage = "Teacher found!") : o.classroomCodeMessage = "There is no classroom associated with this code."
                    })) : o.classroomCodeMessage = "Code is invalid. Classroom codes follow this pattern: abc1234"
                }, o.showNextButton = function () {
                    return (t.selectedState || o.classroomCodeValid) && !o.requestPending
                }, o.selectState = function (e) {
                    o.requestPending = !0, t.selectState(e).then(function (e) {
                        o.requestPending = !1
                    })
                }, o.goNextStep = function () {
                    t.selectedTeacher && o.classroomCode && (5 === o.classroomCode.length || 7 === o.classroomCode.length) && o.classroomCodeValid ? t.closeAndReturnSelectedTeacher() : t.nav.nextTab()
                }, o.$watch(function () {
                    return t.selectedState
                }, function (e, o) {
                    e && e !== o && t.initSearchTermData()
                })
            }
        }
    }]), angular.module("epicApp").directive("teacherPickerFindCity", ["TeacherPickerService", function (e) {
        return {
            restrict: "E",
            templateUrl: "modals/teacher-picker/find-city/find-city.html",
            scope: !0,
            link: function (t, o, n) {
                t.selectCity = function (o) {
                    t.requestPending || (t.requestPending = !0, e.selectCity(o).then(function (o) {
                        t.requestPending = !1, o ? e.nav.nextTab() : console.warn("Problem selecting city.")
                    }))
                }, t.getFilteredCityList = function () {
                    var t = e.cityList || [],
                        o = e.searchTerms.city;
                    return o ? t.filter(function (e) {
                        return e.toString().toUpperCase().indexOf(o.toUpperCase()) > -1
                    }) : t
                }, t.$watch(function () {
                    return e.selectedCity
                }, function (t, o) {
                    if (t && t !== o) {
                        var n = e.searchTerms;
                        n.school = null, n.teacher = null
                    }
                })
            }
        }
    }]), angular.module("epicApp").directive("teacherPickerFindSchool", ["TeacherPickerService", function (e) {
        return {
            restrict: "E",
            templateUrl: "modals/teacher-picker/find-school/find-school.html",
            scope: !0,
            link: function (t, o, n) {
                t.selectSchool = function (o) {
                    t.requestPending || (t.requestPending = !0, e.selectSchool(o).then(function (o) {
                        t.requestPending = !1, o ? e.nav.nextTab() : console.warn("Problem selecting school.")
                    }))
                }, t.getFilteredSchoolList = function () {
                    var t = e.schoolList || [],
                        o = e.searchTerms.school;
                    return o ? t.filter(function (e) {
                        return e.toString().toUpperCase().indexOf(o.toUpperCase()) > -1
                    }) : t
                }, t.$watch(function () {
                    return e.selectedSchool
                }, function (t, o) {
                    e.searchTerms.teacher = null
                })
            }
        }
    }]), angular.module("epicApp").directive("teacherPickerFindTeacher", ["TeacherPickerService", function (e) {
        return {
            restrict: "E",
            templateUrl: "modals/teacher-picker/find-teacher/find-teacher.html",
            scope: !0,
            link: function (t, o, n) {
                t.getFilteredTeacherList = function () {
                    var t = e.teacherList || [],
                        o = e.searchTerms.teacher;
                    return o ? t.filter(function (e) {
                        return (e.educatorFirstName + " " + e.educatorLastName).toString().toUpperCase().indexOf(o.toUpperCase()) > -1
                    }) : t
                }, t.selectTeacher = function (t) {
                    e.selectTeacher(t), e.teacherEmail = null, e.closeAndReturnSelectedTeacher()
                }
            }
        }
    }]), angular.module("epicApp").directive("epicAnimator", function () {
        return {
            restrict: "E",
            scope: {
                staticSrc: "@",
                animatedSrc: "@",
                lastSrc: "@",
                animatorId: "@"
            },
            templateUrl: "animator/animator.html",
            link: function (e, t, o) {
                var n = $(t[0].getElementsByClassName("epic-animator")[0]);
                n.attr("src", e.staticSrc), e.$on("triggerAnimation", function (t, o) {
                    e.animatorId && e.animatorId !== o.id || n.attr("src", e.animatedSrc)
                }), e.$on("stopAnimation", function (t, o) {
                    e.animatorId && o && e.animatorId !== o.id || (e.lastSrc ? n.attr("src", e.lastSrc) : n.attr("src", e.staticSrc))
                })
            }
        }
    }), angular.module("epicApp").directive("audioPlayer", ["$rootScope", "$http", "$interval", "$timeout", "Data", "ProfileService", "StringService", "BookService", "ReadToMeService", "BookOverlay", "ContentVolumeService", "LogEntryService", "BigQuery", "UserAgent", "RecommendService", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f, g) {
        return {
            restrict: "E",
            scope: !0,
            templateUrl: "audio-player/epic-audio-player.html",
            link: function (s, f, m) {
                var h = function () {
                    return Math.floor(Date.now() / 1e3)
                };
                s.player = null;
                var v = [],
                    b = {},
                    S = 0,
                    y = h(),
                    C = null,
                    E = 0;
                s.currentChapter = 0;
                var A = 0;
                s.chapterTitle = "--", s.chapterTime = a.toHHMMSS(0), s.chapterDuration = a.toHHMMSS(0), s.totalChapters = 1, s.nextChapterDisabled = !0, s.prevChapterDisabled = !0, s.sliderModel = 0, s.playerActive = !1, s.bookIsFinished = !1, s.contentVolumeService = u, s.isVolumeControlShowing = !1, s.toggleVolume = function () {
                    u.toggleMute()
                }, s.openVolumeSlider = function () {
                    s.isVolumeControlShowing = !0
                }, s.closeVolumeSlider = function () {
                    s.isVolumeControlShowing = !1
                }, r.get("WebUserBook", "logAudiobookOpened", {
                    bookId: s.bookId
                }), r.get("WebBook", "getAudiobookAudioFolderPath", {
                    bookId: s.bookId
                }).then(function (e) {
                    if (e.result) {
                        var o = Globals.GLOBAL_SECURE_CDN_BASE + e.result;
                        t.get(o).then(function (e) {
                            v = e.data, s.goToChapter(l.getCurrentPage(), l.getFarthestPageIndex())
                        })
                    } else console.warn("problem getting audio folder path data...")
                }, function (e) {
                    console.warn("request for audio folder path was rejected...")
                }), s.goToChapter = function (t, o) {
                    var l, c, u, d, f = v[t];
                    f && f.src && (s.currentChapter = t, A = f.duration, s.sliderModel = 0, s.player && s.player.destroy(), s.player = (u = f.src, d = Globals.GLOBAL_URL_CONTENT + u + "?loc=en_US&userId=" + i.currentProfile.id + "&ver=1.0&chapter=0&bookId=" + s.bookId + "&dev=web", bbb("Audio path", d), l = d, s.playerActive, (c = new Clappr.Player({
                        source: l,
                        parentId: "#player-chrome",
                        maxBufferLength: 30,
                        baseUrl: "../assets/clappr/",
                        events: {
                            onTimeUpdate: function (e) {
                                s.sliderModel = e.current / e.total * 1e3
                            },
                            onReady: function () {
                                n(k, 0)
                            },
                            onEnded: function () {
                                if (v[s.currentChapter + 1]) s.goToChapter(s.currentChapter + 1);
                                else {
                                    p.log(p.events.CONTENT_FINISH_AUDIOBOOK, {
                                        book_id: s.bookId,
                                        content_type: (s.book || {}).type,
                                        title: s.bookTitle
                                    }), r.post("WebUserBook", "logAudiobookFinished", {
                                        bookId: s.bookId
                                    });
                                    var t = {
                                        bookId: s.bookId
                                    };
                                    r.post("WebUserBook", "finishBook", t).then(function (t) {
                                        t.result && t.result.timesCompleted && (s.bookIsFinished = !0, i.currentProfile.booksFinished++, e.$broadcast("bookFinished"))
                                    }), b.progress = 100, b.finished = 1, w(), T()
                                }
                            }
                        }
                    })).core.mediaControl.setVolume(100), c), s.playerActive && (_(), y = h()), s.chapterTitle = f.title, s.chapterTime = a.toHHMMSS(s.player.getCurrentTime() || 0), s.chapterDuration = a.toHHMMSS(f.duration), s.totalChapters = v.length, s.nextChapterDisabled = !v[t + 1], s.prevChapterDisabled = !v[t - 1], o && s.shiftPlayhead(o))
                };
                var k = function () {
                        s.player.play(), s.player.isPlaying() && (s.playerActive = !0, _(), y = h())
                    },
                    T = function () {
                        s.player.pause(), s.playerActive = !1, L(), D(!0)
                    };
                s.playPause = function () {
                    s.player.isPlaying() ? T() : k(), R()
                }, s.shiftPlayhead = function (e) {
                    var t, o = s.player.getCurrentTime(),
                        n = A;
                    t = o + e < 0 ? 0 : o + e > n ? Math.floor(n) : o + e, s.player.seek(t)
                }, d.findOrCreateCurrentLogEntry(s.bookId).then(function (e) {
                    b = e
                });
                var w = function () {
                        d.updateLogEntry(b).then(function (e) {
                            e && (b = e)
                        })
                    },
                    D = function (e) {
                        var t, o, n = h(),
                            i = n - y;
                        if (E += i, (S += i) >= 10 || e) {
                            var a = S;
                            S = 0, s.bookId && a && r.post("WebUserBook", "logAudiobookProgress", {
                                bookId: s.bookId,
                                progress: a
                            });
                            var l = s.bookIsFinished && !v[s.currentChapter + 1],
                                c = {
                                    bookId: s.bookId,
                                    index: l ? 0 : s.currentChapter,
                                    farthestPageIndex: l ? 0 : parseInt(s.player.getCurrentTime()),
                                    duration: a
                                };
                            r.post("WebUserBook", "updateUserBookWithIndex", c), b && (b.progress = (t = s.player.getCurrentTime(), o = s.player.getDuration(), 1 === s.totalChapters ? parseInt(t / o * 100) : parseInt(s.currentChapter / s.totalChapters * 100)), b.time = (parseInt(b.time) || 0) + a, w())
                        }
                        y = n
                    },
                    I = angular.element(document.getElementById("audio-player-slider")),
                    P = function () {
                        if (s.player.isPlaying() && !I.hasClass("md-dragging")) {
                            var e = s.player.getCurrentTime();
                            s.chapterTime = a.toHHMMSS(e || 0), D()
                        }
                    },
                    _ = function () {
                        C || (C = o(P, 250))
                    },
                    L = function () {
                        o.cancel(C), C = null
                    };
                s.onSliderChange = function () {
                    s.player && (s.player.seek(s.sliderModel / 1e3 * s.player.getDuration()), R())
                }, s.timeUntilNext = 500, s.playNextTimer = null, s.shouldPlayNext = !0, s.$on("quiz.drawer", function (e, t) {
                    t && t.openDrawer ? s.shouldPlayNext = !1 : s.shouldPlayNext = !0
                }), s.playNextImmediately = function () {
                    c.open(g.nextBookRecommendation.id)
                }, s.startPlayNext = function () {
                    s.nextBook = g.nextBookRecommendation, s.nextBook.id && s.shouldPlayNext && (s.playNextTimer = o(function () {
                        s.shouldPlayNext && (s.timeUntilNext > 0 ? s.timeUntilNext-- : (p.log(p.events.CONTENT_AUTOPLAY_AUDIOBOOK, {
                            book_id: s.bookId,
                            content_type: (s.book || {}).type
                        }), s.playNextImmediately()))
                    }, 10))
                };
                var R = function () {
                    s.playNextTimer && (o.cancel(s.playNextTimer), s.playNextTimer = null, s.timeUntilNext = 500)
                };
                f.on("$destroy", function () {
                    s.player && s.player.destroy(), R(), L(), D(!0), p.log(p.events.CONTENT_CLOSED_AUDIOBOOK, {
                        book_id: s.bookId,
                        content_type: (s.book || {}).type,
                        chapter: s.currentChapter,
                        duration: (b || {}).time,
                        title: s.bookTitle,
                        view_duration: E,
                        src: l.bookOpenSource
                    })
                })
            }
        }
    }]), angular.module("epicApp").directive("avatarIcon", ["ProfileEditService", "Logsly", "AfterHoursService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "avatar-icon/avatar-icon.html",
            scope: {
                avatarId: "=?",
                width: "=?",
                frameId: "=?",
                isLocked: "=?",
                toUnlock: "=?",
                xpLevel: "=?",
                hasLevelInfo: "=?",
                hasSelectedInfo: "=?",
                isSelected: "=?",
                showCheck: "<?"
            },
            link: function (t, o, n) {
                t.avatarId = t.avatarId || 15, t.width = t.width || 60, t.frameId = t.frameId || 1, t.isLocked = t.isLocked || !1, t.toUnlock = t.toUnlock || "achievement requirement isn't available", t.xpLevel = t.xpLevel || 1, t.hasLevelInfo = t.hasLevelInfo || !1, t.hasSelectedInfo = t.hasSelectedInfo || !1, t.isSelected = t.isSelected || !1, t.showCheck = t.showCheck || !1, t.cdnBase = Globals.GLOBAL_CDN_BASE, o.css({
                    width: t.width + "px",
                    height: t.width + "px"
                });
                var r = t.width > 200 ? "large" : "small";
                Array.prototype.includes || Object.defineProperty(Array.prototype, "includes", {
                    value: function (e, t) {
                        if (null === this) throw new TypeError('"this" is null or not defined');
                        var o = Object(this),
                            n = o.length >>> 0;
                        if (0 === n) return !1;
                        for (var r, i, a = 0 | t, l = Math.max(a >= 0 ? a : n - Math.abs(a), 0); l < n;) {
                            if ((r = o[l]) === (i = e) || "number" == typeof r && "number" == typeof i && isNaN(r) && isNaN(i)) return !0;
                            l++
                        }
                        return !1
                    }
                }), t.frameId = t.frameId.toString();
                var i = ["1"];

                function a() {
                    return i.includes(t.frameId) ? l(!0) : l()
                }

                function l(n) {
                    var i, a;
                    "large" === r ? (i = 830, a = 700) : (i = 420, a = 350);
                    var l = document.createElement("canvas"),
                        s = l.getContext("2d");
                    if (l.width = i, l.height = a, n) {
                        var c = document.createElement("canvas"),
                            u = c.getContext("2d");
                        c.width = i, c.height = a
                    }
                    if (e.savedAvatars, e.savedAvatars[t.avatarId] && e.savedAvatars[t.avatarId][t.frameId] && e.savedAvatars[t.avatarId][t.frameId][r]) return o[0].getElementsByTagName("img")[0].src = e.savedAvatars[t.avatarId][t.frameId][r], void o.css({
                        filter: t.isLocked ? "grayscale(100%)" : "none"
                    });
                    var d = e.getAvatarImage(t.avatarId, r);
                    d.onload = function () {
                        var p = e.getFrameImage(t.frameId, r);
                        p.onload = function () {
                            var f = e.getFrameMaskImage(t.frameId, r);
                            f.onload = function () {
                                var g = (i - f.width) / 2,
                                    m = (a - f.height) / 2,
                                    h = (i - p.width) / 2,
                                    v = (a - p.height) / 2;
                                n && (u.shadowColor = "rgba(0, 0, 0, 0.2)", u.shadowOffsetX = 0, u.shadowOffsetY = 7, u.shadowBlur = 20, u.drawImage(p, h, v), u.shadowBlur = 0, u.shadowOffsetY = 0), s.drawImage(f, g, m), s.globalCompositeOperation = "source-atop", "large" === r ? s.drawImage(d, 215, 150) : s.drawImage(d, 110, 75), n ? (u.globalCompositeOperation = "source-over", u.drawImage(l, 0, 0), u.drawImage(p, h, v)) : (s.globalCompositeOperation = "source-over", s.drawImage(p, h, v));
                                var b = n ? c.toDataURL() : l.toDataURL();
                                o[0].getElementsByTagName("img")[0].src = b, e.savedAvatars.hasOwnProperty(t.avatarId) || (e.savedAvatars[t.avatarId] = {}), e.savedAvatars[t.avatarId].hasOwnProperty(t.frameId) || (e.savedAvatars[t.avatarId][t.frameId] = {}), e.savedAvatars[t.avatarId][t.frameId][r] = b, e.setAvatarsToStorage(), o.css({
                                    filter: t.isLocked ? "grayscale(100%)" : "none"
                                })
                            }
                        }
                    }
                }
                a(), t.$watchGroup(["avatarId", "frameId"], function () {
                    a()
                })
            }
        }
    }]), angular.module("epicApp").directive("bdayForm", function () {
        return {
            restrict: "E",
            templateUrl: "bday-form/bday-form.html",
            scope: {
                day: "=",
                width: "@"
            },
            link: function (e, t, o) {
                for (var n = document.getElementsByClassName("bday-form-container"), r = 0; r < n.length; r++) n[r].style.width = e.width + "px";
                e.monthsList = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                var i = [],
                    a = (new Date).getFullYear(),
                    l = a - 18;
                for (r = a; r >= l; r--) i.push(r);
                e.yearsList = i, e.yearAutofill = function () {
                    e.searchTextYear && e.day.year || (e.searchTextYear = "20")
                }, e.setBirthdayYear = function (t) {
                    e.day.year = t
                }, e.setBirthdayMonth = function (t) {
                    e.day.month = t
                }, e.querySearch = function (e) {}
            }
        }
    }), angular.module("epicApp").directive("bookHeader", ["$rootScope", "$timeout", "$modal", "$window", "$document", "ProfileService", "BookService", "BookOverlay", "ReadToMeService", "StringService", "VideoService", "ContentVolumeService", "MagicPanService", "BigQuery", "ABTestService", "CollectionService", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m) {
        return {
            restrict: "E",
            scope: !0,
            templateUrl: "book-header/book-header.html",
            link: function (m, h, v) {
                function b() {
                    var e = r[0].getElementById("readtome-button-container"),
                        t = e.offsetLeft;
                    m.rtmTooltipLeftPosition = {}, t < 130 && (m.rtmTooltipLeftPosition = {
                        left: "".concat(e.offsetLeft + 8, "px"),
                        right: "auto"
                    })
                }
                m.profile = i.currentProfile, m.bookService = a, m.bookOverlay = l, m.readToMeService = s, m.stringService = c, m.magicPanService = p, m.abTestService = g, m.maxBookTitleLength = 50, m.maxBookSubheadLength = 60, m.iconsSrc = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/system-icons/", m.cdnUrl = Globals.GLOBAL_CDN_BASE, m.volumeOn = m.iconsSrc + "icn-audio-volume-blue.svg", m.volumeOff = m.iconsSrc + "icn-audio-mute-blue.svg", m.contentVolumeService = d, m.isVolumeControlShowing = !1, l.openBookHeaderAndFooter(null, !1), m.$watch(function () {
                    return a.bookDataIsReady
                }, function (e, o) {
                    !e || (a.isReadToMe() && (l.initRtmTooltip(), l.shouldShowRtmTooltip() && (angular.element(n).on("resize", b), t(b, 0))), a.isReadToMe() && l.isShowingTooltip()) || t(function () {
                        l.closeBookHeaderAndFooter()
                    }.bind(l), 2e3)
                }), m.toggleVolume = function () {
                    d.toggleMute()
                }, m.openVolumeSlider = function () {
                    m.isVolumeControlShowing = !0
                }, m.closeVolumeSlider = function () {
                    m.isVolumeControlShowing = !1
                }, m.isZoomControlShowing = !1, m.openZoomSlider = function () {
                    m.isZoomControlShowing = !0
                }, m.closeZoomSlider = function () {
                    m.isZoomControlShowing = !1
                }, m.toggleZoom = function () {
                    var e = p.zoomLevel;
                    e < 1.5 ? p.updateZoomLevel(1.5) : e < 2 ? p.updateZoomLevel(2) : p.updateZoomLevel(1)
                };
                var S = null;

                function y() {
                    var e = document.documentElement;
                    document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement ? (document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen && document.msExitFullscreen(), E("mini")) : (e.requestFullscreen ? e.requestFullscreen() : e.webkitRequestFullscreen ? e.webkitRequestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.msRequestFullscreen && e.msRequestFullscreen(), E("full"))
                }

                function C() {
                    m.fullscreen = !m.fullscreen, a.isFullScreen = m.fullscreen, l.isFullscreen = m.fullscreen, l.closeBookHeaderAndFooter()
                }
                m.displayCopyright = function () {
                    var t = e.$new(!0);
                    S = o.open({
                        template: "<book-copyright-modal></book-copyright-modal>",
                        scope: t
                    })
                }, m.toggleFullscreen = y, m.fullscreen = !!(document.fullscreen || document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement), m.headerLinks = [{
                    label: "Community",
                    icon: "icn-community-blue",
                    method: m.clickActivity,
                    condition: function () {
                        return !0
                    }
                }, {
                    label: "Recommend",
                    icon: "icn-share-blue",
                    method: m.displayRecommendModal
                }, {
                    label: "Copyright",
                    icon: "icn-copyright-blue",
                    method: m.displayCopyright,
                    condition: function () {
                        if (m.book && m.book.type) {
                            var e = m.book.type;
                            return !(2 === e || 4 === e)
                        }
                        return !0
                    }
                }], m.favoriteLink = {
                    label: "Favorite",
                    getIcon: function () {
                        return a.bookData && a.favorites[a.bookData.book.id] ? "icn-favorite-on-red.svg" : "icn-favorite.svg"
                    },
                    method: m.startFavorite
                }, m.quizLinks = [{
                    label: null,
                    fLabel: function () {
                        return m.quiz ? "Edit Quiz" : "Create Quiz"
                    },
                    icon: "editquiz-icon-small",
                    method: m.createQuiz,
                    condition: function () {
                        return "teacher" === m.profile.userType
                    }
                }, {
                    label: null,
                    fLabel: function () {
                        return "Take Quiz!"
                    },
                    icon: "quiz-icon",
                    method: m.takeQuiz,
                    condition: function () {
                        return m.quiz && m.quiz.quizQuestions.length > 0
                    }
                }];
                var E = function (e) {
                    var t = {
                            content_type: k(a.bookData.book.type),
                            book_id: a.bookData.book.id,
                            src: a.bookOpenSource
                        },
                        o = "full" === e ? f.events.CONTENT_FULL_SCREEN_IN : f.events.CONTENT_FULL_SCREEN_OUT;
                    f.log(o, t)
                };
                m.onSliderChange = function () {
                    e.$broadcast("epicFlipBook.pageReset")
                }, m.specialClick = function (e, t) {
                    m.quiz && m.quiz.quizQuestions.length && "teacher" === m.profile.userType ? e(t) : "teacher" === m.profile.userType ? m.createQuiz() : m.takeQuiz()
                }, m.clickSingleQuizFunction = function () {
                    "teacher" === m.profile.userType ? m.createQuiz() : m.takeQuiz()
                }, m.quizIsVisible = function () {
                    return m.quiz && m.quiz.quiz.published || "teacher" === i.currentProfile.userType
                }, m.$on("quiz.update", function (e, t) {
                    t && t.quizData && t.quizData.quiz ? (t.quizData.quiz.published ? (m.showQuizDot = !1, m.isDraftQuiz = !1) : (m.showQuizDot = !0, m.isDraftQuiz = !0), m.quiz = t.quizData) : (m.showQuizDot = !0, m.isDraftQuiz = !1)
                }), m.$on("quiz.delete", function (e, t) {
                    t && (m.quiz = null)
                });
                var A = {
                        1: "book",
                        2: "audiobook",
                        4: "video"
                    },
                    k = function (e) {
                        return A[e]
                    };
                m.getPinterestLinkUrl = function () {
                    var e = m.book;
                    return e ? Globals.GLOBAL_URL + k(e.type) + "/" + a.getObfuscatedBookId(e.id) + "/" + c.getSEOFriendlyString(e.title) : null
                }, m.getPinterestImageUrl = function () {
                    var e = m.book;
                    return e ? Globals.GLOBAL_CDN_BASE + "drm/" + e.id.toString().slice(-1) + "/" + e.id + "/cover_large.jpg" : null
                }, m.handleTogglePlayPause = function () {
                    var e = m.readToMeService.isPlaying ? f.events.CONTENT_READTOME_PAUSE : f.events.CONTENT_READTOME_PLAY,
                        t = {
                            content_type: A[1],
                            content_id: Number(m.bookService.bookData.book.modelId)
                        };
                    f.log(e, t), m.readToMeService.togglePlayPause()
                }, m.pinterestText = "Epic! - Books for Kids. Read FREE for 30 Days!", m.$on("$mdMenuOpen", function (e, t) {
                    l.bookHeaderMenuIsOpen = !0, l.openBookHeaderAndFooter(e, !1)
                }), m.$on("$mdMenuClose", function (e, t) {
                    l.bookHeaderMenuIsOpen = !1, l.closeBookHeaderAndFooter()
                }), m.close = function () {
                    m.fullscreen && y(), l.close(), u.resetPlayCount()
                }, m.logClose = function () {
                    e.$broadcast("clickOnBookFinish", {
                        click_type: "close"
                    })
                }, m.$on("$destroy", function () {
                    S && S.close(), m.fullscreen && y(), document.removeEventListener("fullscreenchange", C), document.removeEventListener("webkitfullscreenchange", C), document.removeEventListener("mozfullscreenchange", C), document.removeEventListener("MSFullscreenChange", C), angular.element(n).off("resize", b), l.closeRtmTooltip()
                }), document.addEventListener("fullscreenchange", C), document.addEventListener("webkitfullscreenchange", C), document.addEventListener("mozfullscreenchange", C), document.addEventListener("MSFullscreenChange", C)
            }
        }
    }]), angular.module("epicApp").directive("bookOverlay", function () {
        return {
            restrict: "E",
            scope: {
                bookId: "=",
                openQuizDrawer: "="
            },
            templateUrl: "book-overlay/book-overlay.html",
            controller: ["$scope", "$rootScope", "$document", "$timeout", "$modal", "$mdMedia", "$window", "$location", "Data", "SubscriptionService", "Logsly", "BookOverlay", "ProfileService", "BookService", "QuizService", "FavoriteService", "ReadUrlService", "BigQuery", "AccountService", "InactiveBookModal", "MagicPanService", "ContentVolumeService", "CollectionService", "RecommendService", "ABTestService", "$state", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h, v, b, S, y, C, E, A, k, T) {
                e.pageUrls = [], e.bgColor = "#ffffff", e.copyright = "", e.loadingCopyrightPage = !1, e.showLoader = !0, e.logData = null, e.showQuizDrawer = !1, e.isQuizOpen = !1, e.quizDrawerWidth = 0, e.isFullscreen = !1, e.bookService = f, e.media = i, c.checkSubscriptionStatus(), h.goToReadState("read", {
                    bookId: e.bookId
                }), e.$on("$stateChangeStart", function (e, t, o) {
                    e.preventDefault(), d.close().then(function () {
                        T.go(t, o)
                    })
                }), document.getElementById("epic-app-content-container").style.visibility = "hidden", e.getAudiobookThumb = function () {
                    return f.thumbPath(e.bookId, "large", "png")
                }, f.fetchBookData(e.bookId).then(function (t) {
                    if (!t.result) return console.warn("Problem getting book data..."), void d.close();
                    var o = t.result.publisherData.educationalEnabled;
                    if (b.isEducator() && !o) return d.close(), void S.show(e.bookId);
                    var n = t.result.epub;
                    if (n) {
                        var r, i = [],
                            s = n.spine,
                            c = s.length + 1;
                        for (r = 0; r < s.length; r++) {
                            var u = s[r].page,
                                p = s[r].audio;
                            i.push({
                                url: Globals.GLOBAL_SECURE_CDN_BASE + u,
                                audio: Globals.GLOBAL_SECURE_CDN_BASE + p,
                                index: r
                            })
                        }
                        i.splice(0, 0, "info");
                        var m = [],
                            h = !0;
                        for (r = 0; r < c; r += 2) {
                            var E = i.slice(r, r + 2);
                            null === E[1] && (E[1] = "recommended", h = !1), m.push(E)
                        }
                        h && m.push(["null", "recommended"]), e.pageUrls = m, e.bgColor = n.extra.color, e.copyright = Globals.GLOBAL_SECURE_CDN_BASE + n.extra.copyright
                    }
                    var k = t.result.recommendedBooks;
                    k && (e.recommendedBooks = k.slice(0, 10)), e.timePerPage = t.result.timePerPage;
                    var T = t.result.book;
                    e.book = T, e.book.id = e.bookId, e.bookTitle = T.title, e.bookDescription = T.bookDescription, e.communityRating = Math.round(T.rating / 20);
                    var w = Math.ceil(T.duration / 60);
                    w > 60 ? (w = Math.ceil(10 * w / 60) / 10, e.formattedDuration = w + " Hrs") : e.formattedDuration = w + " Min";
                    var D = T.author,
                        I = T.illustrator;
                    e.authorString = "By " + D, null !== I && "" !== I && " " != I && (e.authorString += " | Illustrated by " + I), e.publisherString = "Provided by " + T.publisher, e.stats = [], e.readingAge = T.age, e.readingAgeStr = e.readingAge - 1 + "-" + (e.readingAge + 1), e.stats.push({
                        title: "Age",
                        value: e.readingAgeStr
                    }), e.avgTime = T.avgTime, e.stats.push({
                        title: "Reading Time",
                        value: e.avgTime
                    }), e.arLevel = T.ar, e.arLevel && "-" != e.arLevel && e.stats.push({
                        title: "AR Level",
                        value: e.arLevel
                    }), e.lexile = T.lexile, e.lexile && "-" != e.lexile && e.stats.push({
                        title: "Lexile ® Measure",
                        value: e.lexile
                    });
                    var P, _ = t.result.userBook;
                    e.favorited = _.favorited, e.rated = _.rated, e.rating = _.rating, e.currentReadTime = 0, e.showLoader = !1, e.quiz = t.result.quiz, g.setQuiz(t.result.quiz), e.initialized = !0, e.openQuizDrawer && e.createQuiz(), C.isLoaded() || C.initValues(), e.bookService.advanceCurrentBookSource();
                    var L = {
                        book_id: T.id,
                        content_type: T.type,
                        title: T.title,
                        mode: f.getIsFullScreen() ? "fullscreen" : "mini",
                        zoom: y.zoomLevel > 1 ? "yes" : "no",
                        src: e.bookService.bookOpenSource
                    };
                    switch (T.type) {
                        case 1:
                            1 == T.audio ? (P = v.events.CONTENT_OPENED_BOOK_R2ME, L.highlight = f.getHighlightMode(), bbb("opening r2me book:", L)) : P = v.events.CONTENT_OPENED_BOOK;
                            break;
                        case 2:
                            P = v.events.CONTENT_OPENED_AUDIOBOOK;
                            break;
                        case 4:
                            P = v.events.CONTENT_OPENED_VIDEO
                    }
                    v.log(P, L), d.rearrangeOrInjectBookIntoContinueReadingRow({
                        active: T.active,
                        audio: T.audio,
                        modelId: T.modelId,
                        progress: 0,
                        title: T.title,
                        type: T.type
                    }), a.ga && (bbb("pageview", l.url()), a.ga("send", "pageview", {
                        page: l.url()
                    })), 4 === T.type ? A.getRecommendedBookDataWithNext(T.id, 4) : 2 === T.type ? A.getRecommendedBookDataWithNext(T.id) : A.getRecommendedBookData(T.id)
                }), e.clickFav = function () {
                    var t = f.favorites[e.bookId] ? 0 : 1;
                    1 == t && u.track("book_favorited", "engagement"), m.toggleContentFavorite(e.bookId, e.bookTitle, t, e.book.type, !1, e.bookService.bookOpenSource)
                }, e.startFavorite = function () {
                    f.eduAssigningVariant !== k.EDU_ASSIGNING_CONTROL ? (f.favorites[e.bookId] || u.track("book_favorited", "engagement"), E.displaySaveContentModal(f.bookData.book, "content_header")) : e.clickFav()
                }, e.startAssign = function () {
                    E.startAssignContentFlow(f.bookData.book, "content_header")
                }, e.ratings = [1, 2, 3, 4, 5], e.clickRate = function (t) {
                    t == e.rating ? (e.rating = 0, e.rated = 0) : (e.rating = t, e.rated = 1), 1 == e.rated && u.track("book_rated", "engagement", e.bookId, e.rating), s.get("WebUserBook", "rateBook", {
                        bookId: e.bookId,
                        val: 20 * e.rating
                    })
                };
                var w = null;
                e.clickActivity = function () {
                    s.get("WebCommunity", "getRecentActivityForBook", {
                        bookId: e.book.id
                    }).then(function (t) {
                        e.activites = t.result, w = r.open({
                            templateUrl: "modals/activity-overlay/activity-overlay.html",
                            scope: e
                        })
                    })
                }, e.createQuiz = function () {
                    p.currentProfile.isParent && g.createQuiz(e.book.title)
                }, e.takeQuiz = function () {
                    g.takeQuiz(e.book.title)
                }, e.$on("quiz.drawer", function (o, r) {
                    r && r.openDrawer ? (e.showQuizDrawer = !0, t.$broadcast("epicFlipBook.resizeFromQuiz", this), n(function () {
                        e.dragHandler({
                            clientX: $(".quiz-body").width(),
                            initialize: !0
                        })
                    }, 50)) : ($(".epicBar").css("left", ""), $(".quiz-drawer-open").css("width", ""), $(".elements-drawer-open").css("width", "", "important"), e.showQuizDrawer = !1, d.setQuizDrawerWidth(0), t.$broadcast("epicFlipBook.resizeFromQuiz", this))
                }), e.$on("quiz.taking", function (t, o) {
                    e.isQuizOpen = o && o.isQuizOpen
                }), e.drag = {}, e.drag.isDrag = !1, e.dragHandler = function (o) {
                    var n = o.clientX,
                        r = n / parseInt($(window).width()) * 100;
                    if ((o.initialize || e.drag.isDrag) && r > 25 && r < 50) {
                        $(".epicBar").css("left", n);
                        var i = 100 - r;
                        $(".quiz-drawer-open").css("width", r + "%"), $(".elements-drawer-open").css("width", i + "%", "important"), d.setQuizDrawerWidth(n), t.$broadcast("epicFlipBook.resizeFromQuiz", this)
                    }
                }, e.barDown = function (t) {
                    e.drag.isDrag = !0
                }, e.barUp = function (t) {
                    e.drag.isDrag = !1
                }, e.displayRecommendModal = function () {
                    if (e.book) {
                        var t = e.$new(!0);
                        t.book = e.book, r.open({
                            template: "<book-social-recommend></book-social-recommend>",
                            scope: t
                        }).result.then(function (t) {
                            if ("email" === t) {
                                var o = e.$new(!0);
                                o.book = e.book, r.open({
                                    template: "<book-email-recommend></book-email-recommend>",
                                    scope: o,
                                    size: "lg"
                                })
                            }
                        })
                    }
                }, e.displayCollectionPinterestAskModal = function (t) {
                    var o = e.$new(!0);
                    o.collection = t, r.open({
                        template: "<collection-pinterest-ask></collection-pinterest-ask>",
                        scope: o,
                        size: "sm"
                    })
                }, e.displayAddBookToCollectionModal = function () {
                    if (e.book) {
                        var t = [{
                            id: e.book.id,
                            title: e.book.title
                        }];
                        E.displayAddBookToCollectionModal(t), v.log(v.events.COLLECTION_START_CONTENT, {
                            book_id: e.book.id
                        })
                    }
                }, e.onMouseClick = function (e) {}, e.closeModal = function () {
                    w && w.close()
                };
                var D = function (e) {
                    27 === e.keyCode && d.close()
                };
                o.on("keydown", D), e.$on("$destroy", function () {
                    document.getElementById("epic-app-content-container").style.visibility = "", h.leaveReadState(), o.off("keydown", D)
                })
            }]
        }
    }), angular.module("epicApp").directive("magicPan", ["$rootScope", "$document", "BookOverlay", "BookService", "MagicPanService", "Logsly", function (e, t, o, n, r, i) {
        return {
            restrict: "E",
            scope: !0,
            transclude: !0,
            templateUrl: "book-pan/magic-pan.html",
            link: function (i, a, l) {
                var s = a.find(".magic-pan-frame"),
                    c = a.find(".magic-pan-element"),
                    u = a.find(".magic-zoom-element"),
                    d = c.get(0),
                    p = u.get(0);
                i.currentZoom = 1, r.updateZoomLevel(i.currentZoom);
                var f = r.maxZoom,
                    g = {
                        x: 0,
                        y: 0
                    },
                    m = {
                        x: 0,
                        y: 0
                    };
                i.onMouseDown = function (e) {
                    g = {
                        x: e.pageX,
                        y: e.pageY
                    }, t.on("mousemove", i.onMouseMove), t.on("mouseup", i.onMouseUp)
                }, i.onMouseUp = function (e) {
                    t.off("mousemove", i.onMouseMove), t.off("mouseup", i.onMouseUp)
                }, i.onMouseMove = function (e) {
                    e.preventDefault(), e.stopPropagation();
                    var t = $("#epic-flip-book-wrapper"),
                        o = t.width() * i.currentZoom,
                        n = .3 * (o - s.width()),
                        r = .3 * (s.width() - o);
                    o > s.width() && (m.x += (e.pageX - g.x) / i.currentZoom, m.x > n ? m.x = n : m.x < r && (m.x = r));
                    var a = t.height() * i.currentZoom,
                        l = .5 * (a - s.height()),
                        c = .5 * (s.height() - a);
                    a > s.height() && (m.y += (e.pageY - g.y) / i.currentZoom, m.y > l ? m.y = l : m.y < c && (m.y = c)), g = {
                        x: e.pageX,
                        y: e.pageY
                    }, v()
                }, i.onMouseWheel = function (e, t, o, n) {
                    if (i.currentZoom > 1) {
                        o /= 2, n /= 2;
                        var r = $("#epic-flip-book-wrapper");
                        if (Math.abs(n) < Math.abs(o)) {
                            var a = r.width() * i.currentZoom,
                                l = .3 * (a - s.width()),
                                c = .3 * (s.width() - a);
                            a > s.width() && (m.x -= o, m.x > l ? m.x = l : m.x < c && (m.x = c)), g = {
                                x: g.x - o,
                                y: e.pageY
                            }
                        } else {
                            var u = r.height() * i.currentZoom,
                                d = .5 * (u - s.height()),
                                p = .5 * (s.height() - u);
                            u > s.height() && (m.y += n, m.y > d ? m.y = d : m.y < p && (m.y = p)), g = {
                                x: e.pageX,
                                y: g.y + n
                            }
                        }
                        v()
                    }
                }, i.onMouseClick = function (e) {
                    $(e.toElement).hasClass("magic-pan-element") && o.close()
                }, i.$on("magicpan.disable.key", function (e, t) {
                    $("#flipRoot").trigger("mobileflip.disableKeyEvents")
                }), i.$on("magicpan.enable.key", function (e, t) {
                    $("#flipRoot").trigger("mobileflip.enableKeyEvents")
                });
                var h = function (e) {
                        if ((e = Math.min(f, Math.max(1, e))) != i.currentZoom) {
                            e < i.currentZoom && (m.x = 0, m.y = 0);
                            var t = $("#flipRoot");
                            1 == e ? t.trigger("mobileflip.enableMouseEvents") : t.trigger("mobileflip.disableMouseEvents"), i.currentZoom = e, r.updateZoomLevel(i.currentZoom, n.bookData.book.id, n.bookOpenSource), v()
                        }
                    },
                    v = function () {
                        var e = "scale(" + i.currentZoom + ")";
                        p.style.msTransformOrigin = "50% 50%", p.style.msTransform = e, p.style.transformOrigin = "50% 50%", p.style.transform = e, p.style.webkitTransformOrigin = "50% 50%", p.style.webkitTransform = e;
                        var t = "translate3d(" + m.x + "px, " + m.y + "px, 0)";
                        d.style.transform = t, d.style.msTransform = t, d.style.webkitTransform = t, d.style.mozTransform = t
                    };
                i.zoomIn = function (e) {
                    var t = i.$parent.bookService.getBookId();
                    n.logFirstZoom(t), h(i.currentZoom + (e || .25))
                }, i.zoomOut = function (e) {
                    h(i.currentZoom - (e || .25))
                }, i.next = function () {
                    e.$broadcast("epicFlipBook.flipForward")
                }, i.prev = function () {
                    e.$broadcast("epicFlipBook.flipBackward")
                }, i.$watch(function () {
                    return r.zoomLevel
                }, function (e) {
                    h(e)
                })
            }
        }
    }]), angular.module("epicApp").factory("MagicPanService", ["BigQuery", function (e) {
        var t = {
                zoomLevel: 1,
                maxZoom: 2,
                acceptableZoomLevelToFlip: 1
            },
            o = !0,
            n = null,
            r = null;
        return t.updateZoomLevel = function (i, a, l) {
            o && (r = t.zoomLevel, o = !1), n && window.clearTimeout(n), n = setTimeout(function () {
                if (r !== i) {
                    var t = r < i ? e.events.CONTENT_ZOOM_IN : e.events.CONTENT_ZOOM_OUT;
                    o = !0;
                    var n = {
                        content_type: "book"
                    };
                    n.book_id = a, l && (n.src = l), e.log(t, n)
                }
            }, 1e3), t.zoomLevel = i
        }, t.zoomIn = function (e) {
            t.zoomLevel = Math.min(t.zoomLevel + e, 2)
        }, t.zoomOut = function (e) {
            t.zoomLevel = Math.max(t.zoomLevel - e, 1)
        }, t
    }]),
    function () {
        angular.module("epicApp").directive("bookShareButtons", function () {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    bookData: "<"
                },
                templateUrl: "book-share-buttons/book-share-buttons.html",
                controller: ["FavoriteService", "CollectionService", function (e, t) {
                    var o = this;
                    this.cdnUrl = Globals.GLOBAL_CDN_BASE, this.favoriteService = e, this.collectionService = t, this.favorites = {}, this.isLoaded = !1, this.$onInit = function () {
                        o.bookData.id = o.bookData.id || parseInt(o.bookData.modelId), e.getFavorites().then(function (e) {
                            o.favorites = e.books ? e.books : {}, o.isLoaded = !0
                        })
                    }, this.toggleFavorite = function () {
                        t.displaySaveContentModal(o.bookData, "explore")
                    }
                }],
                controllerAs: "ctrl"
            }
        })
    }(),
    function () {
        function e(e, t, o, n, r, a, l, s) {
            return {
                restrict: "E",
                scope: {},
                templateUrl: "browse-filter/epic-browse-filter.html",
                link: {},
                controller: ["$scope", function (c) {
                    n.getCurrentProfile(), o.updateAccountData();
                    var u = this;

                    function d() {
                        if (o.isEducator()) s.$watch(function () {
                            return t.browseData.section
                        }, function (o, n) {
                            if (o.name && n.name && o.name !== n.name)
                                if (u.selectedTab = t.browseData.section.name, u.readingLevels = t.browseData.sections[1].readingLevels ? t.browseData.sections[1].readingLevels.values : [], u.readingLevelsMap = u.readingLevels.length > 0 ? u.readingLevelsMap = u.readingLevels.map(function (e) {
                                        return e.name
                                    }) : [], u.ebfGradeLevel && u.currentAge !== u.ebfGradeLevel.age && e.get("WebUser", "setUserPreferences", {
                                        preferences: {
                                            age: u.ebfGradeLevel.age
                                        }
                                    }), u.ebfReadingLevel && u.ebfReadingLevel.rs === u.selectedTab) {
                                    var r = u.ebfReadingLevel.rl;
                                    u.selectedReadingLevel = r
                                } else u.isCurrentTabReadingLevel() && t.browseData && t.browseData.rows.length > 0 && (u.selectedReadingLevel.name = g(), u.selectedReadingLevelName = g())
                        });
                        document.addEventListener("click", p)
                    }

                    function p() {
                        var e = document.querySelector(".browse-filter-dropdown-menu"),
                            t = document.querySelector(".dropdown-arrow");
                        e && (e.style.display = "none", t && (t.classList.add("inactive"), t.classList.remove("active")))
                    }

                    function f() {
                        var e = t.browseData.section.name;
                        return "Reading Level" === e && (e = "AR"), e
                    }

                    function g() {
                        var e = t.browseData.sections[1].readingLevels.default,
                            o = t.browseData.sections[1].readingLevels.values;
                        for (i = 0; i < o.length; i++)
                            if (o[i].id === e) return o[i].name
                    }
                    u.gradeLevels = ["Pre-K", "Kinder", "1st Grade", "2nd Grade", "3rd Grade", "4th Grade", "5th Grade", "6th Grade", "7th Grade+"], u.mappedGradeLevels = {
                        "-1": "Pre-K",
                        0: "Kinder",
                        1: "1st Grade",
                        2: "2nd Grade",
                        3: "3rd Grade",
                        4: "4th Grade",
                        5: "5th Grade",
                        6: "6th Grade",
                        7: "7th Grade+"
                    }, u.ebfReadingLevel = a.get("ebf-rl-".concat(n.currentProfile.id)), u.ebfGradeLevel = a.get("ebf-info-".concat(n.currentProfile.id)), u.readingLevels = [], this.AccountService = o, this.BrowseService = t, u.updateContent = function (e) {
                        var o = u.readingLevelsMap.indexOf(e),
                            i = u.readingLevels[o],
                            l = document.querySelector(".browse-filter-dropdown-menu");
                        l && (l.style.display = "none");
                        var s = t.browseData.section.name;
                        u.selectedReadingLevel = i;
                        var c = t.browseData.section.readingLevels.model,
                            d = {
                                level: {}
                            };
                        d.level[c] = [parseInt(i.id)], d.sectionId = 12, d.method = "getContentRowsForSection", d.name = "readingLevel", a.set("ebf-rl-".concat(n.currentProfile.id), {
                            rl: i,
                            rs: s
                        }), delete t.browseData.sectionAndRowData[12], t.loadContentRows(d).then(function () {
                            var e = {};
                            e.tab = t.browseData.section.name, e.reading_level_system = s, e.selected_range = i.name, r.log(r.events.EXPLORE_BY_RL_CHANGE, e)
                        })
                    }, u.init = d, u.getCurrentBooksCount = function () {
                        return t.browseData.section.booksCount
                    }, u.getCurrentTabName = f, u.isCurrentTabReadingLevel = function () {
                        switch (t.browseData.section.name) {
                            case "Reading Level":
                            case "AR":
                            case "Lexile":
                            case "DRA":
                            case "F&P":
                            case "GRL":
                            case "undecided":
                                return !0;
                            default:
                                return !1
                        }
                    }, u.isHidden = function () {
                        switch (t.browseData.section.name) {
                            case "Chinese":
                            case "Spanish":
                            case "French":
                            case "Sports":
                            case "Science":
                            case "History":
                            case "Adventure":
                            case "Learning":
                            case "Funny":
                            case "World":
                            case "Daily Life":
                            case "Fantasy":
                            case "Wildlife":
                                return !0;
                            default:
                                return !1
                        }
                    }, u.changeReadingLevelPreferences = function (o) {
                        var i = document.querySelector(".browse-filter-dropdown-menu"),
                            l = document.querySelector(".dropdown-arrow");
                        i && (i.style.display = "none", l.classList.remove("active"), l.classList.add("inactive"));
                        u.newAge = {
                            "Pre-K": 4,
                            Kinder: 5,
                            "1st Grade": 6,
                            "2nd Grade": 7,
                            "3rd Grade": 8,
                            "4th Grade": 9,
                            "5th Grade": 10,
                            "6th Grade": 11,
                            "7th Grade+": 12
                        } [o], a.set("ebf-info-".concat(n.currentProfile.id), {
                            age: u.newAge,
                            grade: u.selectedGrade
                        }), t.browseData.sectionAndRowData = {}, e.get("WebUser", "setUserPreferences", {
                            preferences: {
                                age: u.newAge
                            }
                        }).then(function () {
                            u.selectedGrade = o, t.loadContentRows().then(function () {
                                var e = {};
                                e.tabs = t.browseData.section.name, e.grade = o, r.log(r.events.EXPLORE_BY_GRADE_CHANGE, e)
                            })
                        })
                    }, u.toggleMenu = function () {
                        setTimeout(function () {
                            var e = document.querySelector(".browse-filter-dropdown-menu"),
                                o = document.querySelector(".dropdown-arrow");
                            if ("block" !== e.style.display) {
                                e.style.display = "block", o && (o.classList.remove("inactive"), o.classList.add("active"));
                                var n = {},
                                    i = e.children[0].innerText;
                                "Grade" === i || u.gradeLevels.includes(i) ? (n.tab = t.browseData.section.name, r.log(r.events.EXPLORE_BY_GRADE_OPEN, n)) : (n.tab = t.browseData.section.name, n.reading_level_system = f(), r.log(r.events.EXPLORE_BY_RL_OPEN, n))
                            } else e.style.display = "none"
                        }, 100)
                    }, u.getDefaultRange = g, u.selectedTab = "For You", u.selectedGrade = u.ebfGradeLevel ? u.ebfGradeLevel.grade : u.mappedGradeLevels[n.currentProfile.grade], u.selectedReadingLevel = u.ebfReadingLevel ? u.ebfReadingLevel.rl : {
                        name: "Reading Level"
                    }, u.selectedReadingLevelName = u.selectedReadingLevel.name ? u.selectedReadingLevel.name : "Reading Level", u.currentAge = n.currentProfile.readingAge, u.isParent = n.currentProfile.isParent, d(), c.$on("$destroy", function () {
                        document.removeEventListener("click", p)
                    }), u.showReadingLevelConversionsChart = function () {
                        l.open({
                            templateUrl: "modals/reading-level-conversions-chart/reading-level-conversions-chart.html",
                            controller: "ReadingLevelConversionsChartController",
                            controllerAs: "ctrl",
                            size: "lg",
                            keyboard: !1
                        })
                    }
                }],
                controllerAs: "$ctrl"
            }
        }
        e.$inject = ["Data", "BrowseService", "AccountService", "ProfileService", "BigQuery", "LocalStorageService", "$modal", "$rootScope"], angular.module("epicApp").directive("epicBrowseFilter", e)
    }(), angular.module("epicApp").directive("epicCategoryHeader", ["$state", "$window", function (e, t) {
        return {
            restrict: "E",
            scope: {
                title: "=",
                headerPadding: "=",
                size: "=?"
            },
            templateUrl: "category-header/epic-category-header.html",
            link: {
                pre: function (e, t, o) {
                    e.size = e.size || 34, e.headerPadding = e.headerPadding || 0
                },
                post: function (e, o, n) {
                    e.clickBack = function () {
                        t.history.back()
                    }
                }
            },
            controller: ["$scope", function (e) {
                e.backIconPath = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/system-icons/icn-back-grey.png"
            }]
        }
    }]),
    function () {
        function e(e, t) {
            function o(e) {
                this.cellWidthLg = 195, this.cellWidthSm = 140, this.contentLength = e.length, this.rowIndexPos = 0
            }
            return o.prototype = function () {
                var o = !1,
                    n = 10,
                    r = 900,
                    i = 90;
                return {
                    getNumDisplayed: function () {
                        var t = e.innerWidth;
                        return t > 600 ? Math.floor(t / this.cellWidthLg) : Math.floor(t / this.cellWidthSm)
                    },
                    getRowIndexPos: function () {
                        return this.rowIndexPos ? parseFloat(this.rowIndexPos) : 0
                    },
                    rightClick: function () {
                        a("right", this)
                    },
                    leftClick: function () {
                        a("left", this)
                    }
                };

                function a(e, a) {
                    if (!o) {
                        o = !0;
                        var l, s = parseFloat(a.rowIndexPos),
                            c = a.getNumDisplayed(),
                            u = 0;
                        if ("left" == e) l = (l = Math.floor(s - c)) >= 0 ? l : 0;
                        else if ("right" == e) {
                            a.contentLength;
                            l = (l = Math.floor(s + c)) >= 0 ? l : 0
                        }
                        var d = t(function () {
                            var e;
                            a.rowIndexPos = (e = s) + (l - e) * function (e, t) {
                                return 1 - Math.pow(1 - e / t, 5)
                            }(u, r), u >= r - i && (t.cancel(d), o = !1), u += n
                        }, n)
                    }
                }
            }(), o
        }
        e.$inject = ["$window", "$interval"], angular.module("epicApp").factory("EpicScroller", e)
    }(),
    function () {
        angular.module("epicApp").directive("epicDotLoader", function () {
            return {
                restrict: "E",
                scope: {
                    color: "@"
                },
                templateUrl: "dot-loader/epic-dot-loader.html",
                link: {
                    pre: function (e, t, o) {
                        e.color = e.color || "#ffffff"
                    },
                    post: function (e, t, o) {}
                }
            }
        })
    }(),
    function () {
        angular.module("epicApp").directive("epicDropdown", function () {
            return {
                restrict: "E",
                scope: {
                    options: "=?",
                    staticLabel: "=?"
                },
                templateUrl: "dropdown/epic-dropdown.html",
                link: function (e, t, o) {
                    e.$watch(function () {
                        return e.options
                    }, function (t, o) {
                        var n, r, i = e.options.length;
                        for (n = 0; n < i; n++)
                            if ((r = e.options[n]).selected) {
                                e.model = r;
                                break
                            } e.model = e.model || e.options[0]
                    }, !0), e.select = function (t) {
                        e.model = t, t.method && t.method(t)
                    }, e.getLabel = function (e) {
                        if (!e) return;
                        return e.conditionalLabel ? e.conditionalLabel() : e.label
                    }
                }
            }
        })
    }(),
    function () {
        function e(e) {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    curEducatorInfo: "=",
                    onSubmitSuccess: "=",
                    onSubmitFail: "=",
                    submitButtonText: "<",
                    showChecks: "<"
                },
                templateUrl: "educator-info-form/educator-info-form.html",
                controller: function () {
                    var t = this;
                    this.educatorInfo = e, this.formInputs = new e, this.attemptedSubmit = !1, this.isSubmitting = !1, this.$onInit = function () {
                        t.submitButtonText || (t.submitButtonText = "Submit"), t.curEducatorInfo && t.formInputs.updateEducatorInfo(t.curEducatorInfo)
                    }, this.submit = function () {
                        if (!t.isSubmitting) {
                            t.attemptedSubmit = !0;
                            var e = t.formInputs.isValidEducatorInfo();
                            bbb("valid? ", e, t.formInputs), e ? (t.curEducatorInfo.updateEducatorInfo(t.formInputs), t.onSubmitSuccess && "function" == typeof t.onSubmitSuccess && (t.isSubmitting = !0, t.onSubmitSuccess())) : t.onSubmitFail && "function" == typeof t.onSubmitFail && t.onSubmitFail()
                        }
                    }, this.autofill = function (e) {
                        (Globals.GLOBAL_STAGING_MODE || Globals.GLOBAL_DEV_MODE) && e.ctrlKey && 192 === e.which && t.formInputs.autofillData()
                    }, this.shouldShowCheck = function (e) {
                        return t.eduForm && t.showChecks && window.innerWidth > 600 && t.eduForm[e].$touched && t.eduForm[e].$valid
                    }, this.shouldShowError = function (e) {
                        return t.eduForm && t.eduForm[e].$touched && !t.eduForm[e].$valid || t.attemptedSubmit && !t.eduForm[e].$valid
                    }
                },
                controllerAs: "$ctrl"
            }
        }
        e.$inject = ["EducatorInfo"], angular.module("epicApp").directive("educatorInfoForm", e)
    }(),
    function () {
        function e(e, t, o, n) {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    formInputs: "=",
                    eduForm: "=",
                    attemptedSubmit: "=",
                    showCheck: "<",
                    hideTitle: "<",
                    clearQueryField: "="
                },
                templateUrl: "educator-school-form/educator-school-form.html",
                controller: ["$scope", function (r) {
                    var i = this;
                    this.educatorInfo = t, this.canViewMdrSchoolSearch = !0, this.schoolSearchResults = [], this.isShowingSchoolSearchInput = !0, this.isRunningSchoolSearch = !1, this.isFocusedOnSchoolSearchInput = !1, this.schoolSearchQuery = "", this.ipData = {
                        zip: null,
                        region_code: null,
                        country_code: null,
                        country_name: null
                    };
                    var a, l = null;

                    function s(e) {
                        var t = e.toLowerCase().split(" ");
                        return (t = t.map(function (e) {
                            return e.charAt(0).toUpperCase() + e.substr(1)
                        })).join(" ")
                    }
                    this.$onInit = function () {
                        bbb(i.formInputs), i.canViewMdrSchoolSearch = i.formInputs.schoolData.canViewMdrSchoolSearch, i.canViewMdrSchoolSearch && (i.formInputs.schoolData.accountSchoolMdrPid && i.formInputs.schoolData.accountSchoolMdrPid > 0 || i.formInputs.schoolData.accountSchoolName && (i.isShowingSchoolSearchInput = !1)), null === i.canViewMdrSchoolSearch || i.canViewMdrSchoolSearch ? e.get("WebGeolocation", "noAuthGetGeolocation").then(function (e) {
                            e && e.result && (e.result.zip && (i.ipData.zip = e.result.zip), e.result.region_code && (i.ipData.region_code = e.result.region_code), e.result.country_code && (i.ipData.country_code = e.result.country_code), e.result.country_name && (i.ipData.country_name = e.result.country_name, i.formInputs.schoolData.accountSchoolCountry = e.result.country_name), null === i.canViewMdrSchoolSearch && (i.canViewMdrSchoolSearch = "US" === e.result.country_code || "CA" === e.result.country_code), i.formInputs.schoolData.canViewMdrSchoolSearch = i.canViewMdrSchoolSearch)
                        }) : i.canViewMdrSchoolSearch = !1, r.$watch(function () {
                            return i.clearQueryField
                        }, function () {
                            i.clearQueryField && !i.clearQueryField.isExpanded && i.clearQuery()
                        }, !0)
                    }, this.updateSchoolSearchResults = function (t) {
                        if ((!t || t.length < 3) && l) return i.schoolSearchResults = l, void(i.isRunningSchoolSearch = !1);
                        var n = "noAuthGetSchoolSearchResultsBySearchTerm",
                            r = {
                                searchTerm: t
                            };
                        (i.ipData.zip || i.ipData.region_code) && (n = !t || t.length < 3 ? "noAuthGetSchoolsByLocation" : "noAuthGetSchoolSearchResultsBySearchTermAndLocation", i.ipData.zip && (r.zipcode = i.ipData.zip), i.ipData.region_code && (r.state = i.ipData.region_code)), o.when(e.get("WebMdrSchool", n, r)).then(function (e) {
                            if (e && e.result && e.result.schoolResults) {
                                for (var t = e.result.schoolResults, o = 0; o < t.length; o++) t[o].inst = s(t[o].inst), t[o].mstreet = s(t[o].mstreet), t[o].mcity = s(t[o].mcity);
                                i.schoolSearchResults = t, i.isRunningSchoolSearch = !1, "noAuthGetSchoolsByLocation" === n && (l = i.schoolSearchResults)
                            }
                        })
                    }, this.doSchoolSearch = function (e) {
                        i.isRunningSchoolSearch = !0, i.formInputs.clearSchoolData(), n.cancel(a), a = n(function () {
                            i.updateSchoolSearchResults(e)
                        }, e ? 500 : 0)
                    }, this.selectSchoolFromSearchResults = function (e) {
                        i.formInputs.setMdrSchool(e), i.schoolSearchQuery = i.formInputs.schoolData.accountSchoolName, bbb(i.formInputs)
                    }, this.shouldShowSchoolField = function (e) {
                        if (i.canViewMdrSchoolSearch) {
                            if (i.isShowingSchoolSearchInput) return "searchField" === e;
                            for (var o = 0; o < t.validSchoolFields[t.MDR_NOT_FOUND].length; o++)
                                if (e === t.validSchoolFields[t.MDR_NOT_FOUND][o]) return !0
                        } else
                            for (o = 0; o < t.validSchoolFields[t.INTERNATIONAL].length; o++)
                                if (e === t.validSchoolFields[t.INTERNATIONAL][o]) return !0;
                        return !1
                    }, this.clearQuery = function () {
                        i.schoolSearchQuery = ""
                    }, this.toggleSchoolSearch = function () {
                        i.isShowingSchoolSearchInput = !i.isShowingSchoolSearchInput, i.isShowingSchoolSearchInput || (i.isFocusedOnSchoolSearchInput = !1, i.schoolSearchQuery = ""), i.formInputs.clearSchoolData()
                    }, this.toggleInternational = function () {
                        i.canViewMdrSchoolSearch = !i.canViewMdrSchoolSearch, i.formInputs.clearSchoolData(), i.formInputs.schoolData.canViewMdrSchoolSearch = i.canViewMdrSchoolSearch
                    }, this.shouldShowCheckOnSearch = function () {
                        return i.eduForm && i.showCheck && window.innerWidth > 600 && i.eduForm.accountSchoolName.$touched && i.formInputs.isValidSchool()
                    }, this.shouldShowErrorOnSearch = function () {
                        return i.eduForm && !i.formInputs.isValidSchool() && (i.attemptedSubmit || i.eduForm.accountSchoolName.$touched)
                    }, this.shouldShowCheck = function (e) {
                        return i.eduForm && i.showCheck && window.innerWidth > 600 && i.eduForm[e].$touched && i.eduForm[e].$valid
                    }, this.shouldShowError = function (e) {
                        return i.eduForm && i.eduForm[e].$touched && !i.eduForm[e].$valid || i.attemptedSubmit && !i.eduForm[e].$valid
                    }
                }],
                controllerAs: "$ctrl"
            }
        }
        e.$inject = ["Data", "EducatorInfo", "$q", "$timeout"], angular.module("epicApp").directive("educatorSchoolForm", e)
    }(), angular.module("epicApp").directive("epicFlipBookOverlay", ["$document", "$timeout", "BookService", function (e, t, o) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "epic-flip-book/epic-flip-book-overlay.html",
            link: function (t, n, r) {
                t.bookService = o, t.getFormattedPagesCount = function () {
                    return "Page: " + (o.getCurrentPage() + 1) + " of " + o.getBookLength()
                };
                var i = function (e) {
                    27 === e.keyCode && o.newCloseBook()
                };
                e.on("keydown", i), t.$on("$destroy", function () {
                    e.off("keydown", i)
                })
            }
        }
    }]), angular.module("epicApp").directive("epicFlipBook", ["$window", "$document", "$timeout", "$rootScope", "BookService", "BookPagesService", "ReadToMeService", "BookWordDataService", "UserAgent", "MagicPanService", "BookOverlay", "ABTestService", function (e, t, o, n, r, i, a, l, s, c, u, d) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "epic-flip-book/epic-flip-book.html",
            link: function (p, f, g) {
                var m = angular.element(e),
                    h = 2 * r.bookData.book.aspectRatio;
                p.pageFlipDuration = 230, p.bookVerticalPadding = 20;
                var v = {
                    x: null,
                    y: null
                };
                p.bookUiReady = !1, p.currentPageContainer = 2, p.currentPageContainerFlipping = null, p.pagesModel = [], p.bookService = r, p.bookPagesService = i, p.userAgent = s, p.bookOverlay = u, p.abTestService = d, p.acceptableZoomLevelToFlip = c.acceptableZoomLevelToFlip, p.currentZoom = c.zoomLevel, p.bookHeaderHeight = 0, r.eduAssigningVariant === d.EDU_ASSIGNING_HEADERS && (p.bookHeaderHeight = 130), p.windowHeight = null, p.windowWidth = null, p.growVertically = h < A(), r.initBookOpen(), r.isReadToMe() && (u.shouldShowRtmTooltip() || o(a.play, 2e3), r.initHighlightMode());
                var b = function e() {
                        var t = f.find("#epic-flip-book-wrapper");
                        if (t[0]) {
                            var n = t[0].getBoundingClientRect();
                            n.width && n.height ? i.setPageDimensions(n.width / 2, n.height) : o(function () {
                                e()
                            }, 200)
                        } else o(function () {
                            e()
                        }, 200)
                    },
                    S = i.getOrLoadPageImageByPageIndex(0);
                S.cdnUrl ? (p.sizingImage = S.cdnUrl, b(), p.bookUiReady = !0) : S.broadcastEvent && p.$on(S.broadcastEvent, function (e, t) {
                    t && (p.sizingImage = t, b(), p.bookUiReady = !0)
                }), p.resetPagesModel = function () {
                    p.currentPageContainer = 2, p.currentPageContainerFlipping = null;
                    var e = r.getCurrentPage();
                    e == r.getBookLength() - 1 && setTimeout(function () {
                        n.$broadcast("viewingBookFinish")
                    }, 0), p.pagesModel = [
                        [e - 4, e - 3],
                        [e - 2, e - 1],
                        [e, e + 1],
                        [e + 2, e + 3]
                    ]
                }, p.resetPagesModel(), p.updatePagesModel = function (e) {
                    var t = r.getCurrentPage();
                    t == r.getBookLength() - 1 && n.$broadcast("viewingBookFinish");
                    var o = null;
                    "right" === e ? ((o = p.currentPageContainer - 2) < 0 && (o = p.currentPageContainer + 2), p.pagesModel[o] = [p.pagesModel[o][0] + 8, p.pagesModel[o][1] + 8]) : ((o = p.currentPageContainer - 3) < 0 && (o = p.currentPageContainer + 1), p.pagesModel[o] = [p.pagesModel[o][0] - 8, p.pagesModel[o][1] - 8], t == r.getBookLength() - 3 && n.$broadcast("clickOnBookFinish", {
                        click_type: "page_back"
                    }))
                };
                var y = !1;
                p.flipPage = function (e) {
                    if (!y) {
                        if (l.deSelectCurrentWord(), "right" === e) {
                            if (!r.pageRightExists()) return;
                            p.currentPageContainerFlipping = p.currentPageContainer
                        } else {
                            if (!r.pageLeftExists()) return;
                            p.currentPageContainerFlipping = p.currentPageContainer - 1 >= 0 ? p.currentPageContainer - 1 : 3
                        }
                        y = !0, o(function () {
                            y = !1, p.currentPageContainerFlipping = null, "right" === e ? (r.goPageForward(), p.updatePagesModel("right"), p.currentPageContainer < p.pagesModel.length - 1 ? p.currentPageContainer += 1 : p.currentPageContainer = 0) : (r.goPageBackward(), p.updatePagesModel("left"), p.currentPageContainer > 0 ? p.currentPageContainer -= 1 : p.currentPageContainer = p.pagesModel.length - 1)
                        }, p.pageFlipDuration), u.shouldShowRtmTooltip() && (u.closeRtmTooltip(), u.closeBookHeaderAndFooter()), o(function () {
                            p.bookOverlay.isTurning = !1
                        }, p.pageFlipDuration)
                    }
                }, p.handleFlipPage = function (e) {
                    p.currentZoom = c.zoomLevel, p.currentZoom <= p.acceptableZoomLevelToFlip && p.flipPage(p.isPagePosRight(e) ? "right" : "left")
                }, p.getPageMousePositionFromJQueryEvent = function (e) {
                    var t = e.currentTarget.getBoundingClientRect(),
                        o = e.clientX - t.left,
                        n = e.clientY - t.top;
                    return [o / t.width * 100, (t.height - n) / t.height * 100]
                }, p.handleMouseMove = function (e, t) {
                    var o = p.getPageMousePositionFromJQueryEvent(e),
                        n = r.getCurrentPage(),
                        i = "right" === t ? n : n - 1,
                        a = null,
                        s = l.preSelectedWord;
                    s && (a = l.checkForWordInteractionByWordDataList([s], o)) || ((a = l.checkForWordInteractionByPageIndex(i, o)) ? l.preSelectWord(a) : l.dePreSelectCurrentWord())
                }, p.onMouseMoveHeader = function (e) {
                    u.bookHeaderIsOpen || null == v.y || Math.sqrt(Math.pow(v.y - e.clientY, 2) + Math.pow(v.x - e.clientX, 2)) > 12 && u.openBookHeaderAndFooter(e, !0), v.y = e.clientY, v.x = e.clientX
                }, p.isPagePosRight = function (e) {
                    var t = p.currentPageContainer;
                    return e === t || e === t + 1 || 0 === e && 3 === t
                }, p.isPageCurrent = function (e) {
                    var t = p.currentPageContainer;
                    return e === t || e === t - 1 || 3 === e && 0 === t
                }, p.getBookCoverStyle = function () {
                    var e = r.getBookCoverColors();
                    return e ? {
                        "background-color": "rgb(" + e.coverColorR + "," + e.coverColorG + "," + e.coverColorB + ")"
                    } : null
                }, p.showPage = function (e) {
                    return r.shouldShowPreCompletionPage() || e % 2 == 1 ? e >= 0 && e < r.getBookSpineLength() : e >= 0 && e < r.getBookSpineLength() + 1
                }, p.$watch(function () {
                    return r.getCurrentPage()
                }, function (e, t) {
                    e !== t && (r.logPrevPageView(t), r.incrementPagesFlipped(), r.isIdling && r.resumeBookRead())
                }), p.$on("epicFlipBook.flipForward", function () {
                    o(function () {
                        p.flipPage("right")
                    }, 0)
                }), p.$on("epicFlipBook.flipBackward", function () {
                    o(function () {
                        p.flipPage("left")
                    }, 0)
                }), p.$on("epicFlipBook.pageReset", function () {
                    p.resetPagesModel()
                });
                var C = function (e) {
                    var t = e.keyCode;
                    39 !== t && 37 !== t || e.preventDefault(), 39 === t ? o(function () {
                        p.flipPage("right")
                    }, 0) : 37 === t && o(function () {
                        p.flipPage("left")
                    }, 0)
                };
                t.on("keydown", C);
                var E = function () {
                    p.$apply(function () {
                        var e = A();
                        p.growVertically = h < e, b()
                    })
                };

                function A() {
                    return p.windowHeight = e.innerHeight, u.isFullscreen || (p.windowHeight -= p.bookHeaderHeight), p.windowWidth = e.innerWidth, p.windowWidth / p.windowHeight
                }
                m.on("resize", E), m.on("fullscreenchange", E), p.$on("epicFlipBook.resizeFromQuiz", function () {
                    var e = (p.windowWidth - u.quizDrawerWidth - 10) / p.windowHeight;
                    p.growVertically = h < e, b()
                }), f.on("$destroy", function () {
                    r.isReadToMe() && a.clearAndPause(), r.onBookClose(), t.off("keydown", C), m.off("resize", E), m.off("fullscreenchange", E)
                })
            }
        }
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c) {
            return {
                restrict: "E",
                scope: {
                    videoId: "=",
                    mute: "=?",
                    noControls: "=?",
                    replay: "=?"
                },
                templateUrl: "epic-vid/epic-vid.html",
                link: function (e, s, c) {
                    var u = [],
                        d = (C(), null),
                        p = $("#slider"),
                        f = 0,
                        g = s[0].querySelector(".player-chrome"),
                        m = new Clappr.Player({
                            source: "",
                            parent: g,
                            maxBufferLength: 30,
                            baseUrl: "../assets/clappr",
                            mute: !0,
                            autoPlay: !0,
                            chromeless: !0,
                            persistConfig: !1,
                            playbackNotSupportedMessage: " ",
                            plugins: []
                        });

                    function h() {
                        m.play(), e.playerActive = !0, C()
                    }

                    function v() {
                        f = Date.now() + 1500
                    }

                    function b() {
                        e.hideControls = m.isPlaying() && Date.now() > f
                    }

                    function S() {
                        e.muted = !e.muted, m.core.mediaControl.setVolume(e.muted ? 0 : 100)
                    }

                    function y(t) {
                        e.fullscreen = !e.fullscreen
                    }

                    function C() {
                        return Math.floor(Date.now() / 1e3)
                    }
                    e.hideControls = !0, e.muted = !1, e.sliderModel = 0, e.playerActive = !0, e.bookIsFinished = !1, e.buffering = !1, e.playerReady = !1, e.chapterTime = i.toHHMMSS(0), e.chapterDuration = i.toHHMMSS(0), e.quizService = l, e.bookService = a, n.get("WebBook", "getVideoFolderPath", {
                            bookId: e.videoId
                        }).then(function (o) {
                            if (o.result) {
                                e.folderPath = o.result;
                                var n = Globals.GLOBAL_SECURE_CDN_BASE + o.result;
                                t.get(n).then(function (t) {
                                    u = t.data,
                                        function () {
                                            var t = u[0];
                                            if (!t || !t.src) return;
                                            m.load((o = t.src, Globals.GLOBAL_URL_CONTENT + String(e.videoId).slice(-1) + "/" + e.videoId + "/" + o + "?loc=en_US&userId=" + r.currentProfile.id + "&ver=1.0&chapter=0&bookId=" + e.videoId + "&dev=web")), e.chapterDuration = i.toHHMMSS(t.duration);
                                            var o
                                        }()
                                })
                            } else console.warn("Problem getting video folder path data")
                        }, function () {
                            console.warn("Request for video folder path was rejected")
                        }), m.on(Clappr.Events.PLAYER_TIMEUPDATE, function (t) {
                            e.chapterTime = i.toHHMMSS(m.getCurrentTime() || 0), !m.isPlaying() || p.hasClass("md-dragging") || e.buffering || (e.sliderModel = parseInt(m.getCurrentTime() / m.getDuration() * 1e3))
                        }), m.on(Clappr.Events.PLAYER_READY, function () {
                            e.buffering = !0
                        }), m.on(Clappr.Events.PLAYER_PLAY, function () {
                            e.buffering = !1, e.playerReady || (e.playerReady = !0, m.play())
                        }), m.on(Clappr.Events.PLAYER_ENDED, function () {
                            if (e.replay) return m.seek(0), void h();
                            e.playerActive = !1
                        }), m.on(Clappr.Events.PLAYER_ERROR, function (e) {
                            console.warn("Video error!", e);
                            var t = m.core.getCurrentPlayback();
                            "hls" === t.name && t.hls && (console.warn("playback.hls.swapAudioCodec()"), t.hls.swapAudioCodec(), console.warn("playback.hls.recoverMediaError()"), t.hls.recoverMediaError())
                        }), e.$on("video.playPause", function (t, o) {
                            o.pause ? m.isPlaying && (m.pause(), e.playerActive = !1) : e.playPause()
                        }), e.$on("$destroy", function () {
                            document.removeEventListener("fullscreenchange", y), document.removeEventListener("webkitfullscreenchange", y), document.removeEventListener("mozfullscreenchange", y), document.removeEventListener("MSFullscreenChange", y), d && (o.cancel(d), d = null), m.destroy()
                        }), e.mute && S(),
                        function () {
                            if (d) return;
                            d = o(b, 250)
                        }(), v(), e.playPause = function () {
                            m.isPlaying() ? (m.pause(), e.playerActive = !1) : h();
                            e.showControls()
                        }, e.showControls = v, e.onSliderChange = function () {
                            m && m.seek(e.sliderModel / 1e3 * m.getDuration())
                        }, e.toggleFullscreen = function () {
                            var e = s[0];
                            document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement ? document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen && document.msExitFullscreen() : e.requestFullscreen ? e.requestFullscreen() : e.webkitRequestFullscreen ? e.webkitRequestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.msRequestFullscreen && e.msRequestFullscreen()
                        }, e.toggleVolume = S
                }
            }
        }
        e.$inject = ["$rootScope", "$http", "$interval", "Data", "ProfileService", "StringService", "BookService", "QuizService", "LogEntryService", "BigQuery"], angular.module("epicApp").directive("epicVid", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            return {
                restrict: "E",
                scope: {},
                templateUrl: "featured-carousel/epic-featured-carousel.html",
                link: function (l, s, c) {
                    var u = [0, 2, 1, 5, 8, 11, 12, 13, 14, 15, 17, 18, 23, 24, 25, 99],
                        d = {
                            2: ["FEATURED_PANEL_TYPE_NATIVE_FEATURED", "FeaturedPanelNativeFeatured"],
                            23: ["FEATURED_PANEL_TYPE_NEW_BOOK_OF_THE_DAY", "FeaturedPanelNewBookOfTheDay"],
                            24: ["FEATURED_PANEL_TYPE_VIDEO_PLAYING", "FeaturedPanelVideoPlaying"],
                            25: ["FEATURED_PANEL_TYPE_NEW_QUIZ", "FeaturedPanelNewQuiz"],
                            1: ["FEATURED_PANEL_TYPE_WEBVIEW", "FeaturedPanelWebview"],
                            5: ["FEATURED_PANEL_TYPE_BOOK_COLLECTION_ALT", "FeaturedPanelBookCollectionAlt"],
                            8: ["FEATURED_PANEL_TYPE_EDUCATOR_VERSION", "FeaturedPanelEducatorVersion"],
                            11: ["FEATURED_PANEL_TYPE_WEBVIEW_POPUP", "FeaturedPanelWebviewPopup"],
                            12: ["FEATURED_PANEL_TYPE_WEB_TAP_DASHBOARD", "FeaturedPanelWebTapDashboard"],
                            13: ["FEATURED_PANEL_TYPE_STUDENT_TAP", "FeaturedPanelStudentTap"],
                            14: ["FEATURED_PANEL_TYPE_PARENT_TAP", "FeaturedPanelParentTap"],
                            15: ["FEATURED_PANEL_TYPE_CHILD_TAP", "FeaturedPanelChildTap"],
                            17: ["FEATURED_PANEL_TYPE_WEB_TAP_DASHBOARD_ENROLLED", "FeaturedPanelWebTapDashboardEnrolled"],
                            18: ["FEATURED_PANEL_TYPE_USER_GENERATED_CONTENT", "FeaturedPanelUserGeneratedContent"],
                            99: ["UNKNOWN_NOT_DEFINED_ON_BACKEND", "FeaturedPanelNinetyNine"]
                        };

                    function p(e) {
                        var t = {
                            "b3dba0c3-1f66-4639-91a8-1c59bf45abeb": /ScaredyMonster/,
                            "b108a2ba-b7fd-491a-ae41-83b544d2cd09": /MyPetSlime/,
                            "deb59d52-304f-430c-a213-5e6ba0357d1d": /CatNinja/
                        };
                        for (var o in t)
                            if (e.match(t[o])) return o;
                        return !1
                    }
                    t.get("WebCategory", "getFeaturedHeaders", e.banner_date_time_string ? {
                        device: "web",
                        banner_date_time_string: e.banner_date_time_string
                    } : {
                        device: "web"
                    }).then(function (e) {
                        if (l.headers = e.result, l.headers && 0 !== l.headers.length) {
                            for (var t, r = l.headers.length; r--;) {
                                var i = p((t = l.headers[r]).bgImage);
                                i && (t.type = 0, t.url = "original", t.params = {
                                    originalId: i
                                }), (-1 == u.indexOf(t.type) || 0 === t.booksOnlyCount && t.videosOnlyCount > 0 && !a.videoEnabled || 24 == t.type && !a.videoEnabled) && l.headers.splice(r, 1)
                            }
                            if (1 == l.headers.length) {
                                var s = {};
                                for (var c in t = l.headers[0]) s[c] = t[c];
                                l.headers.push(s)
                            }
                            var d = l.headers.shift();
                            l.headers.push(d), o.getRenderedDomElements("slick-active").then(function () {
                                "browse" === n.current.name && m("0")
                            }).catch(function (e) {})
                        }
                    }).catch(function () {});
                    var f = !0,
                        g = document.getElementById("browse-tabs");

                    function m(e) {
                        l.headers && l.headers[e] && (l.headers[e].bookIds[0] || l.headers[e].playlistId) && f && o.getRenderedDomElements("slick-active").then(function () {
                            var t = {};
                            t.index = parseInt(e), t.rowIndex = 0, t.rowTitle = function e(t) {
                                t = t || 1;
                                var o = s[0].getElementsByClassName("slick-active")[0];
                                if (!o) return t >= 5 ? "unable to get name" : e(t + 1);
                                var n = o.children[0].children[0].children[0].children[0].children[0].getAttribute("ng-switch-when");
                                return d[n] && d[n][1]
                            }(), t.contentType = function (e) {
                                return l.headers[e].contents[0] ? l.headers[e].contents[0].type : void 0
                            }(e), t.parentLoggingContext = "featured_banner", o.addViewedContentData(l.headers[e].modelId, "featured_banner", t)
                        }).catch(function (e) {})
                    }
                    i.$on("vertical-scroll", function () {
                        f = r.innerWidth >= 960 ? !(angular.element(g).offset().top <= 375) : !(angular.element(g).offset().top <= 300)
                    }), l.logSlideAsViewed = function () {
                        o.loggingIsActive && ("browse" === n.current.name && f && l.getCurrentIndex() && m(l.getCurrentIndex()))
                    }, l.getCurrentIndex = function () {
                        var e = s[0].getElementsByClassName("slick-active")[0];
                        return e ? e.getAttribute("data-slick-index") : void 0
                    }
                }
            }
        }
        e.$inject = ["$stateParams", "Data", "BookPresentationsLogger", "$state", "$window", "$rootScope", "AccountService"], angular.module("epicApp").directive("epicFeaturedCarousel", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s) {
            return {
                restrict: "E",
                scope: {
                    data: "=",
                    index: "="
                },
                templateUrl: "featured-carousel/epic-featured-slide.html",
                link: function (c, u, d) {
                    c.bookService = a;
                    var p = (c.data.bgImageLarge || c.data.bgImage).replace(/.png|.webp/gi, "") + ".png";
                    c.bgImage = s.resizeUrl({
                        url: Globals.GLOBAL_CDN_BASE + p,
                        width: 943,
                        quality: 0
                    });
                    var f = c.$new(!0);
                    f.modalData = {
                        campaignId: 1,
                        openedFromBanner: !0
                    }, c.onClick = function (e) {
                        t.go(e.url, e.params || {})
                    }, c.logClick = function () {
                        i.log(i.events.BANNER_CLICKED, {
                            model_id: c.data.modelId,
                            title: c.data.title,
                            panel_type: c.data.type
                        }), c.rowTitle = "FeaturedBanner", c.rowIndex = 0, c.parentLoggingContext = "featured_banner";
                        var e;
                        a.newBookOpenSource = "featured_banner", a.bookOpenSource || (a.bookOpenSource = "featured_banner");
                        if (l.addOpenedContentData(c.data.modelId, "featured_banner", c), c.data, c.data && 18 === c.data.type) c.contentType = "ugc", e = c.data.playlistId;
                        else if (c.data.contents[0]) {
                            e = c.data.contents[0].data.modelId;
                            var t = c.data.contents[0].data.type,
                                o = c.data.contents[0].data.audio;
                            c.contentType = function (e, t) {
                                if (1 !== e) return 2 === e ? "audiobook" : 3 === e ? "article" : 4 === e ? "video" : 5 === e ? "quiz" : "book";
                                if (t) return "read-to-me"
                            }(t, o)
                        } else e = null;
                        l.addOpenedContentData(e, "featured_banner", c)
                    }, c.closeModal = function () {
                        r.close()
                    }, c.displayModal = function (e) {
                        e.match("share-with-parents") ? n.show({
                            controller: "ShareWithParentsDialogCtrl",
                            templateUrl: "md-dialog/misc/share-with-parents/share-with-parents-dialog.html",
                            parent: angular.element(document.body),
                            clickOutsideToClose: !0
                        }) : r.show(e + "&ts=" + (new Date).getTime(), c)
                    }, c.showBookCollection = function (o, n) {
                        e.books = n, e.name = o, t.go("collection")
                    }, c.showERCTeacherIntro = function () {
                        o.open({
                            template: "<home-access-intro></home-access-intro>",
                            scope: f
                        })
                    }, c.showERCStudentIntro = function () {
                        o.open({
                            template: "<epic-reading-club-student-intro></epic-reading-club-student-intro>",
                            scope: f
                        })
                    }, c.showERCParentIntro = function () {
                        o.open({
                            template: "<epic-reading-club-parent-intro></epic-reading-club-parent-intro>",
                            scope: f
                        })
                    }, c.showERCChildIntro = function () {
                        o.open({
                            template: "<epic-reading-club-child-intro></epic-reading-club-child-intro>",
                            scope: f
                        })
                    }
                }
            }
        }
        e.$inject = ["CollectionData", "$state", "$modal", "$mdDialog", "ModalService", "BigQuery", "BookService", "BookPresentationsLogger", "AssetService"], angular.module("epicApp").directive("epicFeaturedSlide", e)
    }(), angular.module("epicApp").directive("flipBook", ["Data", function (e) {
        return {
            restrict: "E",
            scope: !0,
            templateUrl: "flip-book/epic-flip-book.html",
            link: function (e, t, o) {},
            controller: ["$scope", "QuizService", function (e, t) {
                var o;

                function n() {
                    o && clearTimeout(o), o = setTimeout(function () {
                        ! function () {
                            var e = $("#bookWrapper"),
                                t = $("#bookPages"),
                                o = $(".book-header-slider"),
                                n = 2 * e.attr("ratio");
                            n || (n = 1024 / 768);
                            var r = Math.round($("flip-book").width() - 12 - 12),
                                i = Math.round($("flip-book").height() - 5 - 80 - 12);
                            if (r / i > n) {
                                var a = Math.round(i * n);
                                e.width(a).height(i), o.width(.95 * a)
                            } else {
                                var l = Math.round(r / n);
                                e.width(r).height(l), o.width(.95 * r)
                            }
                            $("#flipRoot").height(t.height()), $(".flipContent").height(t.height());
                            var s = Math.max((Math.round($("flip-book").height()) - e.height()) / 2 - 80, 5);
                            e.css("margin-top", s + "px");
                            var c = .5 * Math.round($("flip-book").width() - e.width());
                            $(".pan-element").css({
                                transform: "translate3d(" + c + "px, 0, 0)"
                            })
                        }()
                    }, 300)
                }
                $(window).resize(n), window.addEventListener("orientationchange", n, !1), e.$on("flipBook.resize", function () {
                    n()
                }), e.showQuizButton = t.quizData, e.takeQuiz = function () {
                    t.takeQuiz(e.book.title)
                }
            }]
        }
    }]), angular.module("epicApp").directive("epicGoogleSignin", [function () {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "google-signin/epic-google-signin.html",
            controller: ["$scope", "GoogleClassroomService", "BigQuery", function (e, t, o) {
                t.initialize(), e.signInWithGoogle = function () {
                    t.signIn().then(function (e) {
                        o.log(o.events.GOOGLE_CLASSROOM_SIGN_IN_COMPLETE)
                    }, function (e) {
                        console.warn("Error while logging in"), o.log(o.events.GOOGLE_CLASSROOM_SIGN_IN_FAILED)
                    })
                }
            }],
            link: function (e, t, o) {}
        }
    }]),
    function () {
        angular.module("epicApp").directive("epicHeader", function () {
            return {
                restrict: "E",
                templateUrl: "header/epic-header.html",
                scope: {},
                controller: ["$rootScope", "$scope", "$state", "$window", "$mdMedia", "$mdDialog", "AccountService", "ProfileService", "JewelService", "BigQuery", "ErcBooksReadService", "SearchService", "ProfileAccessService", "$modal", "NufNewService", "UserAgent", "$timeout", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h) {
                    function v() {
                        o.go(t.getMyLibraryState())
                    }

                    function b() {
                        var e;
                        o.go("teacher" === (e = l.currentProfile.userType) || "parent" === e ? "parentTeacherMailbox" : "assignments")
                    }
                    t.profileService = l, t.jewelService = s, t.section = o.current, t.accountService = a, t.searchService = d, t.$state = o, t.media = r, t.showHeader = !1, t.logo = "logo", t.topClassCodeCopied = null, t.actionClassCodeCopied = null, t.handleStudentHelp = function () {
                        f.open({
                            templateUrl: "modals/student-login-help/student-login-help.html",
                            controller: "StudentLoginHelpController",
                            size: "lg",
                            keyboard: !1
                        })
                    }, t.handleSwitchClassroom = function () {
                        a.logout(!0), n.location.href = Globals.GLOBAL_URL + "sign-in-student"
                    }, t.handleParentDashboard = C, t.checkIsNufState = function () {
                        if (!Globals.GLOBAL_IS_AUTHED) return !0;
                        var e = o.current.name;
                        return e && t.nufStates.includes(e)
                    }, t.displayReadingCertModal = S, t.getShouldShowButton = y, t.directToMyLibrary = v, t.directToMailbok = b, t.signOut = function () {
                        "profileSelect" === o.current.name ? c.log(c.events.PROFILE_SELECT_SIGNOUT) : c.log(c.events.MENU_SIGNOUT, {
                            child_count: l.childProfiles.length
                        });
                        c.signOut(), a.logout()
                    }, t.isLoggedInHeader = {
                        value: !1
                    }, t.nufStates = ["nuf.age", "nuf.subjects", "nuf.connectTeacher", "nuf.connectStudent", "nuf.connectConfirmChild", "personalizeEducatorWelcome", "personalizeAccountType"], t.notLoggedInStates = ["nuf.age", "nuf.subjects", "nuf.connectTeacher", "nuf.connectStudent", "nuf.connectConfirmChild", "personalizeEducatorWelcome", "personalizeAccountType", "eduSignUp", "profileSelect"], e.$watch(function () {
                        return a.accountDataLoaded
                    }, function (e, o) {
                        e && (t.topClassCode = a.accountLoginCode ? "Student Login - Class Code: ".concat(a.accountLoginCode.toLowerCase()) : null)
                    }), t.menuOpen = !1, t.$on("$mdMenuOpen", function () {
                        t.menuOpen = !0, angular.element(".md-open-menu-container").addClass("header-menu")
                    }), t.$on("$mdMenuClose", function () {
                        t.menuOpen = !1
                    }), t.focusSearchFromHeader = function () {
                        "search" !== o.current.name && d.clearSearch(), o.go("search"), $("#search_input_value").select(), d.isFocusedOnSearchInput = !0
                    }, t.enterSearchField = function () {
                        if (!(d.searchText.length < 3)) {
                            var e = $.Event("keypress", {
                                which: 13
                            });
                            $("#search_input_value").trigger(e)
                        }
                    }, t.searchRemoveFocus = function (e) {
                        if (!(d.searchText.length < 3)) {
                            var t = e.keyCode || e.which;
                            13 == t && (d.isFocusedOnSearchInput = !1, $("#search_input_value").blur(), d.lastSearchTerm != d.searchText && d.searchTextChanged())
                        }
                    }, t.getMyLibraryState = function () {
                        return "my-library.favorites"
                    }, t.getDashboardState = function () {
                        var e = l.currentProfile.userType;
                        return "teacher" === e ? "edu-dashboard" : "parent" === e ? "dashboard.profiles" : "dashboard.activity"
                    }, t.directToDashboard = function () {
                        o.go(t.getDashboardState())
                    }, t.loggedOutLinks = [{
                        label: "Student Login Help",
                        onClick: t.handleStudentHelp,
                        condition: function () {
                            return "profileSelect" === o.current.name && a.isEducator()
                        }
                    }, {
                        label: "Switch Classroom",
                        onClick: t.handleSwitchClassroom,
                        condition: function () {
                            return "profileSelect" === o.current.name && a.isEducator()
                        }
                    }, {
                        label: "Go To Teacher Dashboard",
                        onClick: t.handleParentDashboard,
                        condition: function () {
                            return a.isEducator()
                        }
                    }, {
                        label: "Parent Dashboard",
                        onClick: t.handleParentDashboard,
                        condition: function () {
                            return !a.isEducator() && !t.checkIsNufState()
                        }
                    }], t.headerLinks = [{
                        label: "Account Settings",
                        onClick: function () {
                            o.go("accountManage")
                        },
                        condition: function () {
                            return l.isTeacher()
                        }
                    }, {
                        label: "Teacher Dashboard",
                        onClick: function () {
                            o.go("edu-dashboard")
                        },
                        condition: function () {
                            return !r("gt-sm") && l.isTeacher()
                        }
                    }, {
                        label: "Reading Challenge",
                        onClick: S,
                        condition: function () {
                            return t.showChallengeNav && a.isEducator() && !r("gt-sm")
                        }
                    }, {
                        label: "Explore",
                        onClick: function () {
                            o.go("browse")
                        },
                        condition: function () {
                            return l.isTeacher() && !y() || !l.isTeacher() && !r("gt-sm")
                        }
                    }, {
                        label: "My Library",
                        onClick: v,
                        condition: function () {
                            return !y()
                        }
                    }, {
                        label: "Roster",
                        onClick: function () {
                            o.go("roster")
                        },
                        condition: function () {
                            return l.isTeacher() && !y()
                        }
                    }, {
                        label: "Activities",
                        onClick: function () {
                            o.go("activities.class-log")
                        },
                        condition: function () {
                            return l.isTeacher() && !y()
                        }
                    }, {
                        label: "Mailbox",
                        onClick: b,
                        condition: function () {
                            return l.isTeacher() || !y()
                        }
                    }, {
                        label: "Parent Dashboard",
                        onClick: C,
                        condition: function () {
                            return !a.isEducator()
                        }
                    }, {
                        label: "Teacher Account",
                        onClick: C,
                        condition: function () {
                            return a.isEducator() && !l.currentProfile.isParent
                        }
                    }, {
                        label: "Student Login",
                        onClick: function () {
                            o.go("profileSelect")
                        },
                        condition: function () {
                            return l.isTeacher()
                        }
                    }, {
                        label: "Sign Out",
                        onClick: t.signOut,
                        condition: function () {
                            return !0
                        }
                    }];

                    function S() {
                        i.show({
                            controller: ["$scope", "$mdDialog", function (e, t) {
                                e.hide = function () {
                                    t.hide()
                                }, e.cancel = function () {
                                    t.cancel()
                                }
                            }],
                            templateUrl: "/reading-cert-overlay/fall-into-reading-2018-cert-overlay.php?uid=" + l.currentProfile.id + "&ts=" + (new Date).getTime(),
                            parent: angular.element(document.body),
                            targetEvent: null,
                            clickOutsideToClose: !0
                        })
                    }

                    function y() {
                        return !r("max-width: 1100px")
                    }

                    function C() {
                        if (c.log(c.events.PROFILE_SELECT_PARENT_DASHBOARD), "profileSelect" !== o.current.name && t.profileService.currentProfile.isParent) {
                            p.selectProfile(l.parentProfile, !0)
                        } else p.selectProfile(l.parentProfile, null)
                    }
                    t.$watch(function () {
                            return l.currentProfile.id
                        }, function (e, t) {
                            e !== t && (s.getViewedPlaylistAssignmentData(), s.getViewedMessagesData())
                        }), t.$on("$stateChangeSuccess", function () {
                            t.showHeader = !0, t.section = o.current, !a.isAuth() || t.notLoggedInStates.includes(o.current.name) ? t.isLoggedInHeader.value = !1 : t.isLoggedInHeader.value = !0, a.isEducator() ? t.logo = "logo-educators" : a.isHomeSchooler() ? t.logo = "logo-homeschools" : t.logo = "logo", t.mobileSafari = !1, (o.current.name.search("accountManage") > -1 || o.current.name.search("signIn") > -1) && "mobile" === m.device.type && "Mobile Safari" === m.browser.name && (t.mobileSafari = !0)
                        }), t.showChallengeNav = null,
                        function () {
                            (new Date).getTime();
                            new Promise(function (e, o) {
                                u.getEventStatus().then(function (e) {
                                    if (e && e.result) {
                                        var o = "eventRunning" === e.result.eventStatus;
                                        e.result && o ? t.showChallengeNav = !0 : t.showChallengeNav = !1
                                    }
                                }).catch(function (e) {})
                            })
                        }(), t.handleLogoClick = function () {
                            if ("profileSelect" !== o.current.name || a.isEducator()) return "profileSelect" === o.current.name && a.isEducator() ? void a.logout(!0).then(function () {
                                n.location.href = Globals.GLOBAL_URL + "students"
                            }) : a.isAuth() && l.isTeacher() ? void o.go("edu-dashboard") : void o.go("browse")
                        }, t.openMenu = function (e) {
                            e && (t.childProfiles = l.getChildProfilesSorted()), c.log(c.events.MENU_VIEW, {
                                child_count: l.childProfiles.length
                            })
                        }, t.routeToNuf = function () {
                            c.log(c.events.MENU_ADD_PROFILE, {
                                child_count: l.childProfiles.length
                            }), g.start(g.NEW_PROFILE)
                        }, t.handleProfileModalClick = function (e, o) {
                            t.profileService.currentProfile.isParent && 0 === o ? (p.selectProfile(e), c.log(c.events.MENU_SWITCH_TO_CHILD, {
                                child_count: t.childProfiles.length
                            })) : 0 === o ? (t.directToDashboard(), c.log(c.events.MENU_VIEW_PROFILE, {
                                child_count: t.childProfiles.length
                            })) : (p.selectProfile(e), c.log(c.events.MENU_SWITCH_TO_CHILD, {
                                child_count: t.childProfiles.length
                            }))
                        }, t.copyCode = function (e) {
                            1 === e ? t.topClassCodeCopied = !0 : t.actionClassCodeCopied = !0;
                            var o = t.accountService.accountLoginCode.toLowerCase(),
                                n = document.createElement("input");
                            n.value = o, document.body.appendChild(n).select(), document.execCommand("copy"), document.body.removeChild(n).select(), setTimeout(function () {
                                t.topClassCodeCopied = !1, t.actionClassCodeCopied = !1, t.$apply()
                            }, 2500)
                        };
                    var E = 0;
                    t.scrolledToHide = function () {
                        return E >= 165
                    }, t.directToDashboardStudentLogin = function () {
                        o.go("roster.student-login")
                    }, t.showHeaderShadow = function () {
                        return !t.isLoggedInHeader.value && E >= 50
                    }, t.showStudentLoginButton = function () {
                        return !["edu-dashboard", "search", "accountManage"].includes(o.current.name)
                    }, angular.element("#epic-app-content-container").scroll(function () {
                        E = $("#epic-app-content-container").scrollTop(), t.$apply()
                    })
                }]
            }
        })
    }(), angular.module("epicApp").directive("kudosWidget", ["Data", "$rootScope", function (e, t) {
        return {
            restrict: "E",
            scope: {
                numKudos: "=",
                activityId: "=",
                kudoStatus: "=",
                hideCount: "="
            },
            templateUrl: "kudos-widget/epic-kudos-widget.html",
            link: function (o, n, r) {
                o.clicked = function () {
                    1 == o.kudoStatus ? (o.kudoStatus = 0, o.numKudos--) : (o.kudoStatus = 1, o.numKudos++), e.get("WebCommunity", "givesKudosForActivity", {
                        activityId: o.activityId,
                        kudoStatus: o.kudoStatus
                    }), t.$broadcast("kudosWidget.update", {
                        activityId: o.activityId,
                        kudoStatus: o.kudoStatus
                    })
                }, o.$on("kudosWidget.update", function (e, t) {
                    o.activityId == t.activityId && o.kudoStatus != t.kudoStatus && (o.kudoStatus = t.kudoStatus)
                })
            }
        }
    }]), angular.module("epicApp").directive("lightburst", ["$animateCss", "$animate", "$mdDialog", function (e, t, o) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "lightburst/lightburst.html",
            link: function (e, t, o) {}
        }
    }]), angular.module("epicApp").directive("epicModal", ["EpicConfirmationService", "$modal", function (e, t) {
        return {
            restrict: "E",
            templateUrl: "modal-wrapper/epic-modal-wrapper.html",
            transclude: !0,
            scope: {
                title: "=",
                titleFontSize: "=",
                lightBackground: "=",
                close: "=",
                back: "=?",
                showBack: "=?",
                blocking: "=?",
                titleStyle: "=",
                showOverflow: "<?"
            },
            link: function (e, o, n) {
                e.closeModal = function () {
                    "required" in n && !1 !== n.required ? t.open({
                        templateUrl: "modals/quiz/quiz-confirmation/epic-quiz-confirmation.html",
                        controller: "QuizConfirmationController"
                    }).result.then(function () {
                        e.close()
                    }, function () {}) : e.close()
                }, e.closeIconSrc = "/assets/app/shared-elements/icon-light-grey-small-close.svg"
            }
        }
    }]),
    function () {
        function e(e, t, o, n, r, i) {
            var a, l, s = {
                    show: function (r) {
                        u(), l = r.scope || e.$new(), a = n(r.template)(l);
                        var i = o.find("body").eq(0),
                            s = -$(window).scrollTop() + "px";
                        i.append(a), i.toggleClass("epic-overlay-open", !0), i.css({
                            top: s
                        }), e.verticalScrollWatch && (c.push("vertical"), t.cancel(e.verticalScrollWatch), e.verticalScrollWatch = null);
                        e.horizontalScrollWatch && (c.push("horizontal"), t.cancel(e.horizontalScrollWatch), e.horizontalScrollWatch = null)
                    },
                    close: u
                },
                c = [];
            return s;

            function u() {
                if (a) {
                    a.remove(), l.$destroy();
                    var t = o.find("body").eq(0);
                    t.toggleClass("epic-overlay-open", !1), t.css({
                            top: 0
                        }),
                        function () {
                            c.includes("vertical") && (e.verticalScrollWatch = r.watchVerticalScrolling());
                            c.includes("horizontal") && (e.horizontalScrollWatch = r.watchHorizontalScrolling());
                            c = []
                        }()
                }
            }
        }
        e.$inject = ["$rootScope", "$interval", "$document", "$compile", "BookPresentationsLogger", "Logsly"], angular.module("epicApp").service("EpicOverlay", e)
    }(), angular.module("epicApp").directive("epicProgress", function () {
        return {
            restrict: "E",
            templateUrl: "progress/epic-progress.html",
            scope: {
                data: "=",
                progressId: "@"
            },
            link: function (e, t, o) {
                e.elements = t[0].getElementsByClassName("epic-progress-empty"), e.nextHighlighted = 0, e.$on("incrementEpicProgress", function (t, o) {
                    if ((!e.progressId || o.progressId == e.progressId) && e.nextHighlighted < e.elements.length) {
                        var n = e.elements[e.nextHighlighted];
                        e.nextHighlighted++, e.nextHighlighted == e.elements.length && (e.nextHighlighted = e.elements.length - 1), o.correct ? $(n).addClass("epic-progress-correct") : $(n).addClass("epic-progress-wrong")
                    }
                }), e.$on("decrementEpicProgress", function (t, o) {
                    if ((!e.progressId || o.progressId == e.progressId) && e.nextHighlighted > 0) {
                        var n = e.elements[e.nextHighlighted];
                        e.nextHighlighted--, e.nextHighlighted < 0 && (e.nextHighlighted = 0), $(n).hasClass("epic-progress-correct") && $(n).removeClass("epic-progress-correct"), $(n).hasClass("epic-progress-wrong") && $(n).removeClass("epic-progress-wrong")
                    }
                })
            }
        }
    }), angular.module("epicApp").directive("epicQuiz", ["AccountService", "ProfileService", "QuizService", "$timeout", "$modal", "Data", "$rootScope", "EpicConfirmationService", function (e, t, o, n, r, i, a, l) {
        return {
            restrict: "E",
            templateUrl: "quiz/epic-quiz.html",
            scope: {
                data: "=",
                finish: "=?",
                condition: "=?"
            },
            link: function (o, r, s) {
                var c = 0;
                $(".modal").on("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", function (e) {
                    if (!(c > 0)) {
                        c = 1, $(".epic-quiz-book-title").addClass("epic-quiz-summary-title-animation"), $(".epic-quiz-book-img").addClass("epic-quiz-book-image-animation"), $(".epic-quiz-summary-body-start").addClass("epic-quiz-summary-body-animation");
                        for (var t = 0; t < 4; t++) {
                            var o = t + 1;
                            $($(".epic-quiz-summary-body-start")[t]).addClass("epic-quiz-summary-body-animation-" + o)
                        }
                    }
                }), l.setTitle("Quiz Incomplete"), o.clone = angular.copy(o.data), o.clone;
                var u = o.clone.quiz.book_id;
                o.bookImgURL = Globals.GLOBAL_CDN_BASE + "drm/" + u.toString().slice(-1) + "/" + u + "/cover.jpg";
                var d = new Image;
                o.isVideo = !1, d.onload = function () {
                    this.width > this.height && (o.isVideo = !0)
                }, d.src = o.bookImgURL, o.isEducator = e.isEducator(), o.parentProfile = o.clone.quiz.owner, o.fullParentProfile = t.parentProfile, o.isOwnerEducator = function () {
                    return !!o.parentProfile && (o.parentProfile.accountType === e.ACCOUNT_TYPE_EDUCATOR || o.parentProfile.accountType === e.ACCOUNT_TYPE_HOMESCHOOLER)
                };
                var p = function (e) {
                    for (var t, o, n = e.length; n;) o = Math.floor(Math.random() * n--), t = e[n], e[n] = e[o], e[o] = t;
                    return e
                };
                o.paddedQuestions = [], o.addQuestionPadding = function (e) {
                    for (var t = [], o = 0, n = 0; n < e.length; n++) null !== e[n].title && "" !== e[n].title || (t.push(o), o++);
                    for (var r = 0; r < 4 - e.length; r++) t.push(o), o++;
                    return t
                };
                for (var f = 0; f < o.clone.quizQuestions.length; f++) o.paddedQuestions.push(o.addQuestionPadding(o.clone.quizQuestions[f].quizQuestionChoices)), o.clone.quizQuestions[f].quizQuestionChoices = p(o.clone.quizQuestions[f].quizQuestionChoices);
                o.quizmustacheworkerArr = [!1, !1, !1], o.$watch("td.selectedIndex", function () {
                    if (o.td.selectedIndex == o.lastIndex) {
                        var e = o.getRandomInt(0, 2);
                        o.quizmustacheworkerArr[e] = !0, n(function () {
                            a.$broadcast("triggerAnimation", {
                                id: "quizmustacheworker" + e
                            })
                        }, 1e3), o.submitScoreToServer(), o.condition = !0
                    } else 0 === o.td.selectedIndex ? o.condition = !0 : o.condition = !1
                }), o.td = {}, o.td.selectedIndex = 0, o.lastIndex = o.clone.quizQuestions.length + 1, o.getRandomInt = function (e, t) {
                    return Math.floor(Math.random() * (t - e + 1)) + e
                }, o.nextQuestion = function () {
                    o.td.selectedIndex++, o.rd.answer = null, o.correctCharCSS = [
                        [],
                        [],
                        [],
                        []
                    ], o.wrongCharCSS = [], o.correctAnswer = null, o.isWrong = !1, a.$broadcast("stopAnimation")
                }, o.answeredCorrectly = 0, o.rd = {}, o.answeredCorrectly = 0, o.answerPercentage = 0, o.resultImage = "quizgraffitirabbit", o.questionTitleToCorrect = {}, o.evalAnswer = function () {
                    var e, t, r = o.clone.quizQuestions[o.td.selectedIndex - 1],
                        i = r.quizQuestionChoices,
                        l = r.title;
                    for (e in i)
                        if ((t = i[e]).correct) {
                            o.correctAnswer = t;
                            break
                        } var s = $(".epic-question-current-index").find("md-radio-button"),
                        c = $(s[0]).offset(),
                        u = $(s[1]).offset();
                    if (o.rd.answer == o.correctAnswer.title) {
                        o.questionTitleToCorrect[l] = 1;
                        var d = o.getRandomInt(0, 2);
                        o.answeredCorrectly++, o.correctCharCSS[d] = ["show"], o.wrongCharCSS = [], o.isWrong = !1, a.$broadcast("triggerAnimation", {
                            id: "correctAnswer" + d
                        }), a.$broadcast("incrementEpicProgress", {
                            correct: 1
                        })
                    } else o.questionTitleToCorrect[l] = 0, o.correctCharCSS = [
                        [],
                        [],
                        [],
                        []
                    ], o.wrongCharCSS = ["show"], o.isWrong = !0, n(function () {
                        var e = $(".epic-question-current-index").find("md-radio-button").not(".faded-answer");
                        e.removeClass("epic-quiz-answer-fade-in");
                        var t = $(e[0]);
                        t && t.offset() && c && c.top && t.animate({
                            top: c.top - t.offset().top
                        }, 500, function () {
                            n(function () {
                                t.animate({
                                    top: "25vw",
                                    opacity: "0"
                                }, 500)
                            }, 1400)
                        });
                        var o = $(e[1]);
                        o && o.offset() && u && u.top && o.animate({
                            top: u.top - o.offset().top
                        }, 500, function () {
                            n(function () {
                                o.animate({
                                    top: "25vw",
                                    opacity: "0"
                                }, 500)
                            }, 1200)
                        })
                    }, 500), a.$broadcast("triggerAnimation", {
                        id: "wrongAnswer"
                    }), a.$broadcast("incrementEpicProgress", {
                        correct: 0
                    });
                    o.answerPercentage = Math.round(o.answeredCorrectly / o.clone.quizQuestions.length * 100), o.answerPercentage > 74 ? (o.color = ["green"], o.resultMessage = "Nice work! You're a SUPERSTAR!", o.resultImage = "quizgraffitirabbit") : o.answerPercentage > 39 ? (o.color = ["orange"], o.resultMessage = "Nice work! Keep it going!", o.resultImage = "quizdjmonster") : (o.color = ["red"], o.resultMessage = "Keep up the hard work!", o.resultImage = "quizmustacheworker"), n(o.nextQuestion, 3e3)
                }, o.submitScoreToServer = function () {
                    if (1 != o.clone.quiz.published);
                    else if (t.currentProfile.isParent && (e.isEducator() || e.isHomeSchooler()));
                    else {
                        var n = JSON.stringify({
                            quizId: o.clone.quiz.id,
                            bookId: u,
                            properties: {
                                quizQuestions: o.questionTitleToCorrect
                            }
                        });
                        i.get("WebQuiz", "submitUserQuiz", {
                            userQuizDataJSON: n,
                            numCorrect: o.answeredCorrectly,
                            numTotal: o.clone.quizQuestions.length
                        }).then(function (e) {})
                    }
                }, o.finishQuiz = function () {
                    o.finish()
                }
            }
        }
    }]), angular.module("epicApp").directive("epicQuizResultsSummary", ["QuizService", function (e) {
        return {
            restrict: "E",
            templateUrl: "quiz-results-summary/epic-quiz-results-summary.html",
            scope: {
                selectedUser: "="
            },
            link: function (t, o, n) {
                t.getScorePercentage = function () {
                    if (t.selectedUser && t.selectedUser.userQuiz) {
                        t.color = e.formattedColor(t.selectedUser.userQuiz);
                        var o = e.formattedPercentage(t.selectedUser.userQuiz);
                        t.imgTrigger = -1, o > 80 ? (t.resultMessage = "Nice work! You're a bonified SUPERSTAR!", t.imgTrigger = 0) : o > 60 ? (t.resultMessage = "Nice work! Keep it going!", t.imgTrigger = 1) : (t.resultMessage = "Keep up the hard work!", t.imgTrigger = 2);
                        var n = t.selectedUser.bookId;
                        return t.imgPath = Globals.GLOBAL_CDN_BASE + "drm/" + n.toString().slice(-1) + "/" + n + "/cover_small.jpg", o
                    }
                }
            }
        }
    }]), angular.module("epicApp").directive("epicReccommendRow", ["Data", "BookOverlay", "RecommendService", "$rootScope", "Logsly", function (e, t, o, n, r) {
        return {
            restrict: "E",
            scope: {
                bookId: "=",
                bookType: "=?",
                showOnlyRowName: "=?"
            },
            templateUrl: "reccommend-row/reccommend-row.html",
            link: function (e, t, r) {
                e.recommendService = o, e.selectedIndex = 0, e.bookType || (e.bookType = 4), e.parentLoggingContext = 4 === e.bookType ? "reccommendRowVideo" : "reccommendRow", e.logViews = function () {
                    setTimeout(function () {
                        n.$broadcast("horizontal-scroll-mixed-content")
                    }, 1e3)
                }, e.getSoloRow = function (e) {
                    if (Array.isArray(o.recommendedBookData)) {
                        for (var t = 0; t < o.recommendedBookData.length; t++) {
                            var n = o.recommendedBookData[t];
                            if (n.name === e) return n.bookData
                        }
                        return []
                    }
                    return []
                }
            }
        }
    }]), angular.module("epicApp").factory("EpicReccommendRowService", ["Data", "BookOverlay", "$rootScope", "$timeout", "Logsly", "SiteConstants", function (e, t, o, n, r, i) {
        var a = {
                isShowing: !1,
                isLockedShow: !1,
                recRows: null,
                show: function () {
                    a.isShowing = !0, n(function () {
                        o.$broadcast("vertical-scroll")
                    }, 500)
                },
                hide: function () {
                    a.isLockedShow || (a.isShowing = !1)
                },
                lockShow: function () {
                    a.isLockedShow = !0, a.show()
                },
                unlockShow: function () {
                    a.isLockedShow = !1, a.hide()
                },
                setNextBookId: function (e) {
                    a.nextBookId = e
                },
                getNextBookId: function () {
                    return a.nextBookId
                },
                setNextBook: function (e) {
                    a.nextBook = e
                },
                getNextBook: function () {
                    return a.nextBook
                }
            },
            l = function (e) {
                var t;
                return e.forEach(function (e, o) {
                    !e.id && !e.modelId || e.type !== i.BOOK_TYPE_VIDEO || t || (t = e)
                }), t
            };
        return a.getRecommendedBookData = function (o) {
            a.recRows = null, o && t.excludedBookIds.push(o);
            var n = {
                bookId: o,
                excludedBookIds: JSON.stringify(t.excludedBookIds)
            };
            return e.get("WebBook", "getRecommendedCategoriesByBookId", n).then(function (e) {
                var t, o, n, r, i;
                e && e.result && Array.isArray(e.result.UserCategory) && (a.recRows = e.result.UserCategory.filter(function (e) {
                    return Array.isArray(e.bookData) && e.bookData.length > 0
                }), a.recRows.forEach(function (e, r) {
                    e && "In This Series" == e.name ? t = l(e.bookData) : e && "More Like This" == e.name ? o = l(e.bookData) : n || (n = l(e.bookData))
                }), t ? (i = t.id ? t.id : t.modelId, r = t) : o ? (i = o.id ? o.id : o.modelId, r = o) : n && (i = n.id ? n.id : n.modelId, r = n), r && (a.setNextBook(r), a.setNextBookId(i)))
            })
        }, a
    }]),
    function () {
        function e(e, t, o, n) {
            return {
                restrict: "E",
                templateUrl: "sort-menu/epic-sort-menu.html",
                scope: {
                    sortData: "=",
                    sortModel: "="
                },
                link: function (e, t, o) {
                    for (var n = [{
                            label: "Ascending",
                            reverse: 0
                        }, {
                            label: "Descending",
                            reverse: 1
                        }], r = 0; r < e.sortData.length; r++) {
                        var i = e.sortData[r];
                        i.default && a(i)
                    }

                    function a(t) {
                        e.sortModel.property = t.property, e.sortModel.label = t.label, e.orderBy = t.orderBy || n, l(e.orderBy[0])
                    }

                    function l(t) {
                        e.sortModel.reverse = t.reverse, e.sortModel.orderLabel = t.label
                    }
                    e.selectSort = a, e.selectOrder = l
                }
            }
        }
        e.$inject = ["$http", "$templateCache", "$compile", "Data"], angular.module("epicApp").directive("epicSortMenu", e)
    }(), angular.module("epicApp").directive("standaloneQuizHeader", ["$timeout", "$modal", "ProfileService", "StringService", "CollectionService", function (e, t, o, n, r) {
        return {
            restrict: "E",
            scope: !0,
            templateUrl: "standalone-quiz-header/standalone-quiz-header.html",
            link: function (e, t, i) {
                e.profileService = o, e.stringService = n, e.maxBookTitleLength = 50, e.maxBookSubheadLength = 60, e.headerIsShowing = !0, e.headerLinks = [{
                    label: "Favorite",
                    getIcon: function () {
                        return e.favorited ? "favorite-icon-on" : "favorite-icon"
                    },
                    method: e.clickFav
                }, {
                    label: "Activity",
                    icon: "activity-icon",
                    method: e.clickActivity,
                    condition: function () {
                        return e.activities && e.activities.length > 0
                    }
                }], e.displayAddToCollectionModal = function () {
                    var t = [{
                        id: e.quizData.id,
                        title: e.quizData.title
                    }];
                    r.displayAddBookToCollectionModal(t)
                }, e.$on("$destroy", function () {})
            }
        }
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h) {
            return {
                restrict: "E",
                templateUrl: "standalone-quiz-overlay/standalone-quiz-overlay.html",
                link: function (m, v, b) {
                    h.pauseAchievementsQueue();
                    var S = angular.element(l),
                        y = "/assets/app/animations/",
                        C = String(m.quizData.id || m.quizData.modelId);
                    g.goToReadState("standalone-quiz", {
                        quizId: C
                    }), m.$on("$stateChangeStart", function (e, t) {
                        z()
                    });
                    var E = .23,
                        A = .1,
                        k = .65,
                        T = .7,
                        w = .8,
                        D = .85,
                        I = .06,
                        P = .02,
                        _ = {},
                        L = !1,
                        R = ["Quiz_PigeonAnimation_Dancing.json", "Quiz_PigeonAnimation_Confetti.json", "Quiz_PigeonAnimation_ThumbsUp.json"],
                        O = {
                            low: ["Quiz_MustacheMonsterHelmetPull.json"],
                            med: "Quiz_DJspinning.json",
                            high: "Quiz_RabbitAnimation_Confetti.json"
                        };
                    m.showLoader = !0, m.questionData = [], m.highestIndex = 0, m.currentIndex = 0, m.totalCorrectAnswers = 0, m.endCard = "preQuizCard", m.currentQuestion = "preQuizCard", m.totalQuestions = 0, m.percentCorrect = 0, m.userAnswers = [], m.openContent = c.openQuiz, m.quizIsReady = !1, m.reviewCardIsActive = !1, m.responsiveSize = N(), m.verticalResponsiveSize = U(), m.userQuizData = {
                        bookId: C,
                        properties: {
                            quizQuestions: {}
                        }
                    }, m.getQuizProgress = function () {
                        return Math.floor((m.currentIndex + 1) / m.totalQuestions * 100)
                    }, m.openReviewPanel = function () {
                        m.reviewCardIsActive = !0
                    }, m.next = function () {
                        if (m.highestIndex <= m.currentIndex) return;
                        if (L) return;
                        m.currentIndex < m.questionData.length - 1 ? (m.currentIndex++, m.currentQuestion = m.questionData[m.currentIndex], !0 === m.isEndCard && (m.isEndCard = !1), F(m.currentIndex, "forward")) : (_.userId = d.currentProfile.id, _.userQuizDataJSON = JSON.stringify(m.userQuizData), _.numCorrect = m.totalCorrectAnswers, _.numTotal = m.totalQuestions, m.percentCorrect = Math.floor(m.totalCorrectAnswers / m.totalQuestions * 100), m.endCard = "postQuizCard", m.currentQuestion = "postQuizCard", function (e) {
                            u.get("WebQuizStandalone", "submitUserQuiz", e).then(function (e) {})
                        }(_), F("postQuizCard", "forward"), m.playNextTimer = r(function () {
                            m.nextSuggestedQuiz.countdown > 0 ? m.nextSuggestedQuiz.countdown -= 1 : (m.reviewCardIsActive || m.openContent(m.nextSuggestedQuiz), r.cancel(m.playNextTimer))
                        }, 1e3))
                    }, m.previous = function () {
                        if (L) return;
                        m.currentIndex > 0 && (m.currentIndex--, m.currentQuestion = m.questionData[m.currentIndex], F(m.currentIndex, "backward"))
                    }, m.close = z, m.startQuiz = x, m.recordForSubmit = function (e) {
                        e && m.totalCorrectAnswers++;
                        m.userQuizData.properties.quizQuestions[m.currentQuestion.title] = e
                    }, m.recordForReview = function (e) {
                        m.userAnswers[m.currentIndex] = e
                    }, m.incrementHighestIndex = function () {
                        m.highestIndex++
                    }, m.displayStandaloneQuizReview = function () {
                        m.reviewCardIsActive = !0, r.cancel(m.playNextTimer), m.nextSuggestedQuiz.countdown = null, t.open({
                            template: "<standalone-quiz-review-modal></standalone-quiz-review-modal>",
                            scope: m
                        })
                    }, m.getRandomCelebrationPigeon = function () {
                        var e = Math.floor(Math.random() * R.length);
                        return y + R[e]
                    }, m.clickFav = function () {
                        m.favorited = 1 == m.favorited ? 0 : 1, 1 == m.favorited && p.track("book_favorited", "engagement");
                        f.toggleContentFavorite(m.quizData.id, m.quizData.title, m.favorited, m.quizData.type)
                    }, m.goToCurrentQuestion = function () {
                        m.currentIndex = m.highestIndex, F(m.currentIndex, "forward")
                    }, m.endAnimationHasRun = !1, m.enlargeEndAnimationMustache = !1, m.enlargeEndAnimationRabbit = !1, m.retakeQuiz = function () {
                        m.openContent(m.quizData, "retake")
                    }, m.clickActivity = function () {
                        u.get("WebCommunity", "getRecentActivityForBook", {
                            bookId: m.quizData.id
                        }).then(function (e) {
                            m.activites = e.result, t.open({
                                templateUrl: "modals/activity-overlay/activity-overlay.html",
                                scope: m
                            })
                        })
                    }, m.setAnswerIsInProgress = function (e) {
                        L = e
                    }, e.get(Globals.GLOBAL_CDN_BASE + "drm/" + C[C.length - 1] + "/" + C + "/quiz.json").then(function (e) {
                        e.data ? (e.data.forEach(function (e) {
                            if (0 === e.quizQuestionChoices.length) return G()
                        }), m.questionData = e.data, m.questionData = m.questionData.map(function (e) {
                            var t = e.quizQuestionChoices.reduce(function (e, t) {
                                return "" !== t.title && e.push(t), e
                            }, []);
                            return e.quizQuestionChoices = t, e = function (e) {
                                var t, o, n = e.quizQuestionChoices,
                                    r = n.length;
                                for (; r;) o = Math.floor(Math.random() * r--), t = n[r], n[r] = n[o], n[o] = t;
                                return e.quizQuestionChoices = n, e
                            }(e)
                        }), m.totalQuestions = m.questionData.length, u.get("WebBook", "getFullDataForWeb", {
                            bookId: C
                        }).then(function (e) {
                            e.result ? (m.quizSubject = e.result.book.subjectDesc, m.publisherName = e.result.publisherData.name, "(None)" !== e.result.publisherData.name && "(none)" !== e.result.publisherData.name ? m.publisherName = e.result.publisherData.name : m.publisherName = null, m.ageRange = 0 === e.result.book.age ? "0 - 1" : e.result.book.age - 1 + " - " + (e.result.book.age + 1), m.communityScore = e.result.book.quizPercentAvg, m.showLoader = !1, m.quizIsReady = !0, m.favorited = e.result.userBook.favorited, u.get("WebBook", "getRecommendedCategoriesByBookId", {
                                bookId: C
                            }).then(function (e) {
                                e.result && (m.suggestedQuizzes = e.result.UserCategory[0].bookData, m.nextSuggestedQuiz = m.suggestedQuizzes[0], m.nextSuggestedQuiz.countdown = 15)
                            }), m.isInDom = "loaded") : (console.warn("there was an error retrieving the quiz"), G())
                        })) : (console.warn("there was an error retrieving the quiz"), G())
                    }, function (e) {
                        console.warn("there was an error retrieving the quiz"), G()
                    }), m.$watch("isInDom", function (e) {
                        F("preQuizCard"), "retake" === m.startCard && n(x, 1e3)
                    });
                    var $ = function () {
                        m.responsiveSize = N(), m.verticalResponsiveSize = U(), "preQuizCard" === m.currentQuestion ? F("preQuizCard") : "postQuizCard" === m.currentQuestion ? F("postQuizCard", "forward") : F(m.currentIndex), m.$digest()
                    };
                    S.on("resize", $);
                    var B = function (e) {
                        27 === e.keyCode && z()
                    };

                    function N() {
                        return l.innerWidth < 600 ? "xs" : "aboveXs"
                    }

                    function U() {
                        return l.innerHeight < 700 ? "short" : "tall"
                    }

                    function x() {
                        m.currentQuestion = m.questionData[0], F(m.currentIndex)
                    }

                    function M() {
                        if (m.percentCorrect >= 99) return m.enlargeEndAnimationRabbit = !0, y + O.high;
                        if (m.percentCorrect < 99 && m.percentCorrect > 40) return y + O.med;
                        var e = Math.floor(Math.random() * O.low.length);
                        return "Quiz_MustacheMonsterHelmetPull.json" === O.low[e] && (m.enlargeEndAnimationMustache = !0), y + O.low[e]
                    }

                    function F(e, t) {
                        var n = document.getElementById("card-container");
                        if (n) {
                            var r = v[0].getElementsByTagName("quiz-card");
                            if (r) {
                                t = t || "forward", "number" == typeof e && (e += 1);
                                var l, s, c = window.innerWidth,
                                    u = "aboveXs" === m.responsiveSize ? I : P,
                                    d = "aboveXs" === m.responsiveSize ? k : w,
                                    p = "aboveXs" === m.responsiveSize ? T : D;
                                if ("preQuizCard" === e) l = Math.round((c - p * c - 2 * u * c) / 2), angular.element(n).css("transform", "translateX(" + l + "px)"), document.getElementsByTagName("quiz-card")[0] && i.addClass(document.getElementsByTagName("quiz-card")[0], "prequizcard-bounce");
                                else if ("postQuizCard" !== e) {
                                    l = e * (d * c + 2 * u * c) * -1 + (1 - p) / 2 * c - u * c, s = "forward" === t ? l - 100 : l + 100, angular.forEach(r, function (e) {
                                        angular.element(e).removeClass("active")
                                    }), angular.element(r[e]).addClass("active");
                                    var f = a(angular.element(n), {
                                            from: {
                                                transform: angular.element(n).css("transform")
                                            },
                                            to: {
                                                transform: "translateX(" + s + "px)"
                                            },
                                            duration: E
                                        }),
                                        g = a(angular.element(n), {
                                            from: {
                                                transform: angular.element(n).css("transform")
                                            },
                                            to: {
                                                transform: "translateX(" + l + "px)"
                                            },
                                            duration: A
                                        });
                                    f.start().then(function () {
                                        g.start()
                                    })
                                } else {
                                    var h = a(angular.element(n), {
                                        from: {
                                            transform: angular.element(n).css("transform")
                                        },
                                        to: {
                                            transform: "none"
                                        },
                                        duration: .3
                                    });
                                    i.addClass(n, "no-opacity").then(function () {
                                        h.start().then(function () {
                                            i.removeClass(n, "no-opacity").then(function () {
                                                m.endAnimationHasRun || (m.endAnimationHasRun = !0, m.endAnimation = bodymovin.loadAnimation({
                                                    container: o[0].getElementById("quiz-end-animation"),
                                                    renderer: "svg",
                                                    loop: m.percentCorrect > 40,
                                                    autoplay: !0,
                                                    path: M()
                                                }))
                                            })
                                        })
                                    })
                                }
                            }
                        }
                    }

                    function z() {
                        h.unpauseAchievementsQueue(), s.close()
                    }

                    function G() {
                        n(function () {
                            z()
                        }, 1500)
                    }
                    o.on("keydown", B), m.$on("$destroy", function () {
                        m.playNextTimer && r.cancel(m.playNextTimer), g.leaveReadState(), o.off("keydown", B), S.off("resize", $)
                    })
                }
            }
        }
        e.$inject = ["$http", "$modal", "$document", "$timeout", "$interval", "$animate", "$animateCss", "$window", "EpicOverlay", "StandaloneQuiz", "Data", "ProfileService", "Logsly", "FavoriteService", "ReadUrlService", "BookPresentationsLogger", "Achievement"], angular.module("epicApp").directive("standaloneQuizOverlay", e)
    }(), angular.module("epicApp").directive("epicSubjectButton", ["$document", function (e) {
        return {
            restrict: "E",
            scope: {
                subjectData: "=",
                selected: "="
            },
            templateUrl: "subject-button/epic-subject-button.html",
            link: function (e, t, o) {
                e.imagePath = function () {
                    return e.subjectData.path ? Globals.GLOBAL_CDN_BASE + e.subjectData.path + "@2x.png" : Globals.GLOBAL_CDN_BASE + "subject_icons/subject_icon_" + e.subjectData.id + "@2x.png"
                }
            }
        }
    }]),
    function () {
        angular.module("epicApp").directive("uploadButton", function () {
            return {
                restrict: "E",
                templateUrl: "upload-button/upload-button.html",
                scope: {
                    displayText: "@",
                    isMultiple: "<",
                    acceptExts: "@?",
                    submitHandler: "&",
                    overrideIsLoading: "=?"
                },
                link: function (e, t, o) {
                    e.isLoading = !1, e.inputElementId = "input_" + e.displayText.replace(/\ /g, "_") + "_" + Date.now();
                    var n = e.$watch(function () {
                        return document.getElementById(e.inputElementId)
                    }, function (e, t) {
                        null !== e && (e.onchange = r, n())
                    });

                    function r() {
                        e.$apply(function () {
                            e.isLoading = !0
                        });
                        var t = document.getElementById(e.inputElementId).files;
                        e.submitHandler()(t).then(function (t) {
                            e.isLoading = !1
                        }, function (t) {
                            e.isLoading = !1
                        })
                    }
                }
            }
        })
    }(), angular.module("epicApp").directive("videoPlayer", ["$rootScope", "$http", "$state", "$timeout", "$interval", "Data", "ProfileService", "StringService", "CollectionData", "BookOverlay", "BookService", "QuizService", "RecommendService", "LogEntryService", "BigQuery", "VideoService", "ABTestService", "ContentVolumeService", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h, v) {
        return {
            restrict: "E",
            scope: {
                bookId: "=",
                bookTitle: "=",
                contentType: "="
            },
            templateUrl: "video-player/epic-video-player.html",
            link: function (h, b, S) {
                var y = function () {
                    return Math.floor(Date.now() / 1e3)
                };
                h.player = null;
                var C = [],
                    E = {},
                    A = 0,
                    k = y(),
                    T = null,
                    w = 0;
                h.sliderModel = 0, h.playerActive = !1, h.bookIsFinished = !1, h.buffering = !1, h.chapterTime = l.toHHMMSS(0), h.chapterDuration = l.toHHMMSS(0);
                var D = null;
                h.playerReady = !1, h.quizService = d, h.bookService = u, h.contentVolumeService = v, h.recommendService = p, h.player = new Clappr.Player({
                    source: "",
                    parentId: "#player-chrome",
                    maxBufferLength: 30,
                    baseUrl: "../assets/clappr",
                    autoPlay: !0,
                    chromeless: !0,
                    persistConfig: !1,
                    playbackNotSupportedMessage: " ",
                    plugins: []
                }), h.playButton = "/assets/video/play_button.svg", h.pauseButton = "/assets/video/pause_button.svg", h.volumeOn = "/assets/video/volume_on.svg", h.volumeOff = "/assets/video/volume_off.svg", h.fullscreenOn = "/assets/video/fullscreen_on.svg", h.fullscreenOff = "/assets/video/fullscreen_off.svg", i.get("WebUserBook", "logVideoOpened", {
                    bookId: h.bookId
                }), m.incrementPlayCount(), f.findOrCreateCurrentLogEntry(h.bookId).then(function (e) {
                    E = e || {}
                }), i.get("WebBook", "getVideoFolderPath", {
                    bookId: h.bookId
                }).then(function (e) {
                    if (e.result) {
                        h.folderPath = e.result;
                        var o = Globals.GLOBAL_SECURE_CDN_BASE + e.result;
                        t.get(o).then(function (e) {
                            C = e.data, h.loadAndPlayVideo()
                        })
                    } else console.warn("problem getting video folder path data...")
                }, function () {
                    console.warn("request for video folder path was rejected...")
                }), h.playPause = function () {
                    h.player.isPlaying() ? (h.player.pause(), h.playerActive = !1, U(!0)) : (h.player.play(), h.playerActive = !0, k = y()), R(), h.showControls()
                }, h.loadAndPlayVideo = function () {
                    var e = C[0];
                    if (e && e.src) {
                        var t;
                        h.player.load((t = e.src, Globals.GLOBAL_URL_CONTENT + String(h.bookId).slice(-1) + "/" + h.bookId + "/" + t + "?loc=en_US&userId=" + a.currentProfile.id + "&ver=1.0&chapter=0&bookId=" + h.bookId + "&dev=web")), h.chapterDuration = l.toHHMMSS(e.duration), h.buffering = !1, h.playerReady || (h.playerReady = !0, M()), h.player.play();
                        var o = u.getFarthestPageIndex();
                        0 !== o && _(o)
                    }
                }, h.fullscreen = !1, h.toggleFullscreen = function () {
                    var e = document.getElementById("video-player");
                    P() ? (document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen && document.msExitFullscreen(), I("mini")) : (e.requestFullscreen ? e.requestFullscreen() : e.webkitRequestFullscreen ? e.webkitRequestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.msRequestFullscreen && e.msRequestFullscreen(), I("full")), setTimeout(function () {
                        M()
                    }, 250)
                };
                var I = function (e) {
                        var t = {
                                content_type: "video",
                                book_id: u.bookData.book.id,
                                src: u.bookOpenSource
                            },
                            o = "full" === e ? g.events.CONTENT_FULL_SCREEN_IN : g.events.CONTENT_FULL_SCREEN_OUT;
                        g.log(o, t)
                    },
                    P = function () {
                        return !!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement)
                    };

                function _(e) {
                    h.player && (h.player.seek(e), R())
                }
                h.$on("video.playPause", function (e, t) {
                    t.pause ? h.player.isPlaying && (h.player.pause(), h.playerActive = !1) : h.playPause()
                }), h.isVolumeControlShowing = !1, h.toggleVolume = function () {
                    v.toggleMute()
                }, h.openVolumeSlider = function () {
                    h.isVolumeControlShowing = !0
                }, h.closeVolumeSlider = function () {
                    h.isVolumeControlShowing = !1
                }, h.onSliderChange = function () {
                    _(h.sliderModel / 1e3 * h.player.getDuration())
                }, h.player.on(Clappr.Events.PLAYER_TIMEUPDATE, function (e) {
                    h.chapterTime = l.toHHMMSS(h.player.getCurrentTime() || 0), !h.player.isPlaying() || B.hasClass("md-dragging") || h.buffering || (h.sliderModel = parseInt(h.player.getCurrentTime() / h.player.getDuration() * 1e3), U())
                }), h.player.on(Clappr.Events.PLAYER_READY, function () {
                    h.buffering = !0
                }), h.player.on(Clappr.Events.PLAYER_PLAY, function () {
                    h.player.play(), h.player.isPlaying() && (h.playerActive = !0)
                }), h.player.on(Clappr.Events.PLAYER_ENDED, function () {
                    i.get("WebUserBook", "logVideoFinished", {
                        bookId: h.bookId
                    }), g.log(g.events.CONTENT_FINISH_VIDEO, {
                        book_id: h.bookId,
                        content_type: h.contentType,
                        title: h.bookTitle
                    });
                    var t = {
                        bookId: h.bookId
                    };
                    i.post("WebUserBook", "finishBook", t).then(function (t) {
                        t.result && t.result.timesCompleted && (h.bookIsFinished = !0, a.currentProfile.booksFinished++, e.$broadcast("bookFinished"))
                    }), E.progress = 100, E.finished = 1, f.updateLogEntry(E).then(function (e) {
                        E = e || {}
                    }), h.playerActive = !1, L()
                }), h.timeUntilNext = 500, h.playNextTimer = null, h.shouldPlayNext = !0, h.$on("quiz.drawer", function (e, t) {
                    t && t.openDrawer ? h.shouldPlayNext = !1 : h.shouldPlayNext = !0
                }), h.playNextImmediately = function () {
                    R(), c.open(p.nextBookRecommendation.id)
                };
                var L = function () {
                        p.nextBookRecommendation.id && h.shouldPlayNext && (h.playNextTimer = r(function () {
                            h.shouldPlayNext && (h.timeUntilNext > 0 ? h.timeUntilNext-- : (g.log(g.events.CONTENT_AUTOPLAY_VIDEO), h.playNextImmediately()))
                        }, 10))
                    },
                    R = function () {
                        h.playNextTimer && (r.cancel(h.playNextTimer), h.playNextTimer = null, h.timeUntilNext = 500)
                    };
                h.takeQuiz = function () {
                    h.shouldPlayNext = !1, h.quizService.takeQuiz(h.bookTitle)
                }, h.player.on(Clappr.Events.PLAYER_ERROR, function (e) {
                    console.warn("Video error!", e);
                    var t = h.player.core.getCurrentPlayback();
                    "hls" === t.name && t.hls && (console.warn("playback.hls.swapAudioCodec()"), t.hls.swapAudioCodec(), console.warn("playback.hls.recoverMediaError()"), t.hls.recoverMediaError())
                });
                var O = $(".player-controls"),
                    B = $("#slider"),
                    N = ($("video-player"), 0);
                T || (T = r(function () {
                    h.player.isPlaying() && Date.now() > N ? O.addClass("player-controls-hidden") : O.removeClass("player-controls-hidden")
                }, 250));
                var U = function (e) {
                    var t = y(),
                        o = t - k;
                    if (w += o, (A += o) >= 10 || e && h.bookId) {
                        var n = A;
                        A = 0, i.post("WebUserBook", "logVideoProgress", {
                            bookId: h.bookId,
                            progress: n
                        });
                        var r = h.bookIsFinished,
                            a = {
                                bookId: h.bookId,
                                index: 0,
                                farthestPageIndex: r ? 0 : parseInt(h.player.getCurrentTime()),
                                duration: n
                            };
                        i.post("WebUserBook", "updateUserBookWithIndex", a), E.progress = parseInt(h.player.getCurrentTime() / h.player.getDuration() * 100), E.time = (parseInt(E.time) || 0) + n, f.updateLogEntry(E).then(function (e) {
                            E = e || {}
                        })
                    }
                    k = t
                };
                h.showControls = function () {
                    N = Date.now() + 1500
                }, h.showControls();
                var x = function (e) {
                        D && n.cancel(D), D = n(function () {
                            M()
                        }, e || 300)
                    },
                    M = function () {
                        var e = P() ? 0 : 310,
                            t = $("#video-player"),
                            o = $("#player-chrome :first-child"),
                            n = $(".player-controls"),
                            r = $("#player-chrome"),
                            i = 2 * o.attr("ratio");
                        i || (i = 16 / 9);
                        var a = Math.round($("video-player").width()),
                            l = Math.round($(window).height() - 0 - e);
                        if (h.diameter = .5 * l, a / l > i) {
                            var s = Math.round(l * i);
                            t.height(l), t.css({
                                "max-width": s
                            }), o.width(s).height(l), r.width(s).height(l)
                        } else {
                            var c = Math.round(a / i);
                            t.height(c), t.css({
                                "max-width": a
                            }), o.width(a).height(c), r.width(a).height(c)
                        }
                        n.css({
                            height: o.height() + "px"
                        }), n.css({
                            top: -o.height() + "px"
                        });
                        var u = Math.max((Math.round($("video-player").height()) - o.height()) / 2 - e, 0);
                        o.css("margin-top", u + "px")
                    };
                $(window).resize(x), window.addEventListener("orientationchange", x, !1), h.$on("flipBook.resize", function () {
                    x(1e3)
                }), h.showCollection = function (e, t) {
                    c.close(), s.books = t, s.name = e, o.go("collection")
                };
                var F = function (e) {
                    h.fullscreen = !h.fullscreen
                };
                document.addEventListener("fullscreenchange", F), document.addEventListener("webkitfullscreenchange", F), document.addEventListener("mozfullscreenchange", F), document.addEventListener("MSFullscreenChange", F), h.$on("$destroy", function () {
                    document.removeEventListener("fullscreenchange", F), document.removeEventListener("webkitfullscreenchange", F), document.removeEventListener("mozfullscreenchange", F), document.removeEventListener("MSFullscreenChange", F), window.removeEventListener("orientationchange", x, !1), T && (r.cancel(T), T = null), h.playNextTimer && (r.cancel(h.playNextTimer), h.playNextTimer = null), D && (n.cancel(D), D = null), h.player.destroy(), U(!0), g.log(g.events.CONTENT_CLOSED_VIDEO, {
                        book_id: h.bookId,
                        title: h.bookTitle,
                        videos: m.consecutivePlays,
                        view_duration: w,
                        src: u.bookOpenSource
                    })
                })
            }
        }
    }]),
    function () {
        function e(e, t, o, n, r) {
            return {
                restrict: "E",
                templateUrl: "achievement-toast/achievement-reward-chip/achievement-reward-chip.html",
                link: function (e, t, o) {}
            }
        }
        e.$inject = ["Logsly", "$window", "$document", "$animate", "$timeout"], angular.module("epicApp").directive("achievementRewardChip", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            return {
                restrict: "E",
                templateUrl: "achievement-toast/achievement-toast/achievement-toast.html",
                link: function (r, a, l) {
                    r.dismissHandler = function () {
                        if (d) return;
                        d = !0, m.goToAndStop(m.totalFrames, !0);
                        for (var e = 0; e < f.length; e++) {
                            var t = f[e];
                            o.addClass(t.compiledElement, "skipped")
                        }
                    };
                    var s = 1.8,
                        c = 400,
                        u = 100,
                        d = !1,
                        p = !1,
                        f = [],
                        g = n[0].getElementById("wings-badge-anim-container"),
                        m = bodymovin.loadAnimation({
                            container: g,
                            renderer: "svg",
                            loop: !1,
                            autoplay: !1,
                            path: "/assets/app/animations/AchievementAnimation_080117.json"
                        });

                    function h() {
                        if (d) {
                            var e = document.getElementsByClassName("achievement-badge")[0],
                                t = document.getElementsByClassName("achievement-title-container")[0];
                            o.addClass(e, "skipped").then(y), o.addClass(t, "skipped")
                        }
                        m.removeEventListener("complete", h),
                            function () {
                                if (r.rewardChips.length <= 0) return v();
                                f = r.rewardChips.slice();
                                var e = 0,
                                    t = document.getElementById("achievement-toast-container");

                                function n() {
                                    if (e === r.rewardChips.length - 1 || d) return d || y(), v();
                                    f.indexOf(r.rewardChips[e]) > -1 && f.splice(f.indexOf(r.rewardChips[e]), 1), y(), e++
                                }
                                for (var i = 0; i < r.rewardChips.length; i++) {
                                    o.enter(r.rewardChips[i].compiledElement, a[0], t.lastChild).then(n);
                                    d || r.$apply()
                                }
                            }()
                    }

                    function v() {
                        return t(b, d ? u : c)
                    }

                    function b() {
                        m.setDirection(-1), m.setSpeed(s), m.play(), p || (m.addEventListener("complete", S), p = !0), t(function () {
                            for (; r.rewardChips.length > 0;) {
                                var e = r.rewardChips.pop();
                                e.scopeObj.$destroy(), e.compiledElement.remove()
                            }
                            var t = document.getElementsByClassName("achievement-title-container")[0];
                            o.removeClass(t, "title-text-zoom-in")
                        }, 900)
                    }

                    function S() {
                        m.destroy(), e.closeAchievement()
                    }

                    function y() {
                        var e = document.getElementById("epic-app-content-container"),
                            t = document.getElementById("achievement-toast-container");
                        return i.shakeScreen(t), i.shakeScreen(e)
                    }
                    m.setSpeed(1.6), m.addEventListener("data_ready", function () {
                        m.play(), m.addEventListener("complete", h);
                        var e = document.getElementsByClassName("achievement-badge")[0],
                            t = document.getElementsByClassName("achievement-title-container")[0];
                        o.addClass(e, "badge-zoom-in").then(y), o.addClass(t, "title-text-zoom-in"), r.$apply()
                    })
                }
            }
        }
        e.$inject = ["Achievement", "$timeout", "$animate", "$document", "Data", "ScreenShaker"], angular.module("epicApp").directive("achievementToast", e)
    }(), angular.module("epicApp").factory("ContentVolumeService", ["LocalStorageService", function (e) {
        var t = {},
            o = e,
            n = o.get("volume");
        return t.isLoaded = o.get("volume"), t.value = n ? n.level : 100, t.muted = !!n && n.muted, t.valueContainerForMute = t.value, t.isLoaded = function () {
            return t.isLoaded
        }, t.initValues = function () {
            o.set("volume", {
                level: 100,
                muted: !1
            })
        }, t.setValue = function (e) {
            0 == e ? t.muted = !0 : 0 != e && (t.muted = !1), t.value = e, o.set("volume", {
                level: e,
                muted: t.muted
            })
        }, t.getValue = function () {
            return t.value
        }, t.toggleMute = function () {
            t.muted = !t.muted, t.muted && (t.valueContainerForMute = t.value);
            var e = t.muted ? 0 : t.valueContainerForMute;
            t.value = e, o.set("volume", {
                level: e,
                muted: t.muted
            })
        }, t.isMuted = function () {
            return !!t.muted
        }, t
    }]), angular.module("epicApp").directive("volumeSlider", ["AudioService", "ContentVolumeService", function (e, t) {
        return {
            restrict: "E",
            scope: {
                player: "="
            },
            templateUrl: "book-overlay/slider-control/volume-slider.html",
            link: function (o, n, r) {
                o.contentVolumeService = t, o.progressWidth = 1.6 * t.value, o.isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1, o.$watch("contentVolumeService.value", function (n, r) {
                    t.setValue(t.value), o.$parent && o.$parent.player ? o.$parent.player.core.mediaControl.setVolume(n) : e.isLoaded && e.setVolume(n / 100), o.progressWidth = 1.6 * n
                }), o.onMouseWheel = function (e, o, n, r) {
                    if (o) {
                        var i = r < 0 ? Math.min(t.value + -r, 100) : Math.max(t.value - r, 0);
                        t.setValue(i)
                    }
                }
            }
        }
    }]), angular.module("epicApp").directive("zoomSlider", ["MagicPanService", function (e) {
        return {
            restrict: "E",
            scope: !0,
            templateUrl: "book-overlay/slider-control/zoom-slider.html",
            link: function (t, o, n) {
                t.magicPanService = e, e.maxZoom, t.progressWidth = 0, t.isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1, t.$watch("magicPanService.zoomLevel", function (e, o) {
                    t.progressWidth = 160 * (e - 1)
                }), t.onMouseWheel = function (t, o, n, r) {
                    if (o) {
                        var i = r / 100,
                            a = i < 0 ? Math.min(e.zoomLevel + -i, 2) : Math.max(e.zoomLevel - i, 1);
                        e.updateZoomLevel(a)
                    }
                }
            }
        }
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c) {
            return {
                restrict: "E",
                scope: {
                    content: "=",
                    sizeSmall: "<",
                    sizeThumbnail: "<",
                    sizeFlexible: "<",
                    index: "=",
                    rowIndex: "=",
                    rowTitle: "<",
                    sizeCard: "<",
                    section: "=?",
                    parentLoggingContext: "<",
                    tabName: "<",
                    showBookShareButtons: "<",
                    disableScale: "<"
                },
                templateUrl: "content-item/epic-book-item/epic-book-item.html",
                link: function (u, d, p) {
                    u.media = r, u.isHovered = {
                        value: !1
                    }, u.getClass = function () {
                        return u.sizeCard ? "search-card" : u.sizeThumbnail ? "search-thumb" : u.sizeFlexible ? "flexible" : !r("gt-xs") || u.sizeSmall ? "sm" : void 0
                    }, u.getThumbPath = function () {
                        return i.resizeThumb(u.content.id || u.content.modelId, {
                            width: 200,
                            quality: 90,
                            contentHash: u.content.contentHash
                        })
                    };
                    var f = [1, 2, 3],
                        g = t.current.name;
                    u.content && 2 === u.content.type ? u.contentType = "audiobook" : u.content.audio ? u.contentType = "read-to-me" : u.contentType = "book", u.sourceId = "user-collection" === g ? t.params.collectionId : null;
                    var m = d[0].getElementsByClassName("epic-book-item")[0];
                    a.makeContentItemLevelCheckIfViewedAndLog(m, g, u.content.modelId, u), u.openContent = function () {
                        var t = u.content;
                        if (t.active || Globals.GLOBAL_STAGING_MODE)
                            if (f.indexOf(t.type) > -1) {
                                e.$broadcast("clickOnBookFinish", {
                                    click_type: "new_content",
                                    content_index: u.index
                                });
                                var r = c.translateSourceString(g, u.section, u.rowTitle, u.rowIndex, u.sourceId, u.parentLoggingContext, u.tabName, !1, u.content.title);
                                o.openBook(t, r), a.addOpenedContentData(u.content.modelId, g, u), "isBetaRow" in t && l.log(l.events.NEW_INTEREST_CONTENT_OPEN, {
                                    interest_id: t.subjectId,
                                    row_name: t.rowName,
                                    book_id: Number(t.id),
                                    is_beta: t.isBetaRow
                                }), "search" === g && l.log(l.events.SEARCH_CONTENT_OPENED, {
                                    search_term: s.searchText,
                                    search_type: s.getSearchType(),
                                    tab: s.currentTabName,
                                    row_number: u.rowIndex,
                                    index_number: u.index,
                                    content_type: u.contentType
                                })
                            } else console.warn("Cannot open book type: " + t.type + " from epicBookItem directive");
                        else n.show(t.id || t.modelId)
                    }, u.showProgressBar = !1, u.bookProgress = null, "progress" in u.content && (u.showProgressBar = !0, u.bookProgress = u.content.progress)
                }
            }
        }
        e.$inject = ["$rootScope", "$state", "BookService", "InactiveBookModal", "$mdMedia", "AssetService", "BookPresentationsLogger", "BigQuery", "SearchService", "LoggingSourceTranslation"], angular.module("epicApp").directive("epicBookItem", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            return {
                restrict: "E",
                scope: {
                    collection: "<",
                    noClick: "=",
                    index: "=",
                    rowIndex: "=",
                    rowTitle: "=",
                    section: "=?",
                    sizeThumbnail: "=",
                    sizeCard: "=",
                    hoverDisabled: "=",
                    showDescription: "<",
                    width: "<",
                    reduceMargins: "<"
                },
                templateUrl: "content-item/epic-collection-card-item/epic-collection-card-item.html",
                link: function (a, l, s) {
                    a.collectionList = a.collection.simpleBookData, a.collectionId = a.collection.id || a.collection.modelId, a.collectionTitle = a.collection.title, a.collectionBy = a.collection.ownerName, a.collectionViews = a.collection.views, a.goToCollection = function () {
                        if (a.noClick) return;
                        e.addOpenedContentData(a.collectionId, c, a), i.goToCollection(a.collection), "search" === c && n.log(n.events.SEARCH_CONTENT_OPENED, {
                            search_term: r.searchText,
                            search_type: r.getSearchType(),
                            tab: r.currentTabName,
                            row_number: a.rowIndex,
                            index_number: a.index,
                            content_type: a.contentType
                        })
                    }, a.getContentImageUrl = function (e) {
                        return o.resizeThumb(e, {
                            width: 195,
                            quality: 90
                        })
                    }, a.emptyBookImgSrc = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/empty-book-slot.svg", a.viewsImgSrc = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/icon-eye.svg", a.TYPE_BOOK = "book", a.TYPE_VIDEO = "video", a.TYPE_QUIZ = "quiz", a.TYPE_EMPTY = "empty", a.$watchCollection("collection", function (e, t) {
                        a.collectionList = a.collection.simpleBookData, a.collectionId = a.collection.id || a.collection.modelId, a.collectionTitle = a.collection.title, a.collectionBy = a.collection.ownerName, a.collectionViews = a.collection.views
                    }), a.showSingleBook = !1, a.singleBook = null, a.collection.type === i.TYPES.SINGLE_BOOK && (a.showSingleBook = !0, a.singleBook = a.collectionList[0], l[0].getElementsByClassName("epic-collection-card-item")[0].style.width = a.width), a.showSingleBook || (a.width && (l[0].getElementsByClassName("epic-collection-card-item")[0].style.width = a.width), d(), a.$watch(function () {
                        return a.collectionList
                    }, function (e, t) {
                        e !== t && d()
                    }, !0));
                    var c = t.current.name,
                        u = l[0].getElementsByClassName("epic-collection-card-item")[0];

                    function d() {
                        var e;
                        a.books = [], a.videos = [], a.quizzes = [];
                        for (var t = 0; t < a.collectionList.length && a.books.length < 4; t++) 5 === (e = a.collectionList[t]).type ? a.quizzes.push(e) : 4 === e.type ? a.videos.push(e) : a.books.push(e);
                        var o = a.books.length,
                            n = a.videos.length,
                            r = a.quizzes.length,
                            i = a.collectionList.length;
                        if (a.displayItems = [], a.remainingCount = 0, o >= 4)
                            for (t = 0; t < 4; t++) a.displayItems.push({
                                type: a.TYPE_BOOK,
                                index: t
                            });
                        else if (3 === o || 2 === o)
                            if (a.displayItems.push({
                                    type: a.TYPE_BOOK,
                                    index: 0
                                }), a.displayItems.push({
                                    type: a.TYPE_BOOK,
                                    index: 1
                                }), n > 0) Math.floor(2 * Math.random()) ? a.displayItems.push({
                                type: a.TYPE_VIDEO,
                                index: 0
                            }) : a.displayItems.unshift({
                                type: a.TYPE_VIDEO,
                                index: 0
                            });
                            else if (r > 0) a.displayItems.push({
                            type: a.TYPE_QUIZ,
                            index: 0
                        });
                        else
                            for (t = 2; t < o; t++) a.displayItems.push({
                                type: a.TYPE_BOOK,
                                index: t
                            });
                        else 1 === o ? n > 0 ? (a.displayItems.push({
                            type: a.TYPE_VIDEO,
                            index: 0
                        }), n > 1 ? a.displayItems.push({
                            type: a.TYPE_VIDEO,
                            index: 1
                        }) : r > 0 ? a.displayItems.push({
                            type: a.TYPE_QUIZ,
                            index: 0
                        }) : a.displayItems.push({
                            type: a.TYPE_BOOK,
                            index: 0
                        })) : (r > 0 && a.displayItems.push({
                            type: a.TYPE_QUIZ,
                            index: 0
                        }), a.displayItems.push({
                            type: a.TYPE_BOOK,
                            index: 0
                        })) : n > 0 ? (a.displayItems.push({
                            type: a.TYPE_VIDEO,
                            index: 0
                        }), n > 1 ? a.displayItems.push({
                            type: a.TYPE_VIDEO,
                            index: 1
                        }) : r > 0 && a.displayItems.push({
                            type: a.TYPE_QUIZ,
                            index: 0
                        })) : (a.displayItems.push({
                            type: a.TYPE_QUIZ,
                            index: 0
                        }), r > 1 && a.displayItems.push({
                            type: a.TYPE_QUIZ,
                            index: 1
                        }));
                        var l = 0;
                        a.displayItems.forEach(function (e) {
                            l += e.type === a.TYPE_BOOK ? 1 : 2, e.imgUrl = a.getContentImageUrl(e.modelId || e.id)
                        }), a.remainingCount = i - a.displayItems.length, a.displayItems[a.displayItems.length - 1].lastItem = !0;
                        var s = 4 - l;
                        for (t = 0; t < s; t++) a.displayItems.push({
                            type: a.TYPE_EMPTY
                        })
                    }
                    a.contentType = "collection", e.makeContentItemLevelCheckIfViewedAndLog(u, c, a.collectionId, a)
                }
            }
        }
        e.$inject = ["BookPresentationsLogger", "$state", "AssetService", "BigQuery", "SearchService", "CollectionService"], angular.module("epicApp").directive("epicCollectionCardItem", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            return {
                restrict: "E",
                scope: {
                    collectionList: "=",
                    collectionId: "=",
                    noClick: "=",
                    index: "=",
                    rowIndex: "=",
                    rowTitle: "=",
                    section: "=",
                    sizeThumbnail: "=",
                    sizeCard: "=",
                    hoverDisabled: "="
                },
                templateUrl: "content-item/epic-collection-item/epic-collection-item.html",
                link: function (i, a, l) {
                    i.getContentImageUrl = o.resizeThumb, i.goToCollection = function () {
                        if (i.noClick) return;
                        e.addOpenedContentData(i.collectionId, s, i), t.go("user-collection", {
                            collectionId: i.collectionId
                        }), "search" === s && n.log(n.events.SEARCH_CONTENT_OPENED, {
                            search_term: r.searchText,
                            search_type: r.getSearchType(),
                            tab: r.currentTabName,
                            row_number: i.rowIndex,
                            index_number: i.index,
                            content_type: i.contentType
                        })
                    }, u(), i.$watch(function () {
                        return i.collectionList
                    }, function (e, t) {
                        e !== t && u()
                    }, !0);
                    var s = t.current.name,
                        c = a[0].getElementsByClassName("epic-collection-item")[0];

                    function u() {
                        i.books = [], i.videos = [], i.quizzes = [], i.collectionList.forEach(function (e, t) {
                            5 === e.type ? i.quizzes.push(e) : 4 === e.type ? i.videos.push(e) : i.books.push(e)
                        }), i.books = i.videos.length > 0 ? i.books.slice(0, 3) : i.books.slice(0, 4), i.videos = i.books.length > 0 ? i.videos.slice(0, 1) : i.videos.slice(0, 3), i.quizzes = i.quizzes.length > 0 ? i.quizzes.slice(0, 1) : i.quizzes.slice(0, 3), i.bookStyles = i.books.map(function (e, t) {
                            return "position-" + (t + 1)
                        }), i.videoStyles = i.videos.map(function (e, t) {
                            return "position-" + (t + 1)
                        }), i.quizStyles = i.quizzes.map(function (e, t) {
                            return "position-" + (t + 1)
                        })
                    }
                    i.contentType = "collection", e.makeContentItemLevelCheckIfViewedAndLog(c, s, i.collectionId, i)
                }
            }
        }
        e.$inject = ["BookPresentationsLogger", "$state", "AssetService", "BigQuery", "SearchService"], angular.module("epicApp").directive("epicCollectionItem", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l) {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    contentData: "<",
                    detailsData: "<",
                    showDetails: "<",
                    levelType: "<"
                },
                templateUrl: "content-item/epic-content-card-item/epic-content-card-item.html",
                controller: function () {
                    var a, l = this;
                    this.bookService = t, this.collectionService = o, this.favoriteService = n, this.abTestService = e, this.BOOK_TYPE_STANDARD = 1, this.BOOK_TYPE_AUDIOBOOK = 2, this.BOOK_TYPE_ARTICLE = 3, this.BOOK_TYPE_VIDEO = 4, this.BOOK_TYPE_QUIZ = 5, this.isHovered = !1, this.shouldShowHoverDetails = !1, this.cdnPath = Globals.GLOBAL_CDN_BASE, this.fields = {}, this.fieldsData = {}, this.favorites = null, this.showReadingLevelDetails = [this.BOOK_TYPE_STANDARD, this.BOOK_TYPE_AUDIOBOOK, this.BOOK_TYPE_VIDEO], this.levelType = "", this.eduAssigningVariant = e.EDU_ASSIGNING_CONTROL, this.$onChanges = function (e) {}, this.$onInit = function () {
                        n.getFavorites().then(function (e) {
                            l.favorites = e.books ? e.books : {}
                        }), l.eduAssigningVariant = e.getVariantForEduAssign(), l.fields[l.BOOK_TYPE_STANDARD] = {
                            fixed: [],
                            additional: ["age", "avgTime", "numPages", "quiz"]
                        }, l.fields[l.BOOK_TYPE_AUDIOBOOK] = {
                            fixed: [],
                            additional: ["age"]
                        }, l.fields[l.BOOK_TYPE_VIDEO] = {
                            fixed: []
                        }, l.fieldsData = {
                            lexile_level: {
                                label: l.levelType ? "Level: " : "Lexile Level: ",
                                value: l.detailsData.isConverted.includes("lexile_level") ? "".concat(l.detailsData.lexileLevel) : l.contentData.lexile,
                                isConvertedValue: l.detailsData.isConverted.includes("lexile_level")
                            },
                            accelerated_level: {
                                label: l.levelType ? "Level: " : "AR Level: ",
                                value: l.detailsData.isConverted.includes("accelerated_level") ? "".concat(l.detailsData.arLevel) : l.contentData.ar,
                                isConvertedValue: l.detailsData.isConverted.includes("accelerated_level")
                            },
                            dra_level: {
                                label: l.levelType ? "Level: " : "DRA Level: ",
                                value: l.detailsData.isConverted.includes("dra_level") ? "".concat(l.detailsData.draLevel) : l.contentData.dra,
                                isConvertedValue: l.detailsData.isConverted.includes("dra_level")
                            },
                            fandp_level: {
                                label: l.levelType ? "Level: " : "F&P Level: ",
                                value: l.detailsData.isConverted.includes("fandp_level") ? "".concat(l.detailsData.fandpLevel) : l.contentData.fandp,
                                isConvertedValue: l.detailsData.isConverted.includes("fandp_level")
                            },
                            guided_reading_level: {
                                label: l.levelType ? "Level: " : "GR Level: ",
                                value: l.detailsData.isConverted.includes("guided_reading_level") ? "".concat(l.detailsData.grLevel) : l.contentData.gr,
                                isConvertedValue: l.detailsData.isConverted.includes("guided_reading_level")
                            },
                            age: {
                                label: "Age: ",
                                value: "".concat(Math.max(0, l.contentData.age - 1), "-").concat(l.contentData.age + 1)
                            },
                            grade: {
                                label: "Grade: ",
                                value: t.getGradeRangeFromAge(l.contentData.age)
                            },
                            avgTime: {
                                label: "Length: ",
                                value: l.contentData.avgTime
                            },
                            numPages: {
                                label: "Pages: ",
                                value: l.contentData.numPages
                            },
                            quiz: {
                                label: "Epic! Quiz: ",
                                value: l.detailsData.numQuizzes > 0 ? "Yes" : "No"
                            }
                        }, s()
                    }, this.toggleHover = function () {
                        l.isHovered = !l.isHovered, l.isHovered ? a = i(function () {
                            l.shouldShowHoverDetails = !0
                        }, 300) : (l.shouldShowHoverDetails = !1, i.cancel(a))
                    }, this.openBook = function () {
                        var e = {};
                        l.detailsData.isConverted.includes(l.levelType) && (e.convertedData = Object.assign({}, l.fieldsData[l.levelType]), e.convertedData.label = "Level"), e.system = l.levelType, t.openBook(l.contentData, r.current.name, e)
                    };
                    var s = function () {
                        var e = l.contentData.type;
                        if (e !== l.BOOK_TYPE_VIDEO) {
                            l.showReadingLevelDetails.includes(l.contentData.type) && (l.fields[e].fixed = l.levelType ? [l.levelType] : ["grade"])
                        } else l.fields[e].fixed = ["grade"]
                    };
                    this.favorite = function () {
                        l.eduAssigningVariant === e.EDU_ASSIGNING_CONTROL ? n.toggleContentFavorite(l.contentData.id, l.contentData.title, !l.favorites[l.contentData.id], l.contentData.type) : o.displaySaveContentModal(l.contentData, "search")
                    }, this.collectionOrAssign = function () {
                        l.eduAssigningVariant === e.EDU_ASSIGNING_CONTROL ? o.displayAddBookToCollectionModal([l.contentData]) : o.startAssignContentFlow(l.contentData, "search")
                    }
                },
                controllerAs: "ctrl"
            }
        }
        e.$inject = ["ABTestService", "BookService", "CollectionService", "FavoriteService", "$state", "$timeout", "SearchService", "ProfileService"], angular.module("epicApp").directive("epicContentCardItem", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            return {
                restrict: "E",
                scope: {
                    collection: "=",
                    index: "=",
                    rowIndex: "="
                },
                templateUrl: "content-item/epic-featured-collection-item/epic-featured-collection-item.html",
                link: function (e, r, i) {
                    var a = t.current.name,
                        l = r[0];
                    e.contentType = "featured_collection", n.makeContentItemLevelCheckIfViewedAndLog(l, a, e.collection.modelId, e), e.cdn = Globals.GLOBAL_CDN_BASE, e.showCollection = function () {
                        n.addOpenedContentData(e.collection.modelId, a, e), o.books = e.collection.simpleBookData || e.collection.bookData, o.name = e.collection.title, o.collectionId = e.collection.modelId, t.go("collection")
                    }
                }
            }
        }
        e.$inject = ["$rootScope", "$state", "CollectionData", "BookPresentationsLogger", "$timeout", "Logsly"], angular.module("epicApp").directive("epicFeaturedCollectionItem", e)
    }(), angular.module("epicApp").directive("epicFlexItem", function () {
        return {
            restrict: "E",
            scope: {
                content: "=",
                sizeSmall: "=",
                index: "=",
                parentLoggingContext: "<",
                tabName: "<",
                rowIndex: "<",
                rowTitle: "<?",
                showBookShareButtons: "<",
                sizeFlexible: "<",
                disableScale: "<"
            },
            templateUrl: "content-item/epic-flex-item/epic-flex-item.html",
            link: function (e, t, o) {}
        }
    }),
    function () {
        function e(e, t, o, n, r, i) {
            return {
                restrict: "E",
                scope: {
                    collection: "=",
                    index: "=",
                    rowIndex: "="
                },
                templateUrl: "content-item/epic-originals-collection-item/epic-originals-collection-item.html",
                link: function (a, l, s) {
                    var c = e.current.name,
                        u = l[0];
                    a.contentType = "original_collection", a.rowTitle = "epic_originals", o.makeContentItemLevelCheckIfViewedAndLog(u, c, a.collection.modelId, a), a.thumb = n.resizeUrl({
                        url: Globals.GLOBAL_CDN_BASE + a.collection.cardImageExtraSmall + ".png",
                        width: 353,
                        quality: 90
                    }), a.showOriginalsCollection = function () {
                        o.addOpenedContentData(a.collection.modelId, c, a);
                        var n = i.translateSourceString(c, a.section, a.rowTitle, a.rowIndex, a.collection.modelId, a.parentLoggingContext, a.tabName, !1),
                            l = r.events.CONTENT_OPENED_ORIGINALS_COLLECTION,
                            s = {
                                book_id: parseInt(a.collection.modelId),
                                content_type: a.contentType,
                                title: a.collection.title,
                                src: n
                            };
                        r.log(l, s), t.name = a.collection.title, t.modelId = a.collection.modelId, e.go("original", {
                            originalId: t.modelId
                        })
                    }
                }
            }
        }
        e.$inject = ["$state", "CollectionData", "BookPresentationsLogger", "AssetService", "BigQuery", "LoggingSourceTranslation"], angular.module("epicApp").directive("epicOriginalsCollectionItem", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l) {
            return {
                restrict: "E",
                scope: {
                    content: "=",
                    hoverDisabled: "=?",
                    clickDisabled: "=?",
                    index: "=",
                    rowIndex: "=",
                    rowTitle: "=",
                    section: "=",
                    sizeThumbnail: "=",
                    sizeCard: "=",
                    omitTitle: "=",
                    parentLoggingContext: "<",
                    isRecommendedRow: "<",
                    previewOnly: "="
                },
                templateUrl: "content-item/epic-quiz-item/epic-quiz-item.html",
                link: function (e, t, s) {
                    e.media = i, e.openContent = e.clickDisabled ? function () {} : function () {
                        n.addOpenedContentData(e.content.id, c, e), "search" === c && l.log(l.events.SEARCH_CONTENT_OPENED, {
                            search_term: a.searchText,
                            search_type: a.getSearchType(),
                            tab: a.currentTabName,
                            row_number: e.rowIndex,
                            index_number: e.index,
                            content_type: e.contentType
                        });
                        r.openQuiz(e.content)
                    }, e.getContentImageUrl = function () {
                        return Globals.GLOBAL_CDN_BASE + "quiz_subject_icons/subject_icon_outline_" + e.content.subject + ".png"
                    }, e.getClasses = function () {
                        var t = "";
                        i("gt-xs") || (t = "sm");
                        e.sizeThumbnail && (t = "search-thumb");
                        e.sizeCard && (t = "search-card");
                        !0 === e.hoverDisabled && (t = t.concat(" hover-disabled"));
                        return t
                    };
                    var c = o.current.name;
                    e.contentType = "quiz";
                    var u = t[0].getElementsByClassName("countdown-container")[0];
                    n.makeContentItemLevelCheckIfViewedAndLog(u, c, e.content.id, e)
                }
            }
        }
        e.$inject = ["$rootScope", "$timeout", "$state", "BookPresentationsLogger", "StandaloneQuiz", "$mdMedia", "SearchService", "BigQuery"], angular.module("epicApp").directive("epicQuizItem", e)
    }(), angular.module("epicApp").directive("epicVideoItem", ["BookService", "StringService", "$state", "$mdMedia", "BookPresentationsLogger", "SearchService", "BigQuery", "LoggingSourceTranslation", function (e, t, o, n, r, i, a, l) {
        return {
            restrict: "E",
            scope: {
                content: "=",
                sizeSmall: "=",
                sizeThumbnail: "=",
                sizeCard: "=",
                sizeFlexible: "<",
                index: "=",
                rowIndex: "=",
                rowTitle: "=",
                section: "=?",
                omitTitle: "=",
                parentLoggingContext: "<",
                tabName: "<",
                showBookShareButtons: "<",
                disableScale: "<"
            },
            templateUrl: "content-item/epic-video-item/epic-video-item.html",
            link: function (s, c, u) {
                s.maxTitleLength = 28, s.stringService = t, s.getContentImageUrl = e.thumbPath, s.getClass = function () {
                    return s.sizeThumbnail ? "search-thumb" : s.sizeCard ? "search-card" : s.sizeFlexible ? "flexible" : !n("gt-xs") || s.sizeSmall ? "size-small" : void 0
                }, s.isHovered = {
                    value: !1
                };
                var d = o.current.name;
                s.contentType = "video", s.sourceId = "user-collection" === d ? o.params.collectionId : null;
                var p = c[0].getElementsByClassName("epic-video-item")[0];
                r.makeContentItemLevelCheckIfViewedAndLog(p, d, s.content.modelId, s), s.openContent = function () {
                    var t = s.content,
                        o = l.translateSourceString(d, s.section, s.rowTitle, s.rowIndex, s.sourceId, s.parentLoggingContext, s.tabName, !1);
                    e.openBook(t, o), r.addOpenedContentData(s.content.modelId, d, s), "search" === d && a.log(a.events.SEARCH_CONTENT_OPENED, {
                        search_term: i.searchText,
                        search_type: i.getSearchType(),
                        tab: i.currentTabName,
                        row_number: s.rowIndex,
                        index_number: s.index,
                        content_type: s.contentType
                    })
                }
            }
        }
    }]), angular.module("epicApp").directive("epicBookRow", ["EpicScroller", function (e) {
        return {
            restrict: "E",
            scope: {
                contentList: "=",
                rowIndex: "=",
                rowTitle: "=",
                showBookShareButtons: "<"
            },
            templateUrl: "content-row/epic-book-row/epic-book-row.html",
            link: function (t, o, n) {
                t.scroller = new e(t.contentList), t.scroller.cellWidthLg = 175, t.scroller.cellWidthSm = 120
            }
        }
    }]), angular.module("epicApp").directive("epicCollectionRow", ["$state", "$timeout", "$interval", "$window", "StringService", "Logsly", function (e, t, o, n, r, i) {
        return {
            restrict: "E",
            scope: {
                collectionList: "=",
                rowIndex: "=",
                rowTitle: "="
            },
            templateUrl: "content-row/epic-collection-row/epic-collection-row.html",
            link: function (e, t, i) {
                e.stringService = r, e.rowIndexPos = -.1, e.maxTitleLength = 55, e.getRowIndexPos = function () {
                    return e.rowIndexPos ? parseFloat(e.rowIndexPos) : 0
                }, e.scroller = {
                    cellWidthLg: 260,
                    cellWidthSm: 140,
                    intervalDur: 10,
                    animationDuration: 900,
                    animationClip: 90,
                    animationInProg: !1,
                    getNumDisplayed: function () {
                        var e = n.innerWidth;
                        return e > 600 ? Math.floor(e / this.cellWidthLg) : Math.floor(e / this.cellWidthSm)
                    },
                    easeOut: function (e, t) {
                        return 1 - Math.pow(1 - e / t, 5)
                    },
                    getEaseOutVal: function (e, t, o, n) {
                        return t + (o - t) * this.easeOut(e, n)
                    },
                    rightClick: function () {
                        if (!this.animationInProg) {
                            var t = this;
                            this.animationInProg = !0;
                            var n = parseFloat(e.rowIndexPos),
                                r = this.getNumDisplayed(),
                                i = e.collectionList.length - r,
                                a = Math.floor(n + r);
                            a = a < i ? a : i;
                            var l = 0,
                                s = o(function () {
                                    e.rowIndexPos = t.getEaseOutVal(l, n, a, t.animationDuration), l >= t.animationDuration - t.animationClip && (o.cancel(s), t.animationInProg = !1), l += t.intervalDur
                                }, t.intervalDur)
                        }
                    },
                    leftClick: function () {
                        if (!this.animationInProg) {
                            var t = this;
                            this.animationInProg = !0;
                            var n = parseFloat(e.rowIndexPos),
                                r = this.getNumDisplayed(),
                                i = Math.floor(n - r);
                            i = i >= 0 ? i : 0;
                            var a = 0,
                                l = o(function () {
                                    e.rowIndexPos = t.getEaseOutVal(a, n, i, t.animationDuration), a >= t.animationDuration - t.animationClip && (o.cancel(l), t.animationInProg = !1), a += t.intervalDur
                                }, t.intervalDur)
                        }
                    }
                }
            }
        }
    }]), angular.module("epicApp").directive("epicFeaturedRow", ["EpicScroller", function (e) {
        return {
            restrict: "E",
            scope: {
                featuredList: "=",
                rowIndex: "="
            },
            templateUrl: "content-row/epic-featured-row/epic-featured-row.html",
            link: function (t, o, n) {
                t.scroller = new e(t.featuredList), t.scroller.cellWidthLg = 240, t.scroller.cellWidthSm = 140
            }
        }
    }]),
    function () {
        function e(e) {
            return {
                restrict: "E",
                scope: {
                    contentList: "=",
                    contentTypes: "=?",
                    rowIndex: "=",
                    showBookShareButtons: "<"
                },
                templateUrl: "content-row/epic-flex-content-row/epic-flex-content-row.html",
                link: function (e, t, o) {
                    e.contentTypes = [];
                    var n = {};
                    for (var r in e.contentList.forEach(function (e, t) {
                            e.id = e.id || e.modelId, n[e.type] = !0
                        }), n) e.contentTypes.push(parseInt(r));
                    e.contentType = function () {
                        var t = e.contentTypes.reduce(function (e, t) {
                            return e[t] = t, e
                        }, {});
                        if (1 != e.contentTypes.length) return e.contentTypes.length > 1 && ! function (e) {
                            if (e[4] || e[5]) return !0;
                            return !1
                        }(t) ? "book" : "mixed";
                        var o = e.contentTypes[0];
                        if (1 == o || 2 == o || 3 == o) return "book";
                        if (4 == o) return "video";
                        if (5 == o) return "quiz"
                    }()
                }
            }
        }
        e.$inject = ["Logsly"], angular.module("epicApp").directive("epicFlexContentRow", e)
    }(), angular.module("epicApp").directive("epicMixedContentRow", ["$state", "$timeout", "$rootScope", "Logsly", function (e, t, o, n) {
        return {
            restrict: "E",
            scope: {
                contentList: "=",
                sizeSmall: "=",
                parentLoggingContext: "<",
                tabName: "<",
                rowIndex: "<",
                showBookShareButtons: "<"
            },
            templateUrl: "content-row/epic-mixed-content-row/epic-mixed-content-row.html",
            link: function (e, n, r) {
                var i = function (e, t, o) {
                    return e < t ? t : e > o ? o : e
                };
                e.getRowIndexPos = function () {
                    return e.rowIndexPos ? parseFloat(e.rowIndexPos) : 0
                };
                var a = n.find("md-content");
                e.currScrollPos = 0, e.scroller = {
                    intervalDur: 10,
                    animationDuration: 900,
                    animationInProg: !1,
                    getScrollDiff: function () {
                        var e = a.width();
                        return e - parseInt(e / 10)
                    },
                    getMaxScrollPos: function () {
                        return a[0].scrollWidth - a.width()
                    },
                    easeOut: function (e, t) {
                        return 1 - Math.pow(1 - e / t, 5)
                    },
                    getEaseOutVal: function (e, t, o, n) {
                        return t + (o - t) * this.easeOut(e, n)
                    },
                    scrollTo: function (o) {
                        var n = this,
                            r = a[0],
                            i = e.currScrollPos,
                            l = 0;
                        ! function a() {
                            l += n.intervalDur, e.currScrollPos = n.getEaseOutVal(l, i, o, n.animationDuration), r.scrollLeft = e.currScrollPos, l < n.animationDuration ? t(a, n.intervalDur) : n.animationInProg = !1
                        }()
                    },
                    rightClick: function () {
                        if (!this.animationInProg) {
                            this.animationInProg = !0;
                            var t = e.currScrollPos + this.getScrollDiff();
                            t = i(t, 0, this.getMaxScrollPos()), this.scrollTo(t)
                        }
                    },
                    leftClick: function () {
                        if (!this.animationInProg) {
                            this.animationInProg = !0;
                            var t = e.currScrollPos - this.getScrollDiff();
                            t = i(t, 0, this.getMaxScrollPos()), this.scrollTo(t)
                        }
                    }
                }, e.$watch(function () {
                    return e.currScrollPos
                }, function (e, t) {
                    e !== t && (a[0].scrollLeft = e)
                });
                var l = function () {
                    e.currScrollPos = a[0].scrollLeft, e.$apply(), o.$broadcast("horizontal-scroll-mixed-content")
                };
                a.on("scroll", l), e.$on("$destroy", function () {
                    a.off("scroll", l)
                })
            }
        }
    }]), angular.module("epicApp").directive("epicOriginalsRow", ["EpicScroller", function (e) {
        return {
            restrict: "E",
            scope: {
                originalsList: "=",
                rowIndex: "="
            },
            templateUrl: "content-row/epic-originals-row/epic-originals-row.html",
            link: function (t, o, n) {
                t.scroller = new e(t.originalsList), t.scroller.cellWidthLg = 350, t.scroller.cellWidthSm = 140
            }
        }
    }]),
    function () {
        function e(e, t, o, n) {
            return {
                restrict: "E",
                scope: {
                    contentList: "=",
                    rowIndex: "=",
                    rowTitle: "=",
                    parentLoggingContext: "<",
                    isRecommendedRow: "<"
                },
                templateUrl: "content-row/epic-quiz-row/epic-quiz-row.html",
                link: function (n, r, i) {
                    n.scroller = new e(n.contentList), n.scroller.cellWidthLg = 280, n.scroller.cellWidthSm = 240, "standalone-quiz" === o.current.name && n.$watch(function () {
                        return n.scroller.rowIndexPos
                    }, function (e, o) {
                        e !== o && t.$broadcast("horizontal-scroll-mixed-content")
                    })
                }
            }
        }
        e.$inject = ["EpicScroller", "$rootScope", "$state", "Logsly"], angular.module("epicApp").directive("epicQuizRow", e)
    }(),
    function () {
        function e(e) {
            return {
                restrict: "E",
                scope: {
                    contentList: "=",
                    rowIndex: "=",
                    rowTitle: "=",
                    showBookShareButtons: "<"
                },
                templateUrl: "content-row/epic-video-row/epic-video-row.html",
                link: function (t, o, n) {
                    t.scroller = new e(t.contentList), t.scroller.cellWidthLg = 396, t.scroller.cellWidthSm = 269
                }
            }
        }
        e.$inject = ["EpicScroller"], angular.module("epicApp").directive("epicVideoRow", e)
    }(),
    function () {
        function e(e, t) {
            return {
                restrict: "E",
                scope: {
                    selectedId: "=",
                    selectGroup: "=",
                    onCreate: "=?",
                    hideEmpty: "=?"
                },
                templateUrl: "dropdown/classroom-selector/classroom-selector.html",
                link: function (t, o, n) {
                    var r = "#ef6b3b",
                        i = "#768087";

                    function a() {
                        if (e.classroomGroups) {
                            t.options = [], t.options.push({
                                label: "Class Roster",
                                id: null
                            });
                            for (var o, n = e.classroomGroups.length, r = 0; r < n; r++)(o = e.classroomGroups[r]).userIds = o.userIds || [], t.hideEmpty && 0 === o.userIds.length || t.options.push({
                                label: o.name,
                                id: o.id
                            });
                            t.onCreate && t.options.push({
                                label: "+ Create Group",
                                style: {
                                    color: "#00bff0"
                                },
                                staticStyle: !0,
                                method: t.onCreate
                            }), l()
                        }
                    }

                    function l() {
                        var e, o, n = t.options.length;
                        for (e = 0; e < n; e++)
                            if ((o = t.options[e]).id == t.selectedId) {
                                t.model = o;
                                break
                            } t.model = t.model || t.options[0], s()
                    }

                    function s() {
                        var e, o, n = t.options.length;
                        for (e = 0; e < n; e++)(o = t.options[e]).staticStyle || (o.style = o.style || {}, o.style.color = o.id == t.selectedId ? r : i)
                    }
                    t.$watch(function () {
                        return e.classroomGroups
                    }, function (e, t) {
                        e != t && a()
                    }), t.$watch(function () {
                        return t.selectedId
                    }, function (e, t) {
                        e != t && l()
                    }), a(), t.select = function (e) {
                        e.method ? e.method(e) : (t.model = e, t.selectGroup(e.id));
                        s()
                    }, t.getLabel = function (e) {
                        if (!e) return;
                        return e.conditionalLabel ? e.conditionalLabel() : e.label
                    }
                }
            }
        }
        e.$inject = ["ProfileService", "Logsly"], angular.module("epicApp").directive("classroomSelector", e)
    }(), angular.module("epicApp").directive("bookWordBbox", ["$window", "$document", "$timeout", "$mdDialog", "$q", "BookService", "BookWordDataService", "BookPagesService", "ReadToMeService", "DictionaryLookupAPIService", "BigQuery", function (e, t, o, n, r, i, a, l, s, c, u) {
        return {
            restrict: "E",
            scope: {
                word: "=",
                pageIndex: "=",
                pageImageSrc: "="
            },
            templateUrl: "epic-flip-book/book-word-bbox/book-word-bbox.html",
            link: function (t, c, d) {
                var p = angular.element(e);
                t.maxDefinitions = 3, t.wordIsZoomed = !1, t.wordImageStyles = {}, t.showWordClickAnim = !1;
                var f = !1,
                    g = null,
                    m = null,
                    h = parseFloat(t.word.bbox[0]),
                    v = parseFloat(t.word.bbox[1]),
                    b = parseFloat(t.word.bbox[2]),
                    S = parseFloat(t.word.bbox[3]);
                t.showWordMagnified = function () {
                    var e = t.word;
                    return !!e.isPreSelected || "magnify" === i.getHighlightMode() && e.isSelected && s.isPlaying
                }, t.setBboxStyles = function () {
                    var e = {
                        width: b - h + .8 + "%",
                        height: S - v + .4 + "%",
                        left: h - .4 + "%",
                        bottom: v - .2 + "%"
                    };
                    c.css(e)
                }, t.setWordImageStyles = function () {
                    var e = l.getPageDimensions(),
                        o = {
                            left: (h - .4) / 100 * e.width * -1,
                            top: -1 * (e.height - (S + .2) / 100 * e.height)
                        };
                    t.wordImageStyles = {
                        width: e.width,
                        height: e.height,
                        top: o.top,
                        left: o.left
                    }
                }, t.setStyles = function () {
                    t.setBboxStyles(), t.setWordImageStyles()
                }, t.setStyles(), t.showWordDefinitionWithModal = function (e) {
                    if (e.stopPropagation(), !f) {
                        f = !0;
                        var l = {
                            word: t.word.text,
                            book_id: i.getBookId().toString(),
                            pageHash: i.getPageHashByPageIndex(t.pageIndex)
                        };
                        u.log(u.events.TEXT_HIGHLIGHT_WORD_PRESSED, l), a.selectWord(t.word), t.startWordClickAnim(), o(function () {
                            t.stopWordClickAnim()
                        }, 500);
                        var d = s.isPlaying;
                        s.pause();
                        var p = t.$new(!0);
                        p.wordText = t.word.text, p.modalReadyPromise = r(function (e, t) {
                            n.show({
                                template: '<word-dictionary-lookup-modal aria-label="dictionary lookup"></word-dictionary-lookup-modal>',
                                scope: p,
                                parent: angular.element(document.body),
                                openFrom: c,
                                closeTo: c,
                                hasBackdrop: !1,
                                clickOutsideToClose: !0,
                                fullscreen: !1,
                                onRemoving: function () {
                                    f = !1, a.dePreSelectCurrentWord(), a.deSelectCurrentWord(), d && s.play()
                                },
                                onComplete: function () {
                                    o(function () {
                                        e()
                                    }, 200)
                                }
                            })
                        })
                    }
                }, t.startWordClickAnim = function () {
                    g = g || c[0].querySelector(".book-word-click-lottie"), (m = bodymovin.loadAnimation({
                        container: g,
                        renderer: "svg",
                        loop: !0,
                        autoplay: !0,
                        path: "/assets/app/animations/concentric-circles_1.json"
                    })).setSpeed(1.4), t.showWordClickAnim = !0
                }, t.stopWordClickAnim = function () {
                    m.destroy(), t.showWordClickAnim = !1
                }, o(function () {
                    t.wordIsZoomed = !0
                }, 0);
                var y = function () {
                    t.$apply(t.setStyles)
                };
                p.on("resize", y), t.$on("$destroy", function () {
                    p.off("resize", y)
                })
            }
        }
    }]), angular.module("epicApp").directive("epicFlipBookCompletionPage", ["$modal", "$mdMedia", "$mdDialog", "$interval", "$window", "BookService", "BookOverlay", "QuizService", "BigQuery", "ProfileService", "MagicPanService", "BookPagesService", "$timeout", function (e, t, o, n, r, i, a, l, s, c, u, d, p) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "epic-flip-book/epic-flip-book-completion-page/epic-flip-book-completion-page.html",
            link: function (e, o, c) {
                e.bookService = i, e.quizService = l, e.bookOverlay = a, e.magicPanService = u, e.mdMedia = t, e.cdn = Globals.GLOBAL_CDN_BASE, e.isSmallThreshold = function () {
                    return o.width() < 600 || o.height() < 600
                }, e.isUsingLargeStyles = function () {
                    return o[0].firstChild.clientWidth > 700 || o[0].firstChild.clientHeight > 700
                }, e.getPageSize = function () {
                    var t = o[0].firstChild.clientWidth,
                        n = o[0].firstChild.clientHeight;
                    return t > 700 || n > 700 ? e.SIZE_LARGE : t > 400 || n > 400 ? e.SIZE_MEDIUM : e.SIZE_SMALL
                }, e.logBigQueryClickEvent = function (t, o) {
                    var n = i.isReadToMe() ? s.events.CONTENT_FINISH_CLICK_BOOK_R2ME : s.events.CONTENT_FINISH_CLICK_BOOK,
                        r = {
                            finished_state: i.bookIsFinished ? "complete" : e.enableFinishBook ? "enabled" : "disabled",
                            quiz: l.quizData,
                            click: t,
                            src: i.bookOpenSource
                        };
                    "new_content" == t && (r.content_index = o), s.log(n, r)
                }, e.finishBook = function () {
                    var t, o, r, a;
                    !i.bookIsFinished && e.enableFinishBook && (n.cancel(e.checkBookFinishedInterval), e.enableFinishBook = !1, e.bookFinishPending = !0, i.finishBook().then(function (t) {
                        e.bookFinishPending = !1, t && (e.finishBookStats = t)
                    }), t = i.isReadToMe(), o = t ? s.events.CONTENT_FINISH_BOOK_R2ME : s.events.CONTENT_FINISH_BOOK, r = i.bookData.book || {}, a = {}, i.logData && (a.book_id = r.id, a.content_type = r.type, a.pages_flipped = i.logData.pagesFlipped, a.duration = i.logData.time, a.mode = i.getIsFullScreen() ? "fullscreen" : "mini", a.zoom = u.zoomLevel > 1 ? "yes" : "no", a.src = i.bookOpenSource, t && (a.highlight = i.getHighlightMode())), s.log(o, a))
                }, e.getCompletionMessage = function () {
                    if (!i.bookIsFinished) return l.quizData ? "Read a little longer or take the quiz!" : "You’ll need to read a little longer to be able to complete this book."
                }, e.checkBookFinishedInterval = null, e.enableFinishBook = !1, e.bookFinishPending = !1, e.leftPageTurnCursorStyle = d.getPageFlipArrowStyle("back"), e.SIZE_SMALL = 1, e.SIZE_MEDIUM = 2, e.SIZE_LARGE = 3;
                var p = 3e3,
                    f = !1;

                function g() {
                    var t, o, n, r;
                    e.enableFinishBook = !i.bookIsFinished && i.getReadTimeSinceLastBookFinish() > i.getTimePerPage() * i.getBookLength(), e.enableFinishBook && !f && (t = i.isReadToMe(), o = t ? s.events.CONTENT_FINISH_ENABLED_BOOK_R2ME : s.events.CONTENT_FINISH_ENABLED_BOOK, n = i.bookData.book || {}, r = {
                        book_id: n.id,
                        content_type: n.type,
                        page: i.getCurrentPage(),
                        duration: i.secondsReadSinceOpen,
                        mode: i.getIsFullScreen() ? "fullscreen" : "mini",
                        zoom: u.zoomLevel > 1 ? "yes" : "no",
                        src: i.bookOpenSource
                    }, t && (r.highlight = i.getHighlightMode()), s.log(o, r), f = !0)
                }

                function m() {
                    var t = i.getCurrentPage();
                    i.getBookLength() - 1 === t && e.enableFinishBook && (bbb("finishing book (not from finish button)"), e.finishBook())
                }
                g(), e.checkBookFinishedInterval = n(g, p), e.$on("viewingBookFinish", function () {
                    var t, o = i.isReadToMe() ? s.events.CONTENT_FINISH_VIEW_BOOK_R2ME : s.events.CONTENT_FINISH_VIEW_BOOK;
                    e.enableFinishBook && !i.bookIsFinished ? t = "enabled" : e.enableFinishBook || i.bookIsFinished ? !e.enableFinishBook && i.bookIsFinished && (t = "complete") : t = "disabled";
                    var n = {
                        finished_state: t,
                        quiz: l.quizData,
                        src: i.bookOpenSource
                    };
                    s.log(o, n)
                }()), e.$on("clickOnBookFinish", function (t, o) {
                    "new_content" == o.click_type ? e.logBigQueryClickEvent(o.click_type, o.content_index) : e.logBigQueryClickEvent(o.click_type)
                }), r.addEventListener("beforeunload", m), e.$on("$destroy", function () {
                    n.cancel(e.checkBookFinishedInterval), r.removeEventListener("beforeunload", m), m()
                })
            }
        }
    }]), angular.module("epicApp").directive("epicFlipBookIntroPage", ["$modal", "BookService", "ProfileService", "BookOverlay", "AccountService", "Data", "ABTestService", "CollectionService", function (e, t, o, n, r, i, a, l) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "epic-flip-book/epic-flip-book-intro-page/epic-flip-book-intro-page.html",
            link: function (s, c, u) {
                s.bookOverlayService = n, s.abTestService = a, s.cdnUrl = Globals.GLOBAL_CDN_BASE, s.bookService = t, s.bookId = t.getBookId(), s.bookCover = t.thumbPath(s.bookId), s.bookTitle = t.getBookTitle(), s.bookAuthor = t.getBookAuthor(), s.showAwardBadge = t.showAwardBadge && t.hasAward(), s.bookIllustrator = t.getBookIllustrator(), s.bookIllustrator = null !== s.bookIllustrator && "" !== s.bookIllustrator && " " != s.bookIllustrator ? s.bookIllustrator : "", s.convertedLevelData = null, s.eduAssigningVariant = t.eduAssigningVariant, s.desc = (t.getBookDescription() || "").split("\n"), s.age = t.getBookAge(), s.bookInfos = [{
                    label: "Length",
                    value: t.getBookAvgTime()
                }];
                var d = {
                    lexile_level: {
                        label: "Lexile ® Measure",
                        value: t.getBookLexile()
                    },
                    accelerated_level: {
                        label: "AR Level",
                        value: t.getBookAR()
                    },
                    dra_level: {
                        label: "DRA Level",
                        value: t.getBookDRA()
                    },
                    fandp_level: {
                        label: "F&P Level",
                        value: t.getBookFP()
                    },
                    guided_reading_level: {
                        label: "GR Level",
                        value: t.getBookGR()
                    },
                    grade: {
                        label: "Grade",
                        value: t.getGradeRangeFromAge(s.age)
                    }
                };
                ! function () {
                    if (r.isEducator()) {
                        if (t.readingLevelDetailsCustom) {
                            var e = t.readingLevelDetailsCustom.system;
                            return void(e ? t.readingLevelDetailsCustom.convertedData ? s.convertedLevelData = t.readingLevelDetailsCustom.convertedData : s.bookInfos.push(d[e]) : (s.bookInfos.push(d.lexile_level), s.bookInfos.push(d.accelerated_level)))
                        }
                        i.get("WebReadingLevels", "getReadingLevelPreferences", {
                            args: JSON.stringify({
                                accountId: r.id
                            })
                        }).then(function (e) {
                            if (e.result && "undecided" !== e.result.type)
                                if (t.convertedReadingLevel) {
                                    var o = {
                                        value: t.convertedReadingLevel[e.result.type][0],
                                        isConvertedValue: t.convertedReadingLevel[e.result.type][1],
                                        label: d[e.result.type].label
                                    };
                                    s.convertedLevelData = o
                                } else s.bookInfos.push(d[e.result.type]);
                            else if (t.convertedReadingLevel) {
                                var n = {
                                    value: t.convertedReadingLevel.accelerated_level[0],
                                    isConvertedValue: t.convertedReadingLevel.accelerated_level[1],
                                    label: d.accelerated_level.label
                                };
                                s.convertedLevelData = n
                            } else s.bookInfos.push(d.accelerated_level)
                        }).catch(function (e) {})
                    } else s.bookInfos.push(d.lexile_level), s.bookInfos.push(d.accelerated_level)
                }(), o.currentProfile.isParent && s.bookInfos.unshift({
                    label: "Age Range",
                    getValue: function () {
                        var e = t.getBookAge();
                        return "number" == typeof e ? Math.max(0, e - 1) + "-" + (e + 1) : "-"
                    }
                }), s.showIntroPageContent = function () {
                    return c.height() > 200
                }, s.showBookCover = function () {
                    return c.height() > 600
                }, s.showBookInfo = function () {
                    return c.width() > 500 && c.height() > 500
                }, s.useSmallBookInfoStyles = function () {
                    return c.width() < 500 || c.height() < 500
                }, s.searchMaker = function (e, o) {
                    t.closeBookAndSearchByMaker(e, o)
                }, s.showReadingLevelConversionsChart = function () {
                    e.open({
                        templateUrl: "modals/reading-level-conversions-chart/reading-level-conversions-chart.html",
                        controller: "ReadingLevelConversionsChartController",
                        controllerAs: "ctrl",
                        size: "lg",
                        keyboard: !1
                    })
                }, s.startFavorite = function () {
                    l.displaySaveContentModal(t.bookData.book, "inside_cover")
                }, s.startAssign = function () {
                    l.startAssignContentFlow(t.bookData.book, "inside_cover")
                }
            }
        }
    }]), angular.module("epicApp").directive("epicFlipBookPage", ["$timeout", "$window", "BookService", "BookOverlay", "BookPagesService", "BookWordDataService", "HighlightingTestDataService", "MagicPanService", function (e, t, o, n, r, i, a, l) {
        return {
            restrict: "E",
            scope: {
                pageIndex: "=",
                isPagePosRight: "&",
                isPageCurrent: "&",
                useHotspotToShowHeaderAndFooter: "<"
            },
            templateUrl: "epic-flip-book/epic-flip-book-page/epic-flip-book-page.html",
            link: function (a, s, c) {
                angular.element(t), a.pageImageSrc = null, a.pageIsShowing = !0, a.wordData = {}, a.bookService = o, a.bookWordDataService = i, a.bookOverlay = n, a.magicPanService = l;
                var u = Globals.GLOBAL_CDN_BASE,
                    d = r.getPageFlipArrowStyle("back"),
                    p = r.getPageFlipArrowStyle("next");
                a.pageImagePlaceHolder = "".concat(u, "website/img/app/epic-e.svg"), a.setFlippyArrowStyle = function () {
                    a.flippyArrowStyle = a.isPagePosRight() ? p : d
                }, a.pageIsShowing = function () {
                    var e = o.getCurrentPage();
                    return a.pageIndex === e || a.pageIndex === e - 1
                }, a.loadPageImage = function (t) {
                    a.pageImageSrc = "https://:0", a.pageImageIsLoaded = !1;
                    var o = r.getOrLoadPageImageByPageIndex(t);
                    o.cdnUrl ? (a.pageImageSrc = o.cdnUrl, a.pageImageIsLoaded = !0) : o.broadcastEvent ? a.$on(o.broadcastEvent, function (t, o) {
                        o && e(function () {
                            a.pageImageSrc = o, a.pageImageIsLoaded = !0
                        }, 0)
                    }) : (a.pageImageSrc = "https://:0", a.pageImageIsLoaded = !1)
                }, a.loadPageImage(a.pageIndex), a.setWordData = function (e) {
                    a.wordData = {
                        word_data: []
                    }, i.getOrLoadWordDataByPageIndex(e).then(function (e) {
                        e && (a.wordData = e)
                    })
                }, a.setWordData(a.pageIndex), a.showWordBbox = function (e) {
                    return (e.isPreSelected || e.isSelected || i.testMode) && r.pageDimensionsAreReady()
                };
                var f = function (e) {
                    a.pageIsShowing = a.pageIndex === e || a.pageIndex === e - 1
                };
                f(o.getCurrentPage()), a.$watch(function () {
                    return o.getCurrentPage()
                }, function (e, t) {
                    e !== t && f(e)
                }), a.$watch("pageIndex", function (e, t) {
                    "number" == typeof e && e !== t && (a.loadPageImage(e), a.setWordData(e))
                }), a.$on("$destroy", function () {})
            }
        }
    }]), angular.module("epicApp").directive("epicFlipBookPrecompletionPage", ["MagicPanService", "BookPagesService", function (e, t) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "epic-flip-book/epic-flip-book-precompletion-page/epic-flip-book-precompletion-page.html",
            link: function (o, n, r) {
                o.magicPanService = e, o.almostDoneImgPath = Globals.GLOBAL_CDN_BASE + "website/assets/app/end-of-book/almost-done.svg", o.rightPageTurnCursorStyle = t.getPageFlipArrowStyle("next")
            }
        }
    }]), angular.module("epicApp").directive("epicFlipBookRecommendPage", ["RecommendService", "SiteConstants", function (e, t) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "epic-flip-book/epic-flip-book-recommend-page/epic-flip-book-recommend-page.html",
            link: function (o, n, r) {
                o.recommendService = e, o.constants = t, o.isLargePageWidth = function () {
                    return n[0].firstChild.clientWidth > 530
                }, o.isUsingLargeStyles = function () {
                    return n[0].firstChild.clientWidth > 700 || n[0].firstChild.clientHeight > 700
                }, o.getGridClass = function () {
                    var e = n[0].firstChild.clientWidth;
                    return e > 530 ? "" : e > 425 ? "page-grid-medium" : "page-grid-small"
                }
            }
        }
    }]),
    function () {
        function e(e) {
            return {
                restrict: "E",
                scope: {
                    data: "="
                },
                templateUrl: "featured-carousel/featured-book-slide/featured-book-slide.html",
                link: function (e, t, o) {
                    var n = Math.round(e.data.bookRating / 20);
                    e.ratingOptions = {
                        rated: 0,
                        rating: 0,
                        communityRating: n,
                        style: 1
                    };
                    var r = e.data.bgImageLarge || e.data.bgImage;
                    r = r.replace(/.png|.webp/gi, "") + ".png", t.css({
                        "background-image": "url(" + Globals.GLOBAL_CDN_BASE + r + ")"
                    })
                }
            }
        }
        e.$inject = ["Logsly"], angular.module("epicApp").directive("featuredBookSlide", e)
    }(),
    function () {
        function e(e, t) {
            return {
                restrict: "E",
                scope: {
                    data: "="
                },
                templateUrl: "featured-carousel/quiz-slide/quiz-slide.html",
                link: function (t, o, n) {
                    o.css({
                        "background-image": "url(" + Globals.GLOBAL_CDN_BASE + t.data.bgImageLarge + ")"
                    });
                    var r, i, a = t.data.contents,
                        l = a.length;
                    for (r = 0; r < l; r++)(i = a[r]).data ? "SimpleBook" == i.type ? t.book = i : "QuizQuestion" == i.type && (t.quiz = i.data) : bbb("Quiz slide content.data not found");
                    t.quiz && t.quiz.quizQuestionChoices && (t.quiz.quizQuestionChoices = function (e) {
                        for (var t = e.length - 1; t > 0; t--) {
                            var o = Math.floor(Math.random() * (t + 1)),
                                n = e[t];
                            e[t] = e[o], e[o] = n
                        }
                        return e
                    }(t.quiz.quizQuestionChoices)), t.selectAnswer = function (o, n) {
                        var r;
                        1 == o.correct ? ((r = n.currentTarget).classList.add("green"), t.correct = !0) : ((r = n.currentTarget).classList.remove("shake-horizontal"), e.requestAnimationFrame(function () {
                            r.classList.add("shake-horizontal")
                        }))
                    }
                }
            }
        }
        e.$inject = ["$window", "Logsly"], angular.module("epicApp").directive("quizSlide", e)
    }(),
    function () {
        function e(e, t) {
            return {
                restrict: "E",
                scope: {
                    data: "="
                },
                templateUrl: "featured-carousel/simple-book-slide/simple-book-slide.html",
                link: function (t, o, n) {
                    t.bookService = e, o.css({
                        "background-image": "url(" + Globals.GLOBAL_CDN_BASE + t.data.bgImage + ")"
                    })
                }
            }
        }
        e.$inject = ["BookService", "Logsly"], angular.module("epicApp").directive("simpleBookSlide", e)
    }(),
    function () {
        function e(e, t, o) {
            return {
                restrict: "E",
                scope: {
                    data: "="
                },
                templateUrl: "featured-carousel/video-slide/video-slide.html",
                link: function (o, n, r) {
                    o.bookService = e, o.media = t, n.css({
                        "background-image": "url(" + Globals.GLOBAL_CDN_BASE + o.data.bgImage + ")"
                    })
                }
            }
        }
        e.$inject = ["BookService", "$mdMedia", "Logsly"], angular.module("epicApp").directive("videoSlide", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            e.achievement = o, e.achievementUrl = n, e.cancel = function () {
                t.cancel()
            }
        }
        e.$inject = ["$scope", "$mdDialog", "achievement", "achievementUrl", "Logsly"], angular.module("epicApp").controller("AchievementDetailCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s) {
            this.cdn = Globals.GLOBAL_CDN_BASE, this.mdMedia = t, this.close = function () {
                e.hide(),
                    function () {
                        var e = {
                            targetEmail: s.email,
                            isAfterHours: !0
                        };
                        r.openSubscriptionDialog(e, !0);
                        var t = {
                            student_id: s.id,
                            parent_email: s.email,
                            parent_account_id: s.accountId,
                            teacher_email: n.email,
                            teacher_account_id: n.id
                        };
                        l.setSessionStorageWithConfig("ah_bq_params_for_success_modal", t, !0), a.log(a.events.AFTER_HOURS_SUBSCRIBE_POPUP, t)
                    }()
            }, a.log(a.events.AFTER_HOURS_SUBSCRIBE_PROMPT_POPUP)
        }
        e.$inject = ["$mdDialog", "$mdMedia", "$state", "AccountService", "SubscriptionService", "ProfileService", "BigQuery", "SessionStorageService", "profileData"], angular.module("epicApp").controller("SubscriptionDialogPromptCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u) {
            var d = this;

            function p() {
                c.getCurrentProduct().then(function (e) {
                    e ? (d.model = new i(e), d.model.email = d.targetEmail ? d.targetEmail : n.email) : d.productNotAvailable = !0
                }).catch(function (e) {
                    bbb(e)
                })
            }

            function f() {
                t.hide()
            }
            d.data = s, d.targetEmail = null, d.isAfterHours = null, d.productService = c, d.productNotAvailable = !1, d.data && (d.targetEmail = d.data.targetEmail, d.isAfterHours = d.data.isAfterHours), d.STATE_START_READING = 1, d.STATE_UPDATE_CARD_INTRO = 2, d.STATE_UPDATE_CARD = 3, d.STATE_UPDATE_CARD_SUCCESS = 4, n.realSubscriptionStatus === n.STATUS_SUBSCRIPTION_EXPIRED && n.subscriptionType !== n.SUBSCRIPTION_TYPE_APPLE ? (d.state = d.STATE_UPDATE_CARD_INTRO, a.log(a.events.SUBSCRIBE_BLOCKER, {
                pay_state: r.getPayState()
            }), l.track("payment_update_shown", "website")) : d.state = d.STATE_START_READING, d.cdn = Globals.GLOBAL_CDN_BASE, d.numBooks = o.PROMO.NUM_BOOKS, d.isAfterHours ? c.getProduct(u.TEACHER_OFFER_AFTER_HOURS.productId, !0).then(function (e) {
                e ? (d.model = new i(e), d.model.email = d.targetEmail ? d.targetEmail : n.email, d.model.setAccountSource({
                    medium: "WEB_AFTER_HOURS"
                })) : p()
            }).catch(function (e) {
                bbb(e)
            }) : p(), d.getStarted = function () {
                return r.subscribeWithModel(d.model).then(function (e) {
                    return e.subscribeSuccess && (f(), r.openSubscriptionSuccessDialog({
                        price: d.model.product.price,
                        promoCode: d.model.promoCode
                    })), e
                })
            }, d.updateCard = function () {
                return r.updateCardWithModel(d.model).then(function (e) {
                    return e.success && (d.state = d.STATE_UPDATE_CARD_SUCCESS, l.track("payment_update_success", "website")), e
                })
            }, d.signIn = function () {
                n.logout(!0).then(function (t) {
                    f(), e.go("signIn"), l.track("subscription_flow_end", "subscription_flow"), a.log(a.events.SUBSCRIBE_PURCHASE_CANCEL, {
                        eduv: n.eduv
                    })
                })
            }, d.close = f
        }
        e.$inject = ["$state", "$mdDialog", "SiteConstants", "AccountService", "SubscriptionService", "SubscriptionModel", "BigQuery", "Logsly", "data", "ProductService", "PromoService"], angular.module("epicApp").controller("SubscriptionDialogCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c) {
            var u = this;
            u.cdn = Globals.GLOBAL_CDN_BASE, u.paymentDetails = s,
                function () {
                    if (!o.uuid) return;
                    if ("profileSelect" === t.current.name) {
                        u.showSelectProfileText = !0;
                        var e = c.getSessionStorageWithKey("ah_bq_params_for_success_modal", e);
                        c.removeSessionStorageKey("ah_bq_params_for_success_modal"), a.log(a.events.AFTER_HOURS_SUBSCRIBE_POPUP, e)
                    }
                    l.track("subscription_flow_subscription_success", "subscription_flow"), l.track("subscribe_success", "website"), a.log(a.events.SUBSCRIBE_OVERLAY_SUCCESS_VIEW, {
                        pay_state: n.getPayState(),
                        promo: u.paymentDetails.promoCode,
                        price: u.paymentDetails.price
                    }), a.log(a.events.SUBSCRIBE_OVERLAY_PURCHASE_SUCCEED), a.log(a.events.ACCOUNT_TRIAL_START), o.isHomeSchooler() && l.track("account-trial-homeschool", "web-app");
                    u.sasTrackingId = btoa(o.uuid + "606"), pintrk("track", "checkout"), fbq("track", "Purchase", {
                        value: 0,
                        currency: "USD"
                    })
                }(), u.close = function () {
                    e.hide(), a.log(a.events.SUBSCRIBE_OVERLAY_SUCCESS_CLOSE, {
                        pay_state: n.getPayState(),
                        promo: u.paymentDetails.promoCode,
                        price: u.paymentDetails.price
                    })
                }
        }
        e.$inject = ["$mdDialog", "$state", "AccountService", "SubscriptionService", "ProfileService", "QueryStringService", "BigQuery", "Logsly", "paymentDetails", "SessionStorageService"], angular.module("epicApp").controller("SubscriptionSuccessDialogCtrl", e)
    }(), angular.module("epicApp").controller("AccountLinkRequestModalController", ["$scope", "$modalInstance", function (e, t) {
        e.formData = {}, e.baseUrl = Globals.GLOBAL_URL, e.close = function () {
            t.close($("#eduEmail").val())
        }, e.dismiss = function () {
            t.dismiss()
        }
    }]), angular.module("epicApp"), angular.module("epicApp").controller("AddSchoolController", ["$scope", "EduSignUpService", "$rootScope", function (e, t, o) {
        e.eduSignUpService = t, e.showZipField = Globals.GLOBAL_LOCATION_USA, e.schoolTypes = ["Public", "Private", "Charter", "Magnet", "Parochial", "Head Start"], e.formSchoolData = {
            accountSchoolName: null,
            accountSchoolAddress: null,
            accountSchoolCity: null,
            accountSchoolZip: null,
            accountSchoolType: null,
            accountSchoolMdrPid: null
        }, e.formSchoolData.accountSchoolName = t.eduAccountData.accountSchoolName, e.formSchoolData.accountSchoolZip = t.eduAccountData.accountSchoolZip, e.formSchoolData.accountSchoolAddress = t.eduAccountData.accountSchoolAddress, e.formSchoolData.accountSchoolCity = t.eduAccountData.accountSchoolCity, e.formSchoolData.accountSchoolType = t.eduAccountData.accountSchoolType, e.addSchoolForm = {}, e.submit = function () {
            t.setAccountData(e.formSchoolData);
            var n = !e.showZipField;
            t.isSchoolSet(n) && e.formSchoolData.accountSchoolType ? (o.$broadcast("manually-added-school"), e.$close()) : e.attemptSubmit = !0
        }
    }]),
    function () {
        function e(e, t, o, n, r) {
            e.profileService = o, e.childProfiles = o.getChildProfilesWithoutGuest(), e.confirmAddEmails = function () {
                if (e.isSubmitting) return;
                e.isSubmitting = !0;
                for (var i = [], a = 0; a < e.emailsToUpdate.length; a++) {
                    var l = e.emailsToUpdate[a];
                    if (l) {
                        var s = o.isValidEmail(l);
                        s ? i.push(a) : e.emailHasError[a] = !0
                    }
                }
                if (Object.keys(e.emailHasError).length > 0) return void(e.isSubmitting = !1);
                for (var a = 0; a < i.length; a++) {
                    var c = i[a];
                    r.sendEnableHomeAccessRequest(e.childProfiles[c], e.emailsToUpdate[c], !1)
                }
                if ("edu-dashboard" === t.current.name) {
                    var u = {
                        student_count: e.childProfiles.length,
                        emails_sent: i.length
                    };
                    n.log(n.events.EDU_DASHBOARD_HOME_ACCESS_EMAIL_SEND, u)
                }
                1 === i.length ? r.showHomeAccessSentToast() : i.length > 1 && r.showHomeAccessSentToast(!0);
                e.$close()
            }, e.getEmailCount = function () {
                return e.childProfiles.filter(function (e) {
                    return e.email
                }).length
            }, e.clearError = function (t) {
                e.emailHasError.hasOwnProperty(t) && delete e.emailHasError[t]
            }, e.getErrorCount = function () {
                return Object.keys(e.emailHasError).length
            }, e.emailsToUpdate = [], e.emailHasError = {}, e.isSubmitting = !1, e.childProfiles = e.childProfiles.filter(function (e) {
                return e.homeAccessStatus === o.HOME_ACCESS_STATUS_CAN_ENABLE
            }), e.childProfiles.sort(function (e, t) {
                return !e.email && t.email ? -1 : e.email && !t.email ? 1 : 0
            }), "edu-dashboard" === t.current.name && e.dashboardStats && (e.dashboardStats.student_count = e.childProfiles.length, n.log(n.events.EDU_DASHBOARD_HOME_ACCESS_EMAIL_VIEW, e.dashboardStats))
        }
        e.$inject = ["$scope", "$state", "ProfileService", "BigQuery", "ProfileEditService"], angular.module("epicApp").controller("AddStudentEmailsController", e)
    }(), angular.module("epicApp").controller("AddStudentsIntroController", ["$modalInstance", "GoogleClassroomService", "$scope", "BigQuery", "ProfileService", function (e, t, o, n, r) {
        n.log(n.events.ASSIGN_ADD_STUDENT_VIEW), t.initialize(), this.goToAddRoster = function () {
            n.log(n.events.ASSIGN_ADD_STUDENT_SELECT, {
                select: "add_students"
            }), e.close({
                goToAddRoster: !0
            })
        }, this.startGoogleClassroom = function () {
            n.log(n.events.ASSIGN_ADD_STUDENT_SELECT, {
                select: "google_classroom"
            }), t.openClassroom()
        }, o.$on("googleImportComplete", function () {
            n.log(n.events.ASSIGN_ADD_STUDENT_SUCCESS_GOOGLE, {
                student_count: r.childProfiles.length - 1
            }), e.close({
                goToAssign: !0
            })
        })
    }]),
    function () {
        function e(e, t) {
            this.title = t.title, this.message = t.message, this.submit = t.submit || "Confirm", this.confirm = function () {
                t.confirm && t.confirm();
                e.onClose && e.onClose();
                e.$close()
            }
        }
        e.$inject = ["$scope", "params"], angular.module("epicApp").controller("EpicAlertCtrl", e)
    }(), angular.module("epicApp").controller("ArchiveStudentsController", ["$scope", "$modalInstance", "Data", "ProfileService", "BigQuery", function (e, t, o, n, r) {
        e.archiveInProgress = !1, e.closeModal = function () {
            t.close()
        }, e.archive = function () {
            e.attemptSubmit || (e.archiveInProgress = !0, o.post("WebAccount", "archiveEducatorProfiles", {
                archiveAll: !0
            }).then(function (e) {
                if (e.result)
                    if (e.result.profiles) {
                        var o = n.childProfiles.length - e.result.profiles.length;
                        r.log(r.events.EDU_ROSTER_ARCHIVE_STUDENT, {
                            archive_student_count: o
                        }), n.reloadProfiles().then(function () {
                            t.close()
                        })
                    } else e.result.error && bbb("Error archiving students:", e.result.error)
            }))
        }
    }]), angular.module("epicApp").controller("AssignContentController", ["AccountService", "ProfileService", "$modalInstance", "CollectionService", "$q", "$mdToast", "BookService", "BigQuery", "$filter", function (e, t, o, n, r, i, a, l, s) {
        var c = this;
        c.profileService = t, c.accountService = e, c.collectionService = n, c.childProfiles = [], c.collectionId = null, c.bookData = null, c.assignList = {}, c.isLoadingCollAndAssignmentData = !0, c.isSubmitting = {
            all: !1,
            selected: !1
        }, c.studentNameSearchTerm = "", c.childProfiles = t.childProfiles, c.bookData = o.bookData, c.bookData.id = c.bookData.id || c.bookData.modelId, c.childProfiles.forEach(function (e) {
            c.assignList[e.id] = !1
        }), n.getPlaylistsByBookId(c.bookData.id, n.TYPES.SINGLE_BOOK).then(function (e) {
            e.length > 0 ? (c.collectionId = e[0].id, n.getAssignmentDataForCollection({
                contentId: c.collectionId
            }).then(function (e) {
                e.forEach(function (e) {
                    e.id = e.id || e.modelId, e.assignmentData && (c.assignList[e.id] = !0)
                }), c.isLoadingCollAndAssignmentData = !1
            })) : c.isLoadingCollAndAssignmentData = !1
        }), o.result.then(function () {
            n.clearEventSourceString()
        }, function () {
            n.clearEventSourceString()
        }), c.submitAssign = function (e) {
            var s, u, d = [],
                p = [];
            if (e)
                for (var f in c.isSubmitting.all = !0, c.assignList) d.push(parseInt(f));
            else
                for (var g in c.isSubmitting.selected = !0, c.assignList) s = parseInt(g), c.assignList[s] ? d.push(s) : p.push(s);
            (u = r.defer(), c.collectionId ? (u.resolve(), u.promise) : (c.bookData.id || c.bookData.modelId, n.createCollection(c.bookData, {
                type: n.TYPES.SINGLE_BOOK
            }, !0).then(function (e) {
                c.collectionId = e.id
            }))).then(function () {
                n.assignToCollection(c.collectionId, d, p).then(function () {
                    n.logCollectionEvent(c.collectionId, l.events.COLLECTION_ASSIGN_FINISH, {
                        student_count: t.childProfiles.length,
                        one_book_special: 1,
                        source: n.eventSourceString,
                        assign_student_count: d.length
                    }), e ? c.isSubmitting.all = !1 : c.isSubmitting.selected = !1;
                    var r = "You have assigned this to ".concat(d.length, " ").concat(c.accountService.isEducator() ? "student" : "profile").concat(d.length > 1 ? "s" : "", "!"),
                        s = "Manage your assignments and view ".concat(c.accountService.isEducator() ? "student" : "", ' progress through <a class="pointer" href="/app/my-library/collections">My Library</a>.'),
                        u = 4 === c.bookData.type ? ["book-toast-template video-version"] : ["book-toast-template"];
                    i.show({
                        hideDelay: 2e4,
                        position: "bottom right",
                        controller: "ToastTemplateController",
                        templateUrl: "toasts/toast-template/toast-template.html",
                        locals: {
                            title: r,
                            desc: s,
                            imgPath: a.thumbPath(c.bookData.id),
                            classes: u
                        }
                    }), o.close()
                })
            })
        }, c.toggleSelectAllUsers = function () {
            var e = !0;
            c.isAllSelected() && (e = !1), Object.keys(c.assignList).forEach(function (t) {
                return c.assignList[t] = e
            })
        }, c.isAllSelected = function () {
            return Object.values(c.assignList).filter(function (e) {
                return e
            }).length === c.childProfiles.length
        }, c.hasSelected = function () {
            return Object.values(c.assignList).filter(function (e) {
                return e
            }).length > 0
        }, c.getAssignedCount = function () {
            var e = 0;
            for (var t in c.assignList) c.assignList[t] && e++;
            return e
        }, c.filterStudentsByName = function (e) {
            var t = c.studentNameSearchTerm.toLowerCase();
            return e.firstName.toLowerCase().startsWith(t) || e.lastName.toLowerCase().startsWith(t) || e.name.toLowerCase().startsWith(t)
        }, c.goToRosterFlow = function () {
            l.log(l.events.CONTENT_ASSIGN_ADD_STUDENTS, {
                student_count: t.childProfiles.length - 1
            }), o.close(), n.goToAddMoreStudentsAndAssign(c.bookData)
        }, c.logStudentSearch = function () {
            c.studentNameSearchTerm && l.log(l.events.CONTENT_ASSIGN_STUDENTS_SEARCH)
        }, c.onSearchFocus = function (e) {
            e.target.select()
        }
    }]), angular.module("epicApp").controller("BookAddToCollectionModalController", ["$scope", "$timeout", "StringService", "$modalInstance", "CollectionService", "BigQuery", "$state", "LoggingSourceTranslation", function (e, t, o, n, r, i, a, l) {
        if (e.collectionList = [], e.maxCollTitleLength = 100, e.subOptions = {
                maxTitleLength: 140,
                maxDescLength: 4096
            }, e.bookData = n.bookData, e.bookData = e.bookData[0], e.bookTitle = e.bookData.title, e.bookId = e.bookData.id || e.bookData.modelId, "search" === a.current.name) {
            var s = {
                book_id: e.bookData.id || e.bookData.modelId
            };
            i.log(i.events.COLLECTION_START_SEARCH_ONE, s)
        }
        var c = l.translateSourceString(a.current.name);
        i.log(i.events.COLLECTION_ADD_TO_VIEW, {
            book_ids: e.bookId,
            content_count: 1,
            src: c
        }), e.ncOptions = {
            title: null,
            description: null,
            share: !0,
            formIsOpen: !1
        };
        var u = !1;
        e.addBookPending = !1, e.isLoadingPlaylists = !0, e.stringService = o, r.getCollections(r.TYPES.REGULAR).then(function (t) {
            t && (0 === (t = Object.values(t)).length ? (e.ncOptions.formIsOpen = !0, e.focusCreateFormTitleInput()) : (e.collectionList = t, e.collectionList.forEach(function (t, o) {
                t.bookIds.indexOf(e.bookId) > -1 && (t.isSelected = !0, t.isNotToggleable = !0)
            })), e.isLoadingPlaylists = !1)
        }), e.focusCreateFormTitleInput = function () {
            t(function () {
                document.getElementById("book-add-to-collection-title").focus()
            }, 200)
        }, e.toggleShowCreateCollection = function () {
            e.collectionList.length > 0 && (e.ncOptions.formIsOpen = !e.ncOptions.formIsOpen, e.ncOptions.formIsOpen ? (e.focusCreateFormTitleInput(), i.log(i.events.COLLECTION_CREATE_NEW, {
                book_ids: e.bookId,
                content_count: 1
            })) : i.log(i.events.COLLECTION_CREATE_NEW_CLOSE, {
                book_ids: e.bookId,
                content_count: 1
            }))
        }, e.collectionsAreSelected = function () {
            for (var t = e.collectionList, o = 0; o < t.length; o++)
                if (t[o].isSelected && !t[o].isNotToggleable) return !0;
            return !1
        }, e.createFormReady = function () {
            if (e.ncOptions.title) return e.ncOptions.title.trim().length > 0
        }, e.submitBookAdd = function () {
            if (e.collectionsAreSelected() && !e.addBookPending) {
                e.addBookPending = !0;
                var t = [];
                e.collectionList.forEach(function (e, o) {
                    e.isSelected && !e.isNotToggleable && t.push(e.id)
                }), r.addBookToCollections(e.bookData, t).then(function (o) {
                    if (1 === t.length && o[n]) {
                        var n = t[0],
                            i = o[n].playlist;
                        r.checkDisplayPinterestShareModal(i, i.simpleBookData.length).then(function (t) {
                            t && t.collection ? e.$close({
                                type: "pinterest",
                                collection: i
                            }) : e.$close()
                        })
                    } else e.$close()
                })
            }
        }, e.submitCollectionCreate = function () {
            if (e.createFormReady() && !u) {
                u = !0;
                var t = e.ncOptions.title,
                    o = e.ncOptions.description || "",
                    n = e.ncOptions.share;
                i.log(i.events.COLLECTION_CREATE_NEW_FINISH, {
                    book_ids: e.bookId,
                    content_count: 1,
                    title: t,
                    description: o ? "yes" : "no",
                    share_on: n ? "yes" : "no"
                }), r.createCollection(e.bookData, {
                    title: t,
                    desc: o,
                    share: n
                }).then(function () {
                    e.$close()
                })
            }
        }, e.closeAndLogBigQuery = function () {
            i.log(i.events.COLLECTION_ADD_TO_CLOSE, {
                book_ids: e.bookId,
                content_count: 1
            }), e.$close()
        }
    }]), angular.module("epicApp").directive("bookCopyrightModal", ["BookService", "AssetService", function (e, t) {
        return {
            restrict: "E",
            scope: !0,
            templateUrl: "modals/book-copyright/book-copyright-modal.html",
            link: function (o, n, r) {
                o.bookService = e, o.getCopyrightUrl = function () {
                    return t.getFinalAssetPath(e.getCopyrightUrl())
                }
            }
        }
    }]), angular.module("epicApp").directive("bookEmailRecommend", ["$timeout", "Data", function (e, t) {
        return {
            restrict: "E",
            templateUrl: "modals/book-email-recommend/book-email-recommend.html",
            scope: !0,
            link: function (o, n, r) {
                o.email = {}, o.cdn = Globals.GLOBAL_CDN_BASE, o.baseUrl = Globals.GLOBAL_URL, o.bookImageUrl = o.cdn + "drm/" + o.book.id.toString().slice(-1) + "/" + o.book.id + "/cover.jpg", o.formIsReady = function () {
                    return !(!o.email.userEmail || !o.email.recipientEmail)
                }, o.sendRecommendation = function () {
                    if (o.email.userEmail && o.email.recipientEmail) {
                        o.email.sending = !0, o.email.errorMessage = null;
                        var n = {
                            recipientEmail: o.email.recipientEmail,
                            userEmail: o.email.userEmail,
                            emailMessage: o.email.emailMessage || "",
                            bookId: o.book.id
                        };
                        t.post("WebUserBook", "sendRecommendedBookEmail", n).then(function (t) {
                            o.email.sending = !1, t.result && t.result.success ? (o.email.sent = !0, e(function () {
                                o.$close()
                            }, 1e3)) : o.email.errorMessage = "There was a problem sending your email"
                        })
                    }
                }
            }
        }
    }]), angular.module("epicApp").directive("bookFinishModal", ["$interval", "$timeout", "$mdDialog", "BookService", "ProfileService", function (e, t, o, n, r) {
        return {
            restrict: "E",
            templateUrl: "modals/book-finish/book-finish-modal.html",
            scope: {
                finishBookStats: "="
            },
            link: function (i, a, l) {
                function s(o, n, r) {
                    i[o] = 0;
                    var a = Math.floor(r / i.rampTickDuration),
                        l = n / a,
                        s = e(function () {
                            a > 0 ? (i[o] = i[o] + l, a -= 1) : (i[o] = n, e.cancel(s), t(function () {
                                i.isShowingAvatar = !1
                            }, 2e3))
                        }, i.rampTickDuration)
                }
                i.bookService = n, i.profileService = r, i.cdn = Globals.GLOBAL_CDN_BASE, i.statRampDuration = 700, i.rampTickDuration = 10, i.currLevelProgress = 0, i.currPointsEarned = 0, i.currReadingTime = 0, i.isShowingAvatar = !0, i.isSmallPageSize = function () {
                    return a[0].parentElement && a[0].parentElement.clientHeight < 500
                }, i.getProfileLevel = function () {
                    return i.finishBookStats.userLevel
                }, i.getProgressBarStyle = function () {
                    return {
                        background: "linear-gradient(90deg, rgb(0, 216, 255) " + i.currLevelProgress + "%, rgb(72, 76, 85) 0%)"
                    }
                }, i.getFormattedPointsEarned = function () {
                    return Math.floor(i.currPointsEarned) + " Points"
                }, i.getFormattedReadingTime = function () {
                    var e = Math.floor(i.currReadingTime / 60),
                        t = Math.floor(i.currReadingTime - 60 * e);
                    return (e ? e + " Hour " : "") + t + " Minutes"
                }, i.close = function () {
                    o.hide()
                }, s("currLevelProgress", i.finishBookStats.userLevelProgressPercentage, i.statRampDuration), s("currPointsEarned", i.finishBookStats.pointsEarned, i.statRampDuration), s("currReadingTime", Math.ceil(i.finishBookStats.readTime / 60), i.statRampDuration), i.toggleStamp = function (e) {
                    e.stopPropagation(), i.showBookCompleteStamp = !i.showBookCompleteStamp
                }
            }
        }
    }]), angular.module("epicApp").directive("bookSocialRecommend", ["StringService", function (e) {
        return {
            restrict: "E",
            templateUrl: "modals/book-social-recommend/book-social-recommend.html",
            scope: !0,
            link: {
                pre: function (t, o, n) {
                    t.cdn = Globals.GLOBAL_CDN_BASE, t.baseUrl = Globals.GLOBAL_URL;
                    var r, i, a = {
                            1: "book",
                            2: "audiobook",
                            4: "video"
                        },
                        l = t.baseUrl + (i = t.book.type, a[i]) + "/" + (r = t.book.id, 1111 * parseInt(r) + 2) + "/" + e.getSEOFriendlyString(t.book.title),
                        s = function (e) {
                            return t.cdn + "drm/" + e.toString().slice(-1) + "/" + e + "/cover_large.jpg"
                        }(t.book.id);
                    t.facebook = {
                        imageUrl: s,
                        text: "Epic! - Books for Kids. Read FREE for 30 Days!",
                        caption: "Instant access to thousands of great kids books.",
                        linkUrl: l
                    }, t.pinterest = {
                        imageUrl: s,
                        text: "Epic! - Books for Kids. Read FREE for 30 Days!",
                        linkUrl: l
                    }, t.twitter = {
                        text: t.book.title + " – Read FREE for 30 days!",
                        linkUrl: l,
                        hashtags: "",
                        via: "EpicKidsBooks"
                    }
                },
                post: function (e, t, o) {}
            }
        }
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s) {
            function c() {
                t.isEmpty = !1, t.hasError = !1, t.coursesLoading = !0, gapi.client.classroom.courses.list().then(function (e) {
                    var n = [];
                    if (e.result && e.result.courses && e.result.courses.length > 0 && (n = e.result.courses.filter(function (e) {
                            return !!e.teacherFolder
                        })), n.length > 0) {
                        var r = null;
                        angular.forEach(n, function (e, n) {
                            var i = new o(e);
                            r = i.id, t.courses[i.id] = i
                        }), t.numberOfCourses = n.length, e.result.courses.length < 2 && t.chooseCourse(r)
                    } else t.isEmpty = !0;
                    t.coursesLoading = !1, t.$apply()
                }, function (e) {
                    403 === e.status ? console.warn("This user does not have permission to use Google Classroom", e) : console.warn("Error encountered trying to use Google Classroom", e), t.hasError = !0, t.coursesLoading = !1, t.$apply()
                })
            }
            t.courses = {}, t.students = {}, t.student = {}, t.isEmptyClassroom = !1, t.isEmpty = !1, t.hasError = !1, t.tabData = {}, t.tabData.selectedIndex = 0, t.numberOfCourses = 0, t.numberOfStudent = 0, t.hasStudentError = !1, t.coursesLoading = !0, t.googleUserBasicProfile = e.googleUserBasicProfile, t.tabs = [{
                    label: "course",
                    title: "Select a Course"
                }, {
                    label: "student"
                }], t.allStudentsAreAssigned = function () {
                    var e = !0;
                    return angular.forEach(t.student, function (t, o) {
                        e = e && t.isSelected
                    }), e
                }, t.unSelectAllStudents = function () {
                    angular.forEach(t.student, function (e, t) {
                        e.isSelected = !1
                    })
                }, t.selectAllStudents = function () {
                    angular.forEach(t.student, function (e, t) {
                        e.isSelected = !0
                    })
                }, t.chooseCourse = function (e) {
                    t.hasError = !1, t.isEmptyClassroom = !1, t.numberOfStudent = 0, t.student = {}, t.students[e] ? (t.student = t.students[e], t.numberOfStudent = t.students[e].length) : function (e) {
                        t.hasStudentError = !1, t.studentStillLoading = !0, gapi.client.classroom.courses.students.list({
                            courseId: e,
                            pageSize: 0
                        }).then(function (o) {
                            if (o.result.students && o.result.students.length > 0) {
                                var r = [];
                                angular.forEach(o.result.students, function (e, t) {
                                    var o = new n(e);
                                    r.push(o)
                                }), t.students[e] = r, t.student = r, t.numberOfStudent = o.result.students.length
                            } else t.isEmptyClassroom = !0;
                            t.$apply()
                        }, function (e) {
                            403 === e.status ? console.warn("This user does not have permission to use Google Classroom", e) : console.warn("Error encountered trying to use Google Classroom", e), a.log(a.events.GOOGLE_CLASSROOM_SIGN_IN_FAILED), t.hasStudentError = !0
                        })
                    }(e);
                    t.currentCourse = t.courses[e].name, t.tabData.selectedIndex = 1
                }, t.hasSelected = function () {
                    var e = !1;
                    return angular.forEach(t.student, function (t, o) {
                        t.isSelected && (e = e || !0)
                    }), e
                }, t.submitUserData = function () {
                    if (!t.hasSelected()) return;
                    var o = {
                        userData: []
                    };
                    angular.forEach(t.student, function (e, t) {
                        e.isSelected && o.userData.push(e)
                    }), o.userData.length > 0 ? r.post("WebAccount", "batchCreateStudentUsersForAccount", o).then(function (o) {
                        if (o && o.success) {
                            s.reloadProfiles(), i.close(o.result);
                            var n = {};
                            if (o.result && o.result.data && (n = {
                                    total_students_in_class: t.numberOfStudent,
                                    students_added: o.result.data.usersAdded,
                                    duplicates: o.result.data.duplicates
                                }), a.log(a.events.GOOGLE_CLASSROOM_IMPORT_COMPLETE, n), e.fromRosterPage) {
                                var r = {
                                    student_count: o.result.data.usersAdded
                                };
                                a.log(a.events.EDU_ROSTER_GOOGLE_CLASSROOM_SUCCESS, r), e.fromRosterPage = !1
                            }
                            l.$broadcast("googleImportComplete", {
                                numStudentsAdded: o.result.data.usersAdded
                            })
                        }
                    }) : i.close()
                }, t.backClicked = function () {
                    t.tabData.selectedIndex--
                }, t.signoutOfGoogle = function () {
                    e.switchUser(), i.dismiss()
                }, t.$watch(function () {
                    return e.googleUserBasicProfile
                }, function (e, o) {
                    t.googleUserBasicProfile = e
                }),
                function () {
                    try {
                        gapi.client.load("classroom", "v1").then(c)
                    } catch (e) {
                        console.warn("Unable to load classroom", e), t.$apply()
                    }
                }()
        }
        e.$inject = ["GoogleClassroomService", "$scope", "GoogleClassroomCourse", "GoogleClassroomStudent", "Data", "$modalInstance", "BigQuery", "$rootScope", "ProfileService"], angular.module("epicApp").controller("GoogleClassroomController", e)
    }(),
    function () {
        function e(e) {
            this.code = e
        }
        e.$inject = ["code"], angular.module("epicApp").controller("ClassroomCodeModalCtrl", e)
    }(), angular.module("epicApp").controller("CollectionAssignModalController", ["$scope", "$mdToast", "Data", "AccountService", "ProfileService", "StringService", "$modalInstance", "CollectionService", "BigQuery", function (e, t, o, n, r, i, a, l, s) {
        function c(t) {
            e.collectionAssignData.isLoadingStudents = !0, e.collectionAssignData.students = [];
            var n = {
                contentId: e.collection.id
            };
            t && (n.groupId = t), o.get("WebPlaylist", "getUsersAndAssignmentsAndProgressData", n).then(function (t) {
                if (t.result) {
                    var o = 0;
                    for (var n in t.result) {
                        var r = t.result[n];
                        r.assignmentData ? (r.isAssigned = !0, e.initStudentData.assigned[r.modelId] = !0, r.assignmentProgress = r.progressCount / r.progressTotal * 100, o++) : (r.isAssigned = !1, e.initStudentData.notAssigned[r.modelId] = !0), e.collectionAssignData.students.push(r)
                    }
                    e.collectionAssignData.students.sort(function (e, t) {
                        if (e.assignmentData && !t.assignmentData) return -1;
                        if (t.assignmentData && !e.assignmentData) return 1;
                        var o = e.journalName.toUpperCase(),
                            n = t.journalName.toUpperCase();
                        return o === n ? 0 : o > n ? 1 : -1
                    }), e.collectionAssignData.isLoadingStudents = !1, s.log(s.events.EDU_ACTIVITIES_ASSIGNMENTS_VIEW, {
                        assign_student_count: o
                    })
                }
            })
        }
        e.accountService = n, e.profile = r.currentProfile, e.stringService = i, e.cdn = Globals.GLOBAL_CDN_BASE, e.collection = a.collection, e.collectionAssignData = {
            students: [],
            isLoadingStudents: !1
        }, e.maxCollTitleLength = 80, e.initStudentData = {
            assigned: {},
            notAssigned: {}
        }, e.$on("$destroy", function () {
            e.parent$scope && e.parent$scope.$close()
        }), c(), e.selectGroup = function (t) {
            c(t), l.logCollectionEvent(e.collection.id, s.events.COLLECTION_ASSIGN_GROUP_CHANGE)
        }, e.getStudentsAssignedCount = function () {
            return e.collectionAssignData.students.filter(function (e) {
                return e.isAssigned
            }).length
        }, e.getStudentsAlreadyAssignedCount = function () {
            return e.collectionAssignData.students.filter(function (e) {
                return e.assignmentData
            }).length
        }, e.selectAllStudents = function () {
            e.collectionAssignData.students.forEach(function (e, t) {
                e.isAssigned || (e.assignmentHasChanged = !e.assignmentHasChanged, e.isAssigned = !0)
            }), l.logCollectionEvent(e.collection.id, s.events.COLLECTION_ASSIGN_SELECT_ALL)
        }, e.unSelectAllStudents = function () {
            e.collectionAssignData.students.forEach(function (e, t) {
                e.isAssigned && (e.assignmentHasChanged = !e.assignmentHasChanged, e.isAssigned = !1)
            })
        }, e.allStudentsAreAssigned = function () {
            return e.getStudentsAssignedCount() === e.collectionAssignData.students.length
        }, e.assignmentsHaveChanged = function () {
            for (var t = 0; t < e.collectionAssignData.students.length; t++)
                if (e.collectionAssignData.students[t].assignmentHasChanged) return !0;
            return !1
        }, e.submitStudentAssign = function () {
            if (e.assignmentsHaveChanged()) {
                var n = [],
                    r = [];
                e.collectionAssignData.students.forEach(function (t, o) {
                    t.isAssigned && e.initStudentData.notAssigned[t.modelId] ? n.push(t.modelId) : !t.isAssigned && e.initStudentData.assigned[t.modelId] && r.push(t.modelId)
                }), l.logCollectionEvent(e.collection.id, s.events.COLLECTION_ASSIGN_FINISH, {
                    one_book_special: e.collection.type === l.TYPES.SINGLE_BOOK ? 1 : 0,
                    assign_student_count: n.length
                });
                var i = {
                    assigneeIds: n,
                    unAssigneeIds: r,
                    contentId: e.collection.id
                };
                o.post("WebPlaylist", "assignAndUnAssignByAssigneeIds", i).then(function (o) {
                    o.result && (i.assigneeIds.length > 0 && t.show({
                        hideDelay: 3e3,
                        position: "bottom right",
                        controller: "CollectionAssignToastController",
                        templateUrl: "toasts/collection-assign/collection-assign.html",
                        locals: {
                            collection: e.collection
                        }
                    }), s.log(s.events.EDU_ACTIVITIES_ASSIGNMENTS_ASSIGN, {
                        assign_student_count: i.assigneeIds.length
                    })), e.$close()
                })
            }
        }
    }]), angular.module("epicApp").directive("collectionAssignments", ["Data", "StringService", function (e, t) {
        return {
            restrict: "E",
            templateUrl: "modals/collection-assignments/collection-assignments.html",
            scope: !0,
            link: function (o, n, r) {
                o.cdn = Globals.GLOBAL_CDN_BASE, o.collectionList = [], o.maxCollTitleLength = 100, o.initialAssigned = {}, o.stringService = t, e.get("WebPlaylist", "getPlaylistsAndAssignmentsDataForAssignee", {
                    assigneeId: o.studentId
                }).then(function (e) {
                    e.success && e.result && (o.collectionList = e.result, o.collectionList.forEach(function (e, t) {
                        e.assignmentData ? (e.isAssigned = !0, o.initialAssigned[e.title] = !0) : (e.isAssigned = !1, o.initialAssigned[e.title] = !1)
                    }))
                }), o.getAvatarImageUrl = function (e) {
                    return o.cdn + "journal/avatars/avatar_" + e + "_nav@2x.png"
                }, o.getCollectionsAssignedCount = function () {
                    var e = 0;
                    return o.collectionList.forEach(function (t, o) {
                        t.isAssigned && e++
                    }), e
                }, o.selectAllCollections = function () {
                    o.collectionList.forEach(function (e, t) {
                        e.isAssigned = !0
                    })
                }, o.unSelectAllCollections = function () {
                    o.collectionList.forEach(function (e, t) {
                        e.isAssigned = !1
                    })
                }, o.allCollectionsAreAssigned = function () {
                    return o.getCollectionsAssignedCount() === o.collectionList.length
                }, o.assigmentsHaveChanged = function () {
                    for (var e, t = 0; t < o.collectionList.length; t++)
                        if ((e = o.collectionList[t]).isAssigned !== o.initialAssigned[e.title]) return !0;
                    return !1
                }, o.submitStudentAssign = function () {
                    if (o.assigmentsHaveChanged()) {
                        var t, n, r = (t = [], o.collectionList.forEach(function (e, n) {
                                e.isAssigned && e.isAssigned !== o.initialAssigned[e.title] && t.push(e.id)
                            }), t),
                            i = (n = [], o.collectionList.forEach(function (e, t) {
                                e.isAssigned || e.isAssigned === o.initialAssigned[e.title] || n.push(e.id)
                            }), n);
                        e.get("WebPlaylist", "assignAndUnAssignByContentIds", {
                            assigneeId: o.studentId,
                            assignContentIds: JSON.stringify(r),
                            unAssignContentIds: JSON.stringify(i)
                        }).then(function (e) {
                            o.$close()
                        })
                    }
                }
            }
        }
    }]), angular.module("epicApp").directive("collectionCopy", ["$state", "$modal", "$timeout", "Data", "CollectionService", "BigQuery", function (e, t, o, n, r, i) {
        return {
            restrict: "E",
            templateUrl: "modals/collection-copy/collection-copy.html",
            scope: !0,
            link: function (e, t, a) {
                e.subOptions = {
                    maxTitleLength: 140,
                    maxDescLength: 4096
                }, e.collectionMetadata = {
                    title: e.collection.title,
                    description: e.collection.description,
                    visibility: e.collection.visibility
                }, o(function () {
                    t.find("input.title-input").focus()
                }, 200), e.copyFormReady = function () {
                    return e.collectionMetadata.title && e.collectionMetadata.title.trim().length > 0
                }, e.submitCollectionCopy = function () {
                    if (e.copyFormReady()) {
                        r.logCollectionEvent(e.collection.id, i.events.COLLECTION_COPY_COLLECTION_SAVE);
                        var t = e.collectionMetadata;
                        e.copySubmitted = !0;
                        var o = {
                            playlistId: e.collection.id || e.collection.modelId,
                            title: t.title,
                            description: t.description
                        };
                        n.post("WebPlaylist", "copyPlaylist", o).then(function (t) {
                            t.result && t.result.id ? e.$close(t.result) : (console.warn("Problem cloning collection"), e.$close())
                        })
                    }
                }
            }
        }
    }]), angular.module("epicApp").directive("collectionDelete", function () {
        return {
            restrict: "E",
            templateUrl: "modals/collection-delete/collection-delete.html",
            scope: !0,
            link: function (e, t, o) {
                e.deleteCollection = function () {
                    e.$close(!0)
                }
            }
        }
    }), angular.module("epicApp").directive("collectionEdit", ["$state", "$modal", "$timeout", "Data", "BigQuery", "CollectionService", function (e, t, o, n, r, i) {
        return {
            restrict: "E",
            templateUrl: "modals/collection-edit/collection-edit.html",
            scope: !0,
            link: function (e, t, a) {
                e.subOptions = {
                    maxTitleLength: 140,
                    maxDescLength: 1024
                }, e.collectionMetadata = {
                    title: e.collection.title,
                    description: e.collection.description,
                    visibility: e.collection.visibility,
                    lesson_plan: e.collection.lesson_plan
                }, o(function () {
                    t.find("input.title-input").focus()
                }, 200), e.editFormReady = function () {
                    return e.collectionMetadata.title && e.collectionMetadata.title.trim().length > 0
                }, e.submitCollectionEdit = function () {
                    if (e.editFormReady()) {
                        i.logCollectionEvent(e.collection.id, r.events.COLLECTION_EDIT_SAVE);
                        var t = e.collectionMetadata,
                            o = {
                                playlistId: e.collection.id,
                                title: t.title,
                                description: t.description || "",
                                visibility: t.visibility ? 1 : 0,
                                lessonPlan: t.lesson_plan
                            };
                        n.get("WebPlaylist", "updatePlaylistProperties", o).then(function (t) {
                            t.result && (e.collection.title = t.result.title, e.collection.description = t.result.description, e.collection.visibility = t.result.visibility, e.collection.lesson_plan = t.result.lesson_plan), e.$close("update")
                        })
                    }
                }, e.closeModal = function () {
                    i.logCollectionEvent(e.collection.id, r.events.COLLECTION_EDIT_CLOSE), e.$close()
                }
            }
        }
    }]), angular.module("epicApp").controller("CollectionInfoModalController", ["$scope", "$modalInstance", "Data", function (e, t, o) {
        e.close = function () {
            t.close()
        }, e.getCollectionAgeRange = function () {
            var t = e.collection.age_range_min,
                o = e.collection.age_range_max;
            return t === o ? t : t + "–" + o
        }
    }]), angular.module("epicApp").controller("LessonPlanModalController", ["$scope", "$modalInstance", "Data", function (e, t, o) {
        var n = angular.copy(e.collection.lesson_plan);
        e.submitLessonPlanEdit = function () {
            var n = {
                playlistId: e.collection.id,
                lessonPlan: e.collection.lesson_plan
            };
            o.get("WebPlaylist", "updatePlaylistProperties", n).then(function (e) {
                e.result && t.close()
            })
        }, e.close = function () {
            e.collection.lesson_plan = n, t.close()
        }
    }]), angular.module("epicApp").controller("CollectionPinterestAskModalController", ["$scope", "$modalInstance", "$timeout", "StringService", "ShareContentService", function (e, t, o, n, r) {
        e.collection = t.collection, e.collection || e.$close(), e.openRecentTeacherSelectorModal = function () {
            r.openRecentTeacherSelectorModal(e.collection, "modal"), e.$close()
        }, e.openCopyCollectionLinkModal = function () {
            r.openCopyCollectionLinkModal(e.collection, "modal"), e.$close()
        }, e.openEmailShareModal = function () {
            r.openEmailShareModal(e.collection, "modal"), e.$close()
        }, e.pinterestLinkUrl = encodeURIComponent(Globals.GLOBAL_URL + "collection/" + e.collection.id + "/" + n.getSEOFriendlyString(e.collection.title) + "?utm_source=pinterest&utm_medium=social&utm_campaign=collections"), e.pinterestImageUrl = encodeURIComponent(Globals.GLOBAL_URL + "collection-image/" + e.collection.id + ".jpg"), e.pinterestText = encodeURIComponent(e.collection.title + " - " + n.truncate(e.collection.description, 150)), e.openPinterestUrl = function () {
            var t = "http://pinterest.com/pin/create/button/?url=" + e.pinterestLinkUrl + "&media=" + e.pinterestImageUrl + "&description=" + e.pinterestText;
            r.openPinterestUrl(t, e.collection.id, "modal")
        }
    }]), angular.module("epicApp").directive("collectionPinterestAsk", ["$timeout", "StringService", "ShareContentService", function (e, t, o) {
        return {
            restrict: "E",
            templateUrl: "modals/collection-pinterest-ask/collection-pinterest-ask.html",
            scope: !0,
            link: function (e, n, r) {
                e.openRecentTeacherSelectorModal = function () {
                    o.openRecentTeacherSelectorModal(e.collection), e.$close()
                }, e.openCopyCollectionLinkModal = function () {
                    o.openCopyCollectionLinkModal(e.collection), e.$close()
                }, e.openEmailShareModal = function () {
                    o.openEmailShareModal(e.collection), e.$close()
                }, e.pinterestLinkUrl = encodeURIComponent(Globals.GLOBAL_URL + "collection/" + e.collection.id + "/" + t.getSEOFriendlyString(e.collection.title) + "?utm_source=pinterest&utm_medium=social&utm_campaign=collections"), e.pinterestImageUrl = encodeURIComponent(Globals.GLOBAL_URL + "collection-image/" + e.collection.id + ".jpg"), e.pinterestText = encodeURIComponent(e.collection.title + " - " + t.truncate(e.collection.description, 150)), e.openPinterestUrl = function () {
                    var t = "http://pinterest.com/pin/create/button/?url=" + e.pinterestLinkUrl + "&media=" + e.pinterestImageUrl + "&description=" + e.pinterestText;
                    o.openPinterestUrl(t)
                }
            }
        }
    }]), angular.module("epicApp").directive("collectionUnshare", function () {
        return {
            restrict: "E",
            templateUrl: "modals/collection-unshare/collection-unshare.html",
            scope: !0,
            link: function (e, t, o) {}
        }
    }),
    function () {
        function e(e, t, o, n) {
            var r = this;
            r.copyText = function () {
                r.copied = !0;
                var e = r.parentMessage,
                    o = document.createElement("input");
                o.value = e, document.body.appendChild(o).select(), document.execCommand("copy"), document.body.removeChild(o), r.parentMessage, n = document.getElementsByClassName("message-preview-area")[0], n.classList.add("highlight"), setTimeout(function () {
                    n.classList.remove("highlight")
                }, 1500), setTimeout(function () {
                    r.copied = !1, t.$apply()
                }, 1500);
                var n
            }, r.accountService = o;
            var i = n.textMessageLanguage;
            r.parentMessage = "We are using Epic! in class to nurture students’ love of reading & learning. Connect with our class for free at www.getepic.com/connect using our class code ".concat(r.accountService.accountLoginCode.toLowerCase(), " to see what your child is reading & find out how to access Epic! at home. "), r.subheader = "Copy the text below to your clipboard and paste in ClassDojo or Remind.", r.copied = null,
                function () {
                    switch (i) {
                        case "spanish":
                            r.parentMessage = "Usamos Epic! en clase para fomentar en los alumnos la pasión por la lectura y el aprendizaje. Conéctate a nuestra clase gratis en www.getepic.com/connect con nuestro código de salón ".concat(r.accountService.accountLoginCode.toLowerCase(), " para observar cómo tu hijo o hija lee y averigua cómo acceder a Epic! en casa.");
                            break;
                        case "chinese":
                            r.parentMessage = "我们在课堂上使用 Epic! 来培养学生对于阅读与学习的乐趣。您可免费前往www.getepic.com/connect，使用我们的教室代码 ".concat(r.accountService.accountLoginCode.toLowerCase(), "，即可查看您的孩子正在阅读哪些书籍，并了解如何在家中使用 Epic!。")
                    }
                }()
        }
        angular.module("epicApp").controller("TextMessageCopyController", e), e.$inject = ["$location", "$scope", "AccountService", "$modalInstance"]
    }(), angular.module("epicApp").controller("EnableHomeAccessController", ["$scope", "StringService", "SiteConstants", "AccountService", "$modal", "BigQuery", "$state", "ProfileEditService", "ProfileService", function (e, t, o, n, r, i, a, l, s) {
        if (e.price = o.PRICE, e.isSubmitting = {
                homeAccess: !1
            }, !e.enableHomeAccessForMultiple) {
            e.parentEmail = e.profile.email || "";
            var c = n.email.split("@")[1] || "";
            e.excludedDomains = [c, ".edu"]
        }
        "edu-dashboard" === a.current.name && e.dashboardStats && i.log(i.events.EDU_DASHBOARD_HOME_ACCESS_EXPLAINER_VIEW, e.dashboardStats), e.validateEmail = function (e) {
            return t.validateEmail(e)
        }, e.enableHomeAccess = function (t) {
            if (!e.isSubmitting.homeAccess) {
                if (e.isSubmitting.homeAccess = !0, !e.validateEmail(t)) return bbb("Invalid email for home access"), void(e.isSubmitting.homeAccess = !1);
                l.sendEnableHomeAccessRequest(e.profile, t).then(function () {
                    "roster.roster-tab" === a.current.name && i.log(i.events.EDU_ROSTER_ADD_EMAIL_SEND), e.$close()
                })
            }
        }, e.showAddEmailsModal = function () {
            var t = e.$new(!0);
            "edu-dashboard" === a.current.name && e.dashboardStats && (i.log(i.events.EDU_DASHBOARD_HOME_ACCESS_EXPLAINER_CLICK, e.dashboardStats), t.dashboardStats = e.dashboardStats), e.$close(), s.getChildProfilesWithoutGuest().filter(function (e) {
                return e.homeAccessStatus === s.HOME_ACCESS_STATUS_CAN_ENABLE
            }).length ? r.open({
                templateUrl: "modals/add-student-emails/add-student-emails-modal.html",
                controller: "AddStudentEmailsController",
                size: "lg",
                keyboard: !1,
                scope: t
            }) : a.go("roster.roster-tab", {
                sendEmail: !0
            })
        }
    }]), angular.module("epicApp").controller("CollectionDeleteToastController", ["$scope", "$mdToast", "collection", "StringService", function (e, t, o, n) {
        e.collection = o, e.maxStrLen = 35, e.getCollectionTitle = function () {
            if (e.collection) return n.truncate(e.collection.title, e.maxStrLen)
        }, e.undo = function () {
            t.hide(!0)
        }, e.closeToast = function () {
            t.hide(!1)
        }
    }]), angular.module("epicApp").controller("DeleteMessageController", ["$scope", function (e) {
        e.delete = function () {
            e.$close({
                deleted: !0
            })
        }
    }]), angular.module("epicApp").controller("PreferencesController", ["$scope", "Data", "BrowseService", "EpicScroller", function (e, t, o, n) {
        e.ages = [{
            val: "2",
            name: "2 & Under"
        }, {
            val: "3",
            name: "3"
        }, {
            val: "4",
            name: "4"
        }, {
            val: "5",
            name: "5"
        }, {
            val: "6",
            name: "6"
        }, {
            val: "7",
            name: "7"
        }, {
            val: "8",
            name: "8"
        }, {
            val: "9",
            name: "9"
        }, {
            val: "10",
            name: "10"
        }, {
            val: "11",
            name: "11"
        }, {
            val: "12",
            name: "12"
        }], e.subjects = [], e.formats = [], e.preferences = [], e.scroller = new n(e.subjects), e.scroller.cellWidthLg = 180, e.scroller.cellWidthSm = 180, t.get("WebUser", "getUserPreferences", {
            type: "preferences"
        }).then(function (t) {
            var o, n;
            for (o in e.subjects = t.result.Subjects, e.formats = t.result.Formats, e.preferences = t.result.UserPreference, e.ages)(n = e.ages[o]).selected = n.val == Math.floor(e.preferences.age);
            for (o in e.formats)(n = e.formats[o]).selected = -1 != e.preferences.formats.indexOf(n.id);
            for (o in e.subjects)(n = e.subjects[o]).selected = -1 != e.preferences.subjects.indexOf(n.id)
        }), e.selectAge = function (t) {
            for (var o in e.ages) {
                var n = e.ages[o];
                n.selected = n == t
            }
            e.preferences.age = t.val
        }, e.selectFormat = function (t) {
            var o = e.preferences.formats.indexOf(t.id); - 1 == o ? e.preferences.formats.push(t.id) : e.preferences.formats.splice(o, 1)
        }, e.selectSubject = function (t) {
            var o = e.preferences.subjects.indexOf(t.id); - 1 == o ? e.preferences.subjects.push(t.id) : e.preferences.subjects.splice(o, 1)
        }, e.savePreferences = function () {
            t.get("WebUser", "setUserPreferences", {
                preferences: e.preferences
            }).then(function () {
                e.$close()
            })
        }
    }]),
    function () {
        function e(e, t, o, n, r) {
            var i = this;
            i.formData = {}, i.init = function (e, t) {
                i.profile = e, i.onSuccess = t || function () {}
            }, i.submit = function () {
                i.responseError = "", i.profile.isParent ? n.get("WebAccount", "validateParentPassword", {
                    pass: i.formData.pass || ""
                }).then(function (e) {
                    e.result && e.result.success ? ("profileSelect" === o.current.name && r.log(r.events.PROFILE_SELECT_PARENT_PASSWORD_CORRECT), i.onSuccess()) : e.result && e.result.alert_message ? ("profileSelect" === o.current.name && r.log(r.events.PROFILE_SELECT_PARENT_PASSWORD_INCORRECT), i.responseError = e.result.alert_message) : i.responseError = "Uh oh! Something went wrong."
                }) : i.formData.pass == i.profile.pin ? i.onSuccess() : i.responseError = "Incorrect PIN."
            }, e.$watch(function () {
                return i.formData.pass
            }, function (e, t) {
                i.responseError = ""
            })
        }
        e.$inject = ["$scope", "$document", "$state", "Data", "BigQuery"], angular.module("epicApp").controller("ProfileAccessFormCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            var l = this;
            l.profile = a.profile, l.profile.isParent ? (l.title = "Please Enter Your Password", l.placeholder = "Password", l.maxlength = "128", l.passType = "password") : (l.title = "Please Enter Your PIN", l.placeholder = "####", l.maxlength = "4", l.passType = "PIN"), l.close = function () {
                e.$close()
            }, l.switchProfile = function () {
                l.profile.isParent && i.setAfterHoursTimestamp();
                a.onSuccess(a.selectProfile || a.profile, n.currentProfile.id), e.$close()
            }, l.forgotPass = function () {
                o.location.href = Globals.GLOBAL_URL + "change-password"
            }
        }
        e.$inject = ["$scope", "$state", "$window", "ProfileService", "AccountService", "AfterHoursService", "accessData"], angular.module("epicApp").controller("ProfileAccessCtrl", e)
    }(),
    function () {
        var e = angular.module("epicApp");
        e.controller("ProfileEditController", ["$scope", "$mdDialog", "$window", "$q", "AccountLinkService", "AccountService", "ProfileService", "ProfileEditService", "profile", "EpicScroller", "Data", "Logsly", function (e, t, o, n, r, i, a, l, s, c, u, d) {
            if (e.isEducator = i.isEducator(), e.profileService = a, e.profile = s, e.toUpdateProfile = Object.assign({}, s), e.isGoogleLinkedProfile = !1, e.cdn = Globals.GLOBAL_CDN_BASE, e.maxNameLength = 30, !e.profile.isParent) {
                var p = e.profile.getPendingTransfer();
                e.isPendingTransfer = p && p.type === r.ACCOUNT_USER_TRANSFER_TYPE_OTHER, e.currentUserApprovedLink = e.profile.getApprovedLink(), e.currentUserApprovedLink && e.currentUserApprovedLink.type === r.ACCOUNT_USER_LINK_TYPE_OTHERS && (e.isGoogleLinkedProfile = !0)
            }
            e.getThemeImageUrl = l.getThemeImageUrl, e.themeImage = e.getThemeImageUrl(e.profile.themeId), e.$watch(function () {
                return e.profile.themeId
            }, function (t, o) {
                e.themeImage = e.getThemeImageUrl(t)
            }), e.defaultAvatars = !1, e.defaultFrames = !1;
            if (s.isParent && i.isEducator()) e.defaultAvatars = !0, e.avatars = l.teacherAvatars, e.avatarSelectScroller = h(e.avatars, 110);
            else if (s.isParent) e.defaultAvatars = !0, e.avatars = l.parentAvatars, e.avatarSelectScroller = h(e.avatars, 110);
            else {
                var f;
                u.get("WebUser", "getUserAvatarsLibrary", {
                    userId: s.id
                }).then(function (e) {
                    if ("object" === _typeof(e)) {
                        var t = e.result.filter(function (e) {
                            return !e.hidden
                        }).map(function (e) {
                            return e.isLocked = null === e.requirements || e.completed ? 0 : 1, e
                        });
                        return t
                    }
                    console.warn("Problem getting user avatars")
                }).catch(function (e) {
                    console.warn(e)
                }).then(function (t) {
                    return t ? (e.avatars = b(t), void(e.avatarSelectScroller = h(e.avatars, 110))) : (e.defaultAvatars = !0, e.avatars = [15, 36, 37, 38, 39], e.avatarSelectScroller = h(e.avatars, 110), n.reject("Unable to get user avatars. Using default avatars"))
                }).then(function () {
                    return u.get("WebUser", "getUserJournalFramesLibrary", {
                        userId: s.id
                    }).then(function (e) {
                        if ("object" === _typeof(e)) {
                            var t = e.result.filter(function (e) {
                                return !e.hidden
                            }).map(function (e) {
                                return e.isLocked = null === e.requirements || e.completed ? 0 : 1, e
                            });
                            return t
                        }
                        console.warn("Problem getting user frames")
                    }).catch(function (e) {
                        console.warn(e)
                    })
                }).then(function (t) {
                    if (!t) return e.defaultFrames = !0, e.frames = [1], n.reject("Unable to get user frames. Using default frames");
                    e.frames = b(t);
                    e.frameSelectScroller = h(e.frames, 138)
                }).then(function () {
                    return u.get("WebUser", "getUserClientThemesLibrary", {
                        userId: s.id
                    }).then(function (e) {
                        if (e instanceof Object && !(e instanceof Array)) {
                            var t = e.result.filter(function (e) {
                                return !e.hidden
                            }).map(function (e) {
                                return e.isLocked = null === e.requirements || e.completed ? 0 : 1, e
                            });
                            return t
                        }
                        console.warn("Problem getting user themes")
                    }).catch(function (e) {
                        console.warn(e)
                    })
                }).then(function (t) {
                    if (!t) return e.defaultThemes = !0, e.themes = [1], n.reject("Unable to get user themes. Using default themes");
                    e.themes = b(t);
                    e.themeSelectScroller = h(e.themes, 196)
                }).then(function () {
                    return u.get("WebAchievement", "getUserAchievementsLibrary", {
                        userId: e.profile.id
                    }).then(function (e) {
                        return e
                    })
                }).then(function (e) {
                    f = e.result || null
                }).then(function () {
                    return f ? v(e.avatars) : function () {}
                }).then(function () {
                    return f ? v(e.frames) : function () {}
                }).then(function () {
                    return f ? v(e.themes) : function () {}
                }).catch(function (e) {
                    console.warn("err", e)
                })
            }
            e.selectAvatar = function (t) {
                e.toUpdateProfile.avatar = e.defaultAvatars ? t : t.id
            }, e.selectFrame = function (t) {
                e.toUpdateProfile.frame = t.id
            }, e.selectTheme = function (t) {
                e.toUpdateProfile.themeId = t.modelId
            }, e.cancel = function () {
                t.cancel()
            }, e.onEditSuccess = function () {
                t.cancel()
            };
            var g = function () {
                return "child" === e.profile.userType || (!(!e.profile.hasApprovedLinks() || e.profile.getApprovedLink().type !== r.ACCOUNT_USER_LINK_TYPE_HOME) || !(!e.profile.hasPendingLink() || e.profile.getPendingLink().type !== r.ACCOUNT_USER_LINK_TYPE_HOME))
            };

            function m() {
                var e = function () {
                    var e = document.getElementById("profile-edit-md-modal");
                    if (e) return e.clientWidth > 1100 ? e.clientWidth - 40 : 1060
                }() || o.innerWidth;
                return Math.floor(e / this.cellWidthLg)
            }

            function h(t, o) {
                var n = new c(e.avatars);
                return n.getNumDisplayed = m, n.cellWidthLg = o, n.cellWidthSm = o, n
            }

            function v(e) {
                var t, o, n;
                e.forEach(function (e) {
                    t = f.filter(function (t) {
                        return o = e.requirements ? e.requirements : 0, t.achievementId === o[0]
                    }), n = t[0] ? t[0].notification : null, e.toUnlock = n
                })
            }

            function b(e) {
                var t = e.filter(function (e) {
                        return e.isLocked
                    }),
                    o = e.filter(function (e) {
                        return !e.isLocked
                    });
                return t.sort(function (e, t) {
                    return e.sort - t.sort
                }), o.sort(function (e, t) {
                    return e.sort - t.sort
                }), o.concat(t)
            }
            e.shouldShowFirstNameAndLastName = function () {
                return e.profileService.currentProfile.isParent && e.isEducator ? e.profileService.currentProfile.accountId == e.profile.accountId || e.isGoogleLinkedProfile || !g() : !(!e.isEducator || g()) || (e.profileService.currentProfile.isParent, !1)
            }, e.isEducatorTeacherProfileOrConsumerAccount = function () {
                return !e.isEducator || e.profileService.currentProfile.isParent
            }, e.isCreatingProfile = !1;
            var S = i.email ? i.email.split("@")[1] : "";
            e.excludedDomains = [S, ".edu"], e.submit = function (t, o, n) {
                t ? (e.isCreatingProfile = !0, function (t) {
                    t.journalFrameImage = t.frame;
                    var o = a.getNewProfile(t);
                    return t.id && a.currentProfile.id == t.id && a.isTeacher() ? u.post("WebUser", "updateTeacherProfileNameAndAvatar", {
                        userId: o.id,
                        firstName: e.toUpdateProfile.firstName,
                        lastName: e.toUpdateProfile.lastName,
                        avatarId: e.toUpdateProfile.avatar,
                        educatorPrefix: e.toUpdateProfile.educatorPrefix
                    }).then(function () {
                        a.getProfileData(e.profile)
                    }) : t.id ? a.updateProfile(e.profile, function (t) {
                        for (var o = Object.entries(t), n = {}, r = 0, i = o; r < i.length; r++) {
                            var a = _slicedToArray(i[r], 2),
                                l = a[0],
                                s = a[1];
                            e.profile.hasOwnProperty(l) && s !== e.profile[l] && (n[l] = s)
                        }
                        return n
                    }(t)).then(function () {
                        e.$apply()
                    }) : a.createProfile(o)
                }(o).then(function (t) {
                    e.isCreatingProfile = !1, n(t)
                }), e.showErrors = !1, e.profileStudentCreateForm && (e.profileStudentCreateForm.$setUntouched(), e.profileStudentCreateForm.$setPristine())) : e.showErrors = !0
            }
        }]), e.controller("ProfileEditFormController", ["$scope", "AccountService", "ProfileService", "Data", function (e, t, o, n) {
            e.isCreatingProfile = !1;
            var r = t.email ? t.email.split("@")[1] : "";
            e.excludedDomains = [r, ".edu"], this.submit = function (r, i, a) {
                r ? (e.isCreatingProfile = !0, function (e) {
                    e.journalFrameImage && (e.journalFrameImage = e.frame);
                    var r = o.getNewProfile(e);
                    return e.id && o.currentProfile.id == e.id && t.isEducator() && r.isParent ? n.post("WebUser", "updateTeacherProfileNameAndAvatar", {
                        userId: r.id,
                        firstName: r.firstName,
                        lastName: r.lastName,
                        avatarId: r.avatar,
                        educatorPrefix: r.educatorPrefix
                    }).then(o.getCurrentProfile) : e.id ? o.updateProfile(r, e) : o.createProfile(r)
                }(i).then(function (t) {
                    e.isCreatingProfile = !1, a(t)
                }), e.showErrors = !1, e.profileStudentCreateForm && (e.profileStudentCreateForm.$setUntouched(), e.profileStudentCreateForm.$setPristine())) : e.showErrors = !0
            }
        }])
    }(),
    function () {
        function e(e, t, o, n, r) {
            e.profileEditData = {}, e.submit = function (t, i, a) {
                t && !e.pending ? (e.pending = !0, o.transferProfiles(e.profileIds, i.email).then(function (t) {
                    if (t && t.result && t.result.error) e.onFailure && e.onFailure(t.result.error);
                    else if (e.onSuccess && e.onSuccess(), n.isEducator() && o.currentProfile.isParent) {
                        var i = t.result.hasOwnProperty("UserAccountTransfer") ? t.result.UserAccountTransfer.length : 1;
                        r.log(r.events.EDU_ROSTER_TRANSFER_SUCCESS, {
                            transfer_student_count: i
                        })
                    }
                    e.pending = !1, e.$close()
                })) : e.showErrors = !0
            }
        }
        e.$inject = ["$scope", "Data", "ProfileService", "AccountService", "BigQuery"], angular.module("epicApp").controller("ProfileTransferController", e)
    }(), angular.module("epicApp").controller("ProfileUnlinkController", ["$scope", "AccountLinkService", "profile", "accountUUID", function (e, t, o, n) {
        e.profile = o, e.accountUUID = n, e.unlinkProfile = function () {
            n ? t.unlinkAccountLinkWithAccountUUID(e.profile, n).then(e.$close) : t.unlinkAccountLink(e.profile).then(e.$close)
        }
    }]), angular.module("epicApp").controller("QuizMenuController", ["$scope", "Data", "QuizService", function (e, t, o) {
        e.quizes = {}, e.td = {}, e.td.selectedIndex = 0, t.get("WebQuiz", "getQuizDataByBookId", {
            bookId: e.bookId
        }).then(function (t) {
            t && t.result && (e.quizes = t.result), e.td.selectedIndex = 0
        }), e.selectIndex = function (t) {
            e.td.selectedIndex = t
        }
    }]), angular.module("epicApp").controller("QuizController", ["$scope", "Data", "QuizService", "ProfileService", "bookTitle", function (e, t, o, n, r) {
        e.initialized = !1, e.bookTitle = r, e.quizTaking = {}, e.quizTaking.isFinished = !1, o.quizData ? (e.quiz = o.quizData, e.initialized = !0) : t.get("WebQuiz", "getQuizDataByUserIdAndBookId", {
            userId: n.parentProfile.id,
            bookId: e.bookId
        }).then(function (t) {
            e.initialized = !0, t && t.result && (e.quiz = t.result)
        }), e.createQuiz = function () {
            o.createQuiz()
        }
    }]), angular.module("epicApp").controller("QuizTakeOrCreateController", ["$scope", "QuizService", "$modal", "EpicConfirmationService", function (e, t, o, n) {
        n.setTitle("Are you sure?"), n.setDescription("If you edit your quiz, others won't be able to see it. Are you sure you want to edit your quiz now?"), e.createQuiz = function () {
            n.show().then(function () {
                t.createQuiz()
            }, function () {})
        }, e.takeQuiz = function () {
            t.takeQuiz()
        }
    }]), angular.module("epicApp").controller("QuizPublishedModalController", ["$scope", "contentTitle", "quizData", "QuizService", "$modalInstance", function (e, t, o, n, r) {
        e.contentTitle = t, n.setQuiz(o), e.clickTryQuiz = function () {
            n.takeQuiz(e.contentTitle), r.close()
        }
    }]), angular.module("epicApp").controller("ReadingLevelConversionsChartController", ["Data", "$state", "BigQuery", function (e, t, o) {
        var n, r = this;
        r.conversionsData = null, r.formattedDataForChart = [
            ["Grade", "AR", "Lexile", "F&P", "GRL", "DRA"]
        ], r.isChartReady = !1, "search" === (n = t.current.name) ? o.log(o.events.SEARCH_VIEW_CONVERSION_CHART) : "read" === n && o.log(o.events.BOOK_VIEW_CONVERSION_CHART), e.get("WebReadingLevels", "getConversionLevels").then(function (e) {
            if (e.result) {
                r.conversionsData = e.result;
                var t, o, n = {
                        accelerated_level: 1,
                        lexile_level: 2,
                        fandp_level: 3,
                        guided_reading_level: 4,
                        dra_level: 5
                    },
                    i = ["Kinder", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th"];
                for (var a in r.conversionsData) {
                    t = r.conversionsData[a];
                    for (var l = 0; l < t.length; l++) {
                        var s = t[l].grade + 1;
                        if (s < 1) break;
                        void 0 === r.formattedDataForChart[s] && (r.formattedDataForChart[s] = []), r.formattedDataForChart[s][0] = i[l], o = (o = t[l].names ? 2 === t[l].names.length ? "".concat(t[l].names[0], " - ").concat(t[l].names[1]) : t[l].names[0] : "").toUpperCase(), r.formattedDataForChart[s][n[a]] = o
                    }
                }
                r.isChartReady = !0
            }
        })
    }]), angular.module("epicApp").controller("ReadingSystemSelectController", ["$scope", "Data", "AccountService", "BrowseService", "BigQuery", function (e, t, o, n, r) {
        var i = this;
        i.selectedSystem = "", i.readingSystems = [
            ["AR", "accelerated_level", "AR"],
            ["DRA", "dra_level", "DRA"],
            ["F&P", "fandp_level", "F&P"],
            ["GRL", "guided_reading_level", "GRL"],
            ["Lexile", "lexile_level", "Lexile"],
            ["Other/I Don't Know", "undecided", "Reading Level"]
        ], o.updateAccountData(), i.accountId = o.id, i.updateReadingSystem = function () {
            t.get("WebReadingLevels", "setReadingLevelPreferences", {
                args: JSON.stringify({
                    accountId: i.accountId,
                    type: i.selectedSystem
                })
            }).then(function () {
                i.selectedSystem, n.browseData.section.name, null === i.selectedSystem ? e.$close() : (n.getCategorySections(i.selectedSystemLabel), e.$close());
                var t = {};
                t.reading_level = i.selectedSystem, r.log(r.events.EXPLORE_SELECT_RL_SELECTED, t)
            })
        }, i.selectReadingSystem = function (e, t) {
            var o = t[1];
            i.selectedSystemLabel = t[2];
            var n = document.querySelector(".selected");
            n && n.classList.remove("selected"), i.selectedSystem = o, e.target.classList.add("selected"), i.btnDisabled = !1
        }, i.selectedSystemLabel = "", i.close = function () {
            e.$close()
        }, i.btnDisabled = !0
    }]), angular.module("epicApp").controller("RosterAddStudentsController", ["$scope", "Roster", "$modal", "BigQuery", "ProfileService", "AccountService", "$modalInstance", "$state", function (e, t, o, n, r, i, a, l) {
        function s() {
            e.rosterData.rosterInput = e.placeholderText, e.isShowingPlaceholder = !0
        }
        e.gradeOptions = ["Pre-K", "K", "1st Grade", "2nd Grade", "3rd Grade", "4th Grade", "5th Grade", "6th Grade", "7th Grade +"], e.rosterData = {
            selectedGrade: null,
            rosterInput: null
        }, e.assignFlow = a.assignFlow || !1, bbb(e.assignFlow), e.assignFlow ? n.log(n.events.ASSIGN_ADD_STUDENT_START) : n.log(n.events.EDU_ROSTER_ADD_STUDENT_START), i.isEducator() && r.currentProfile.isParent && (e.rosterData.selectedGrade = t.gradeIntToString[r.currentProfile.grade]), e.placeholderText = "Example 1 :\nFirst name Last name, Parent email (optional)\nFirst name Last name, Parent email (optional)\n\n-or-\n\nExample 2 :\nLast name, First name, Parent email (optional)\nLast name, First name, Parent email (optional)", e.attemptSubmit = !1, e.showInstructions = !1, e.goToConfirmStudents = function () {
            if (e.rosterData.selectedGrade && e.rosterData.rosterInput !== e.placeholderText) {
                var r = new t;
                r.setRosterData({
                    rosterString: e.rosterData.rosterInput
                }), r.setGradeToAll(t.gradeKeyToInt[e.rosterData.selectedGrade]);
                var i = {
                    student_count: r.getRosterSize(),
                    email_count: r.getEmailCount(),
                    grade: r.getRosterGrade()
                };
                e.assignFlow ? n.log(n.events.ASSIGN_ADD_STUDENT_ADD, i) : n.log(n.events.EDU_ROSTER_ADD_STUDENT_ADD, i);
                var a = o.open({
                    templateUrl: "modals/roster-confirmation/roster-confirmation-modal.html",
                    controller: "RosterConfirmationController",
                    size: "lg",
                    keyboard: !1
                });
                a.rosterObj = r, a.assignFlow = e.assignFlow, e.$close({
                    confirmModalInstance: a
                })
            } else e.attemptSubmit = !0
        }, e.isShowingPlaceholder = !0, s(), e.onTextareaFocus = function () {
            e.rosterData.rosterInput === e.placeholderText && (e.rosterData.rosterInput = "", e.isShowingPlaceholder = !1), e.showInstructions = !0
        }, e.onTextareaBlur = function () {
            e.rosterData.rosterInput && "" !== e.rosterData.rosterInput || s(), e.showInstructions = !1
        }
    }]), angular.module("epicApp").controller("RosterConfirmationController", ["$scope", "$state", "EduSignUpService", "ProfileService", "BigQuery", "Roster", "$anchorScroll", "$location", "$modalInstance", function (e, t, o, n, r, i, a, l, s) {
        var c = s.fromSignUp,
            u = s.assignFlow;
        e.roster = i, e.rosterObj = s.rosterObj, e.rosterData = e.rosterObj.rosterData, e.creatingProfiles = !1, e.errorCreatingProfiles = !1, e.errorMessages = [], e.errorTypeToMessage = {}, e.errorTypeToMessage[i.ERROR_FIRST_NAME_REQUIRED] = "First name field is required.", e.errorTypeToMessage[i.ERROR_LAST_NAME_REQUIRED] = "Last name field is required.", e.errorTypeToMessage[i.ERROR_FIRST_NAME_LENGTH] = "First name field must be 25 characters or less.", e.errorTypeToMessage[i.ERROR_LAST_NAME_LENGTH] = "Last name field must be 25 characters or less.", e.errorTypeToMessage[i.ERROR_INVALID_EMAIL] = "Please check that email addresses are valid.";
        var d = {
            error_count: e.rosterObj.getRosterErrorCount(),
            student_count: e.rosterObj.getRosterSize(),
            email_count: e.rosterObj.getEmailCount(),
            grade: e.rosterObj.getRosterGrade()
        };
        c ? r.log(r.events.NUF_STEP_EDU_ADD_STUDENT_CONFIRM_VIEW, d) : u ? r.log(r.events.ASSIGN_ADD_STUDENT_CONFIRM_VIEW, d) : r.log(r.events.EDU_ROSTER_ADD_STUDENT_CONFIRM_VIEW, d), e.swapFirstLastName = function () {
            e.rosterObj.swapFirstLastNames();
            var t = {
                student_count: e.rosterObj.getRosterSize(),
                email_count: e.rosterObj.getEmailCount(),
                grade: e.rosterObj.getRosterGrade()
            };
            c ? r.log(r.events.NUF_STEP_EDU_ADD_STUDENT_NAME_SWAP, t) : u ? r.log(r.events.ASSIGN_ADD_STUDENT_NAME_SWAP, t) : r.log(r.events.EDU_ROSTER_ADD_STUDENT_NAME_SWAP, t)
        }, e.confirmRoster = function () {
            e.creatingProfiles || (e.creatingProfiles = !0, e.rosterObj.createProfiles().then(function (t) {
                n.reloadProfiles().then(function () {
                    e.$close({
                        success: !0
                    })
                });
                var i = {
                    student_count: e.rosterObj.getRosterSize(),
                    email_count: e.rosterObj.getEmailCount(),
                    grade: e.rosterObj.getRosterGrade()
                };
                c ? r.log(r.events.NUF_STEP_EDU_ADD_STUDENT_SUCCESS, i) : u ? r.log(r.events.ASSIGN_ADD_STUDENT_SUCCESS, i) : r.log(r.events.EDU_ROSTER_ADD_STUDENT_SUCCESS, i), c && o.next()
            }, function (t) {
                if (e.creatingProfiles = !1, e.errorCreatingProfiles = !0, t.type === i.ERROR_TYPE_BATCH_IMPORT) e.errorMessages = t.errorData;
                else if (t.type === i.ERROR_TYPE_INVALID_ROSTER) {
                    for (var o = 0, n = t.errorData, r = 0; r < n.length; r++)
                        if (0 !== n[r].length) {
                            o = r;
                            break
                        } e.errorMessages = n[o].map(function (t) {
                        return e.errorTypeToMessage[t]
                    }), e.goToRow("roster-row-" + o)
                }
            }))
        }, e.goToRow = function (e) {
            l.hash(e), a()
        }
    }]), angular.module("epicApp").controller("SaveContentController", ["$modalInstance", "BookService", "CollectionService", "FavoriteService", "$mdToast", "$sce", "BigQuery", function (e, t, o, n, r, i, a) {
        var l = this;
        l.cdnUrl = Globals.GLOBAL_CDN_BASE, l.collectionService = o, l.favoriteService = n, l.bookData = null, l.bookThumbPath = "", l.collections = [], l.collectionsMap = {}, l.isCreateCollectionExpanded = !1, l.collectionCreateFormData = {
            title: "",
            desc: "",
            share: !0
        }, l.favorites = {}, l.isSubmittingCreateCollectionForm = !1, l.addBookToCollectionsList = {}, l.initiallySavedToCollections = [], l.initialFavoriteValue = null, l.bookData = e.bookData, l.bookData.id = parseInt(l.bookData.id || l.bookData.modelId), l.bookThumbPath = t.thumbPath(l.bookData.id), o.getCollections(o.TYPES.REGULAR).then(function (e) {
            l.collectionsMap = e, l.collections = Object.values(e), a.log(a.events.SAVED_MY_LIBRARY_VIEW, {
                source: o.eventSourceString,
                collection_count: l.collections.length
            }), l.collections.forEach(function (e) {
                l.addBookToCollectionsList[e.id] = !1, e.bookIds.includes(l.bookData.id) && (l.addBookToCollectionsList[e.id] = !0, l.initiallySavedToCollections.push(e.id))
            })
        }), n.getFavorites().then(function (e) {
            l.favorites = e.books ? e.books : {}, l.initialFavoriteValue = l.favorites[l.bookData.id], l.favorites[l.bookData.id] || n.toggleContentFavorite(l.bookData.id, l.bookData.title, !l.favorites[l.bookData.id], l.bookData.type, !0)
        }), e.result.then(function () {
            l.onCloseModal()
        }, function () {
            l.onCloseModal()
        }), l.onSubmitCreateCollection = function () {
            l.collectionCreateFormData.title && (a.log(a.events.SAVED_MY_LIBRARY_CREATE_NEW_SAVE, {
                community_share: l.collectionCreateFormData.share,
                collection_title: l.collectionCreateFormData.title,
                collection_description: l.collectionCreateFormData.desc
            }), l.isSubmittingCreateCollectionForm = !0, o.createCollection(l.bookData, l.collectionCreateFormData, !0).then(function (e) {
                ! function (e) {
                    l.isSubmittingCreateCollectionForm = !1, l.isCreateCollectionExpanded = !1, l.collections.push(e), l.addBookToCollectionsList[e.id] = !0, l.collectionsMap[e.id] = e, l.collectionCreateFormData = {
                        title: "",
                        desc: "",
                        share: !0
                    }, l.createCollectionForm.$setPristine(), l.createCollectionForm.$setUntouched()
                }(e)
            }))
        }, l.onCloseModal = function () {
            var e = [],
                t = [];
            for (var n in l.addBookToCollectionsList) n = parseInt(n), l.addBookToCollectionsList[n] && !l.initiallySavedToCollections.includes(n) ? e.push(n) : !l.addBookToCollectionsList[n] && l.initiallySavedToCollections.includes(n) && t.push(n);
            o.addAndRemoveBookFromCollections(l.bookData, e, t);
            var i = this.favorites[this.bookData.id],
                s = "",
                c = [],
                u = 4 === l.bookData.type ? ["book-toast-template video-version"] : ["book-toast-template"];
            if (!l.initialFavoriteValue && i ? (s = 'Saved to <a class="pointer" href="/app/my-library/favorites">My Library</a>:', c.push("Favorites")) : l.initialFavoriteValue && !i && (s = "Removed from My Library:", c.push("Favorites")), e.length > 0) {
                s = 'Saved to <a class="pointer" href="/app/my-library/collections">My Library</a>:', l.initialFavoriteValue && !i && (c = []);
                for (var d = 0; d < e.length; d++) c.push(l.collectionsMap[e[d]].title)
            } else if (t.length > 0) {
                s = "Removed from My Library:", !l.initialFavoriteValue && i && (c = []);
                for (var p = 0; p < t.length; p++) c.push(l.collectionsMap[t[p]].title)
            }
            c.length > 0 && r.show({
                hideDelay: 2e4,
                position: "bottom right",
                controller: "ToastTemplateController",
                templateUrl: "toasts/toast-template/toast-template.html",
                locals: {
                    title: s,
                    desc: c.join(", "),
                    imgPath: l.bookThumbPath,
                    classes: u
                }
            }), a.log(a.events.SAVED_MY_LIBRARY_COMPLETE, {
                source: o.eventSourceString,
                collection_count: l.collections.length,
                saved_collections_count: e.length,
                saved_to_my_library: i ? 1 : 0
            }), o.clearEventSourceString()
        }, l.toggleCreateCollectionForm = function () {
            l.isCreateCollectionExpanded = !l.isCreateCollectionExpanded, l.isCreateCollectionExpanded ? a.log(a.events.SAVED_MY_LIBRARY_CREATE_NEW) : a.log(a.events.SAVED_MY_LIBRARY_CREATE_NEW_CANCEL)
        }, l.toggleSelectCollection = function (e) {
            l.addBookToCollectionsList[e] = !l.addBookToCollectionsList[e]
        }
    }]), angular.module("epicApp").controller("ShareWithFamiliesController", ["$scope", "$state", "EduSignUpService", "ProfileService", "BigQuery", "Roster", "$anchorScroll", "$location", "$modalInstance", function (e, t, o, n, r, i, a, l, s) {
        e.handleClick = function () {
            t.go("roster.share"), s.close()
        }
    }]), angular.module("epicApp").directive("standaloneQuizReviewModal", function () {
        return {
            restrict: "E",
            scope: !0,
            templateUrl: "modals/standalone-quiz-review/standalone-quiz-review-modal.html",
            link: function (e, t, o) {}
        }
    }), angular.module("epicApp").controller("StudentLoginHelpController", ["$scope", "$state", "BigQuery", "Roster", "$anchorScroll", "$location", "$modalInstance", "$window", "AccountService", function (e, t, o, n, r, i, a, l, s) {
        e.accountService = s, e.handleStudentsRedirect = function () {
            var e = "".concat(Globals.GLOBAL_URL, "students");
            l.location = e
        }, e.handleDownloadLink = function (e) {
            l.open(e, "_blank")
        }, e.downloads = [{
            type: "apple",
            link: "https://itunes.apple.com/us/app/epic!-books-for-kids/id719219382?mt=8",
            img: "/assets/download-apple.svg"
        }, {
            type: "google",
            link: "https://play.google.com/store/apps/details?id=com.getepic.Epic",
            img: "/assets/download-google-play.svg"
        }]
    }]), angular.module("epicApp").controller("SummerOfReadingBannerController", ["ProfileService", "BigQuery", "LocalStorageService", "SiteConstants", "$scope", "$window", "$timeout", "CopyToClipboardService", "StringService", "Data", function (e, t, o, n, r, i, a, l, s, c) {
        var u = this;
        u.price = n.PROMO.DEFAULT_PRICE, u.flyerUrl = Globals.GLOBAL_CDN_BASE + "website/assets/educator-dashboard-icons/summer-sale-flyer-icon.png", u.shareMessageUrl = Globals.GLOBAL_CDN_BASE + "website/assets/educator-dashboard-icons/text-parents.svg", u.summerFlyer = Globals.GLOBAL_CDN_BASE + "website/assets/educator-dashboard-icons/Epic_Summer_Sale2019.pdf", u.textCopiedToClipboard = !1, u.BigQuery = t, u.redirectSummerUrl = "".concat(Globals.GLOBAL_URL, "summer2019"), u.animate1 = !1, u.animate2 = !1, u.validateEmail = function (e) {
            return s.validateEmail(e)
        }, o.set("summerPopShowByDefault", !0), u.openFlyerPage = function () {
            u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_CLICKFLYER), u.animate1 = !0, a(function () {
                u.animate1 = !1, i.open(u.summerFlyer, "_blank"), u.next()
            }, 700)
        }, u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_VIEWPOPUP), u.copyPromotionTextToClipboard = function () {
            u.animate2 = !0, a(function () {
                u.animate2 = !1
            }, 700), u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_CLICKBLURB), u.textCopiedToClipboard || (l.copy("Epic! digital library app is offering 3 Summer Months for $3 (rolls into a subscription). Our kids love Epic! See getepic.com/summer2019"), u.textCopiedToClipboard = !0, a(function () {
                u.textCopiedToClipboard = !1, u.next()
            }, 1e3))
        }, u.tabIndex = 0, u.next = function () {
            0 === u.tabIndex && u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_VIEW2TEMAIL), u.tabIndex++
        }, u.prev = function () {
            return 2 === u.tabIndex && u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_VIEW2TEMAIL), u.tabIndex > 0 ? u.tabIndex-- : ""
        }, u.teacherEmails = [{
            id: "email1",
            email: ""
        }, {
            id: "email2",
            email: ""
        }], u.addNewInput = function () {
            var e = u.teacherEmails.length + 1;
            u.teacherEmails.push({
                id: "email" + e,
                email: ""
            })
        }, u.validateEmails = function (e) {
            var t = !1;
            return e.forEach(function (e) {
                u.validateEmail(e.email) && (t = !0)
            }), t
        }, u.clicked = function (e) {
            return u.teacherEmails.splice(e, 1)
        }, u.sendTeacherEmails = function (t) {
            var o = e.currentProfile.name || "Your Child's Teacher",
                n = [];
            t.forEach(function (e) {
                u.validateEmail(e.email) && e.email.length ? n.push(e.email) : bbb("One of the emails entered is invalid")
            }), u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_SEND2TEMAIL, {
                emailsSent: n.length
            }), u.teacherEmails = [{
                id: "email1",
                email: ""
            }, {
                id: "email2",
                email: ""
            }], c.get("WebEmail", "noAuthSendSummerPromo", {
                emails: n,
                tName: "".concat(o)
            }).then(function (e) {
                e && bbb("Summer promo emails sent")
            }), u.next()
        }
    }]), angular.module("epicApp").controller("SummerOfReadingBanner2Controller", ["ProfileService", "BigQuery", "LocalStorageService", "SiteConstants", "$scope", "$window", "$timeout", "CopyToClipboardService", "StringService", "Data", function (e, t, o, n, r, i, a, l, s, c) {
        var u = this;
        u.price = n.PROMO.DEFAULT_PRICE, u.flyerUrl = Globals.GLOBAL_CDN_BASE + "website/assets/educator-dashboard-icons/summer-sale-flyer-icon.png", u.shareMessageUrl = Globals.GLOBAL_CDN_BASE + "website/assets/educator-dashboard-icons/text-parents.svg", u.summerFlyer = Globals.GLOBAL_CDN_BASE + "website/assets/educator-dashboard-icons/Epic_Summer_Sale2019.pdf", u.textCopiedToClipboard = !1, u.BigQuery = t, u.animate1 = !1, u.animate2 = !1, u.redirectSummerUrl = "".concat(Globals.GLOBAL_URL, "summer2019"), u.validateEmail = function (e) {
            return s.validateEmail(e)
        }, o.set("summerPopShowByDefault", !0), u.openFlyerPage = function () {
            u.animate1 = !0, a(function () {
                u.animate1 = !1, i.open(u.summerFlyer, "_blank"), u.next()
            }, 700), u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_CLICKFLYER)
        }, u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_VIEWPOPUP), u.copyPromotionTextToClipboard = function () {
            u.animate2 = !0, a(function () {
                u.animate2 = !1
            }, 700), u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_CLICKBLURB), u.textCopiedToClipboard || (l.copy("Epic! digital library app is offering 3 Summer Months for $3 (rolls into a subscription). Our kids love Epic! See getepic.com/summer2019"), u.textCopiedToClipboard = !0, a(function () {
                u.textCopiedToClipboard = !1, u.next()
            }, 1e3))
        }, u.tabIndex = 0, u.next = function () {
            0 === u.tabIndex && u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_VIEW2TEMAIL), u.tabIndex++
        }, u.prev = function () {
            return 2 === u.tabIndex && u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_VIEW2TEMAIL), u.tabIndex > 0 ? u.tabIndex-- : ""
        }, u.teacherEmails = [{
            id: "email1",
            email: ""
        }, {
            id: "email2",
            email: ""
        }], u.addNewInput = function () {
            var e = u.teacherEmails.length + 1;
            u.teacherEmails.push({
                id: "email" + e,
                email: ""
            })
        }, u.validateEmails = function (e) {
            var t = !1;
            return e.forEach(function (e) {
                u.validateEmail(e.email) && (t = !0)
            }), t
        }, u.clicked = function (e) {
            return u.teacherEmails.splice(e, 1)
        }, u.sendTeacherEmails = function (t) {
            var o = e.currentProfile.name || "Your Child's Teacher",
                n = [];
            t.forEach(function (e) {
                u.validateEmail(e.email) && e.email.length ? n.push(e.email) : bbb("One of the emails entered is invalid")
            }), u.BigQuery.log(u.BigQuery.events.EDU_DASH_SUMMER2019_SEND2TEMAIL, {
                emailsSent: n.length
            }), u.teacherEmails = [{
                id: "email1",
                email: ""
            }, {
                id: "email2",
                email: ""
            }], c.get("WebEmail", "noAuthSendSummerPromo", {
                emails: n,
                tName: "".concat(o)
            }).then(function (e) {
                e && bbb("Summer promo emails sent")
            }), u.next()
        }
    }]), angular.module("epicApp").directive("teacherPicker", ["TeacherPickerService", function (e) {
        return {
            restrict: "E",
            templateUrl: "modals/teacher-picker/teacher-picker.html",
            scope: !0,
            link: function (t, o, n) {
                t.tps = e, e.getUsStates(), t.showEmptySearchState = function (e) {
                    return Array.isArray(e) && 0 === e.length
                }
            }
        }
    }]), angular.module("epicApp").controller("UpdateEducatorInfoController", ["EducatorInfo", "$modalInstance", "Data", "AccountService", "ProfileService", "UserAgent", "$timeout", function (e, t, o, n, r, i, a) {
        var l = this;
        l.educatorInfoObj = null;
        var s = "%0D%0A";
        l.contactUrl = "mailto:support@getepic.com?body=" + s + s + s + "OS: " + i.os.name + " " + i.os.version + s + "Browser: " + i.browser.name + " " + i.browser.version + s + "UserAgent: " + i.ua,
            function () {
                var o = t.educatorData;
                if (!o.isMdrSchool)
                    for (var n = Object.keys(o), r = 0, i = n; r < i.length; r++) {
                        var a = i[r];
                        a.startsWith("school") && delete o[a]
                    }
                l.educatorInfoObj = new e(o), l.educatorInfoObj.schoolData.accountSchoolMdrPid && 0 == l.educatorInfoObj.schoolData.accountSchoolMdrPid && l.educatorInfoObj.clearSchoolData()
            }(), l.onSubmitSuccess = function () {
                var e = l.educatorInfoObj.getFormattedDataForSetEducatorInfo();
                e.accountId = n.id, e.accountReadingLevelSystem = {
                    type: e.accountReadingLevelSystem
                }, o.post("WebEducator", "setEducatorInfo", {
                    args: JSON.stringify(e)
                }).then(function (e) {
                    e.result.success && (r.getProfileData(r.currentProfile).then(function () {
                        a()
                    }), t.close())
                })
            }, l.onSubmitFail = function () {}
    }]),
    function () {
        function e(e, t, o, n) {
            return {
                restrict: "E",
                scope: {
                    data: "=",
                    quizData: "=",
                    startQuiz: "=",
                    totalCorrectAnswers: "=",
                    recordForSubmit: "=",
                    recordForReview: "=",
                    next: "=",
                    incrementHighestIndex: "=",
                    totalQuestions: "=",
                    quizSubject: "=",
                    ageRange: "=",
                    communityScore: "=",
                    percentCorrect: "=",
                    openContent: "=",
                    suggestedQuizzes: "=",
                    openReviewPanel: "=",
                    responsiveSize: "=",
                    displayStandaloneQuizReview: "=",
                    getRandomCelebrationPigeon: "=",
                    getQuizProgress: "=",
                    currentIndex: "=",
                    retakeQuiz: "=",
                    enlargeEndAnimationMustache: "=",
                    enlargeEndAnimationRabbit: "=",
                    setAnswerIsInProgress: "="
                },
                templateUrl: "standalone-quiz-overlay/quiz-card/quiz-card.html",
                link: function (e, r, i) {
                    var a, l = t[0].getElementById("celebration-pidgeon");
                    e.getContentImageUrl = function () {
                        return Globals.GLOBAL_CDN_BASE + "quiz_subject_icons/subject_icon_outline_" + e.quizData.subject + ".png"
                    }, e.answer = "", e.internalAnswerHandler = function (t) {
                        if (e.isAnswered) return;
                        e.setAnswerIsInProgress(!0);
                        var i = r[0].getElementsByTagName("md-radio-button");
                        angular.element(i[t.$index]).addClass("answer-click-bounce"), angular.forEach(i, function (e, t) {
                            angular.element(e).addClass("disable-click")
                        }), a = t.choice.title, e.recordForSubmit(t.choice.correct), e.recordForReview(t.choice), n(function () {
                            var i;
                            e.isAnswered = !0, t.choice.correct ? e.answer = "correct" : e.answer = "incorrect", "correct" === e.answer ? (i = r[0].getElementsByTagName("md-radio-button"), angular.forEach(i, function (t, r) {
                                t.getAttribute("value") !== a && o.addClass(t, "bounce-right-incorrect"), t.getAttribute("value") === a && o.addClass(t, "fadein-bounce-correct").then(function () {
                                    o.addClass(l, "active").then(function () {
                                        var t = bodymovin.loadAnimation({
                                            container: l,
                                            renderer: "svg",
                                            loop: !1,
                                            autoplay: !0,
                                            path: e.getRandomCelebrationPigeon()
                                        });
                                        t.addEventListener("complete", function () {
                                            angular.element(l).removeClass("active"), n(function () {
                                                t.destroy(), e.incrementHighestIndex(), e.setAnswerIsInProgress(!1), e.next()
                                            }, 750)
                                        })
                                    })
                                })
                            })) : function () {
                                var t = r[0].getElementsByTagName("md-radio-button");
                                angular.forEach(t, function (t, r) {
                                    t.getAttribute("value") === a && o.addClass(t, "fadein-incorrect"), t.getAttribute("value") === e.data.quizQuestionChoices.reduce(function (e, t) {
                                        return t.correct && e.push(t), e
                                    }, [])[0].title && o.addClass(t, "fadein-correct").then(function () {
                                        n(function () {
                                            e.incrementHighestIndex(), e.setAnswerIsInProgress(!1), e.next()
                                        }, 1e3)
                                    })
                                })
                            }()
                        }, 1500)
                    }, e.isAnswered = !1
                }
            }
        }
        e.$inject = ["$window", "$document", "$animate", "$timeout"], angular.module("epicApp").directive("quizCard", e)
    }(), angular.module("epicApp").controller("AccountImportToastController", ["$scope", "$mdToast", "numberOfNewUsers", "numberOfDuplicateUsers", "StringService", function (e, t, o, n, r) {
        e.numberOfNewUsers = o, e.numberOfDuplicateUsers = n, e.hasNewUsers = function () {
            return o && o > 0
        }, e.hasDuplicateUsers = function () {
            return n && n > 0
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("AccountLinkApproveToastController", ["$scope", "$mdToast", "profile", "isApprove", "StringService", function (e, t, o, n, r) {
        e.profile = o, e.maxStrLen = 40, e.title = n ? "New Profile Approved!" : "Submitted Request to Link Profile!", e.getProfileName = function () {
            return r.truncate(e.profile.name, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("AccountLinkRejectToastController", ["$scope", "$mdToast", "profile", "isReject", "StringService", function (e, t, o, n, r) {
        e.profile = o, e.maxStrLen = 40, e.title = n ? "Profile Request Rejected!" : "Unlinked Profile!", e.getProfileName = function () {
            return r.truncate(e.profile.name, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("CollectionAddToastController", ["$scope", "$mdToast", "StringService", "bookTitle", "numBooksAdded", function (e, t, o, n, r) {
        e.bookTitle = n, e.numBooksAdded = r, e.maxStrLen = 40, e.getBookTitle = function () {
            return o.truncate(e.bookTitle, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }, e.getCaption = function () {
            if (1 === e.numBooksAdded) return e.bookTitle;
            if (e.numBooksAdded > 1) {
                var t = e.numBooksAdded > 2 ? "Others" : "Other";
                return "".concat(e.bookTitle, " and ").concat(e.numBooksAdded - 1, " ").concat(t)
            }
            return ""
        }
    }]), angular.module("epicApp").controller("CollectionAssignToastController", ["$scope", "$mdToast", "collection", "StringService", function (e, t, o, n) {
        e.collection = o, e.maxStrLen = 40, e.getCollectionTitle = function () {
            if (e.collection) return n.truncate(e.collection.title, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("CollectionCopyToastController", ["$scope", "$mdToast", "collection", "StringService", function (e, t, o, n) {
        e.collection = o, e.maxStrLen = 40, e.getCollectionTitle = function () {
            if (e.collection) return n.truncate(e.collection.title, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("CollectionCreateToastController", ["$scope", "$mdToast", "collection", "StringService", "$state", function (e, t, o, n, r) {
        e.collection = o, e.maxStrLen = 40, e.getCollectionTitle = function () {
            if (e.collection) return n.truncate(e.collection.title, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }, e.goToLibrary = function () {
            r.go("my-library.collections")
        }
    }]), angular.module("epicApp").controller("DeleteMessageModalController", ["$scope", "$mdToast", "collection", "StringService", function (e, t, o, n) {
        e.maxStrLen = 35, e.getCollectionTitle = function () {
            if (e.collection) return n.truncate(e.collection.title, e.maxStrLen)
        }, e.undo = function () {
            t.hide(!0)
        }, e.closeToast = function () {
            t.hide(!1)
        }
    }]), angular.module("epicApp").controller("CollectionRemoveToastController", ["$scope", "$mdToast", "item", "StringService", function (e, t, o, n) {
        e.item = o, e.maxStrLen = 35, e.getItemTitle = function () {
            return n.truncate(e.item.title, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide(!1)
        }, e.undo = function () {
            t.hide(!0)
        }
    }]), angular.module("epicApp").controller("CollectionSharedToastController", ["$scope", "$mdToast", "StringService", "content", function (e, t, o, n) {
        e.content = n, e.maxStrLen = 40, e.getContentTitle = function () {
            return o.truncate(e.content.title, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("CollectionUpdateToastController", ["$scope", "$mdToast", "collection", "StringService", function (e, t, o, n) {
        e.collection = o, e.maxStrLen = 40, e.getCollectionTitle = function () {
            if (e.collection) return n.truncate(e.collection.title, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("CsvProfileImportController", ["$scope", "$mdToast", "params", function (e, t, o) {
        e.numberOfNewProfiles = o.numberOfNewProfiles, e.hasNewProfiles = function () {
            return o.numberOfNewProfiles && o.numberOfNewProfiles > 0
        }, e.s = function () {
            return 1 === o.numberOfNewProfiles ? "" : "s"
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("FavoritesAddToastController", ["$scope", "$mdToast", "StringService", "contentTitle", "isFavorited", function (e, t, o, n, r) {
        e.contentTitle = n, e.isFavorited = r, e.maxStrLen = 40, e.getContentTitle = function () {
            return o.truncate(e.contentTitle, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("ProfileCreatedToastController", ["$scope", "$mdToast", "StringService", "AccountService", "profile", function (e, t, o, n, r) {
        e.maxStrLen = 40, e.getProfileName = function () {
            return n.isEducator() ? o.truncate(r.firstName + " " + r.lastName, e.maxStrLen) : o.truncate(r.name, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("QuizDeleteToastController", ["$scope", "$mdToast", "StringService", "contentTitle", function (e, t, o, n) {
        e.contentTitle = n, e.maxStrLen = 40, e.getContentTitle = function () {
            return e.contentTitle ? o.truncate(e.contentTitle, e.maxStrLen) : "Untitled Quiz"
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("QuizPublishedToastController", ["$scope", "$mdToast", "StringService", "contentTitle", "isPublished", function (e, t, o, n, r) {
        e.contentTitle = n, e.isPublished = r, e.maxStrLen = 40, e.getContentTitle = function () {
            return o.truncate(e.contentTitle, e.maxStrLen)
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("QuizSaveToastController", ["$scope", "$mdToast", "StringService", "contentTitle", "isSuccessful", function (e, t, o, n, r) {
        e.contentTitle = n, e.isSuccessful = r, e.maxStrLen = 40, e.getContentTitle = function () {
            return e.contentTitle ? o.truncate(e.contentTitle, e.maxStrLen) : "Untitled Quiz"
        }, e.closeToast = function () {
            t.hide()
        }
    }]), angular.module("epicApp").controller("ToastTemplateController", ["$scope", "$rootScope", "$mdToast", "$sce", "title", "desc", "imgPath", "classes", function (e, t, o, n, r, i, a, l) {
        e.title = n.trustAsHtml(r), e.desc = n.trustAsHtml(i), e.imgPath = a || "/assets/app/toasts/collection-add-character.png", e.classes = l || [], e.closeToast = function () {
            o.hide()
        }, t.$on("$locationChangeStart", function () {
            o.hide()
        })
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h, v, b, S, y, C, E, A, k) {
            A.removeSessionStorageKey("fromMobileRedirect");
            var T, w, D = this;

            function I() {
                var e = document.getElementById("avatars-container").offsetWidth;
                return Math.floor(e / this.cellWidthLg)
            }

            function P(e) {
                D.editingSectionData[e].isExpanded && L(e)
            }

            function _() {
                S.when(a.get("WebEducator", "getEducatorInfo", {
                    args: JSON.stringify({
                        accountId: c.id
                    })
                })).then(function (t) {
                    t.result && (D.educatorAccountData = new v(t.result), e.currentSchoolAddress = D.educatorAccountData.formatSchoolAddress())
                })
            }

            function L(t) {
                switch (t) {
                    case "showCard":
                        if (!s.status.display) return;
                        return void(e.showCard || e.editCard ? e.showCard && e.editCard ? (e.editCard = !1, e.showCard = !1) : e.showCard && !e.editCard && (e.showCard = !1) : (e[t] = !e[t], R(d.events.MANAGE_ACCOUNT_STATUS)));
                    case "editCard":
                        e.editCard = !e.editCard, E.track("payment_update_shown", "website"), d.log(d.events.INV_CHURN_SEE_UPDATE_FIELDS);
                        break;
                    default:
                        D.editingSectionData[t].isExpanded = !D.editingSectionData[t].isExpanded
                }
                if ("grade" === t || "educatorRole" === t) {
                    var o = t + "Input";
                    C(function () {
                        y.document.getElementById(o).focus()
                    }, 0)
                }
            }

            function R(e, t) {
                var o = t || {};
                o.renew_date = i("toDate")(s.status.expiration), o.membership_status = i("subscriptionStatus")(s.status.display), d.log(e, o)
            }

            function O() {
                e.ceDisplayErrors = !1, e.ceErrorMessage = "", e.ceNewEmail = "", e.ceConfirmEmail = "", e.cePassword = "", e.cpDisplayErrors = !1, e.cpErrorMessage = "", e.cpCurrentPassword = "", e.cpNewPassword = "", e.cpConfirmPassword = "", e.changeEmailForm.$setPristine(), e.changeEmailForm.$setUntouched(), e.changePasswordForm.$setPristine(), e.changePasswordForm.$setUntouched()
            }

            function $(e) {
                var t = "Oops! Something went wrong. Please try again.";
                return void 0 === e ? t : (e.not_found ? t = "Invalid email or password. Please try again." : e.incorrect_password ? t = "Invalid email or password. Please try again." : e.Duplicate_email ? t = "An account with that email address already exists. Please try again." : e.confirm_email ? t = "Emails must match." : e.no_email ? t = "New Email field can't be empty." : e.confirm_pass ? t = "Passwords must match." : e.no_pass && (t = "Passwords must be at least 6 characters long."), t)
            }
            D.accountService = c, D.profileService = m, D.educatorInfo = v, D.$mdMedia = n, D.subscriptionService = s, D.updateCard = function () {
                    return e.updatingCard = !0, D.successMessage = "", s.updateCardWithModel(D.model).then(function (t) {
                        return e.updatingCard = !1, t.success && (s.stripeCardInfo = e.ccInfo = t.cardInfo, e.ccInfo.activeCCBrand = s.formatCCBrand(t.cardInfo.brand), D.successMessage = "Your card was updated successfully!", E.track("payment_update_success", "website"), d.log(d.events.INV_CHURN_UPDATE_SUCCESS)), t
                    }).catch(function () {
                        e.updatingCard = !1
                    })
                }, e.toggleSection = L, e.cancelEdit = function () {
                    e.showCard = !1, e.editCard = !1
                }, e.updateEmail = function () {
                    var t = {
                            pass: e.cePassword,
                            login: e.ceNewEmail
                        },
                        o = {};
                    if (e.ceSuccessMessage = "", !e.ceNewEmail || "" === e.ceNewEmail) return o.no_email = !0, void(e.ceErrorMessage = $(o));
                    if (e.ceNewEmail != e.ceConfirmEmail) return o.confirm_email = !0, void(e.ceErrorMessage = $(o));
                    S.when(a.post("WebAccount", "changeLogin", t)).then(function (t) {
                        t.result.errors ? e.ceErrorMessage = $(t.result.errors) : t.result.login ? (O(), e.ceSuccessMessage = "Success! Your email has been updated.", e.toggleSection("email"), c.email = t.result.login) : e.ceErrorMessage = $(null)
                    })
                }, e.updatePassword = function () {
                    var t = {
                            pass: e.cpCurrentPassword,
                            newPass: e.cpNewPassword
                        },
                        o = {};
                    if (e.cpSuccessMessage = "", !e.cpNewPassword || "" === e.cpNewPassword || e.cpNewPassword.length < 6) return o.no_pass = !0, void(e.cpErrorMessage = $(o));
                    if (e.cpNewPassword != e.cpConfirmPassword) return o.confirm_pass = !0, void(e.cpErrorMessage = $(o));
                    S.when(a.post("WebAccount", "changePass", t)).then(function (t) {
                        t.result.errors ? e.cpErrorMessage = $(t.result.errors) : (O(), e.cpSuccessMessage = "Success! Your password has been updated.", e.toggleSection("password"))
                    })
                }, e.enableAutoRenew = function () {
                    D.showLoader = !0, a.post("WebAccount", "enableAutoRenew").then(function (t) {
                        D.showLoader = !1, O(), t.result.success ? (s.checkSubscriptionStatus().then(function (e) {
                            R(d.events.ACCOUNT_ENABLE_AUTO_RENEW)
                        }), s.status.willAutoRenew = !0, e.stripeSuccess = "Success! Your account will now auto renew.") : e.stripeError = t.result.error
                    })
                }, e.displayJoinModal = function () {
                    s.checkSubscriptionStatus()
                }, e.generateClassroomCodeConfirm = function () {
                    t.open({
                        templateUrl: "modals/alert/epic-alert.html",
                        controller: "EpicAlertCtrl",
                        controllerAs: "ctrl",
                        resolve: {
                            params: function () {
                                return {
                                    title: "Change Classroom Code",
                                    message: "Are you sure you'd like to change your classroom code?",
                                    confirm: e.generateClassroomCode
                                }
                            }
                        }
                    })
                }, e.generateClassroomCode = function () {
                    c.generateClassroomCode().then(function (e) {
                        var o = e.result.Accounts[0].accountLoginCode;
                        c.accountLoginCode = o, t.open({
                            templateUrl: "modals/classroom-code/classroom-code.html",
                            controller: "ClassroomCodeModalCtrl",
                            controllerAs: "ctrl",
                            resolve: {
                                code: function () {
                                    return o
                                }
                            }
                        })
                    })
                }, e.toggleVideoEnabled = function () {
                    c.videoEnabled = e.videoData.state ? 0 : 1, a.get("WebAccount", "setVideoEnabledByAccountId", {
                        enabled: c.videoEnabled
                    }).then(function () {
                        l.getCategorySections()
                    })
                }, e.saveSection = function (e, t) {
                    if (D.editingSectionData[e].isSubmitting) return;
                    var o = [];
                    switch (t = t || {}, e) {
                        case "name":
                            if (o = ["accountPrefix", "accountFirstName", "accountLastName"], !D.educatorAccountData.isValidName()) return;
                            break;
                        case "grade":
                            o = ["accountCurrentGrade"];
                            break;
                        case "educatorRole":
                            o = ["accountProfession"];
                            break;
                        case "school":
                            if (D.editingSectionData.school.attemptedSubmit = !0, !D.educatorAccountData.isValidSchool()) return;
                        case "readingLevelSystem":
                            o = ["accountReadingLevelSystem"]
                    }
                    for (var n = 0; n < o.length; n++) t[v.setEducatorInfoAPIMapping[o[n]]] = D.educatorAccountData[o[n]];
                    ! function (e, t) {
                        e.accountId = c.id, D.editingSectionData[t].isSubmitting = !0, S.when(a.post("WebEducator", "setEducatorInfo", {
                            args: JSON.stringify(e)
                        })).then(function (e) {
                            e.result.success && (m.getProfileData(m.currentProfile).then(function () {
                                C()
                            }), "avatar" !== t && P(t), "school" === t && _(), "grade" === t && l.getCategorySections(), "readingLevelSystem" === t && (k.remove("ebf-rl-".concat(m.currentProfile.id)), l.getCategorySections()), D.schoolForm.$setPristine(), D.schoolForm.$setUntouched(), D.editingSectionData.school.attemptedSubmit = !1), D.editingSectionData[t].isSubmitting = !1
                        })
                    }(t, e)
                }, D.closeSection = P, D.successMessage = "", D.showLoader = null, e.ccInfo = {}, D.editingSectionData = {
                    email: {
                        isExpanded: !1,
                        isSubmitting: !1
                    },
                    password: {
                        isExpanded: !1,
                        isSubmitting: !1
                    },
                    name: {
                        isExpanded: !1,
                        isSubmitting: !1
                    },
                    avatar: {
                        isExpanded: !1,
                        isSubmitting: !1
                    },
                    grade: {
                        isExpanded: !1,
                        isSubmitting: !1
                    },
                    educatorRole: {
                        isExpanded: !1,
                        isSubmitting: !1
                    },
                    school: {
                        isExpanded: !1,
                        isSubmitting: !1,
                        attemptedSubmit: !1
                    },
                    readingLevelSystem: {
                        isExpanded: !1,
                        isSubmitting: !1,
                        attemptedSubmit: !1
                    }
                }, D.readingSystemMapping = {
                    accelerated_level: "AR",
                    lexile_level: "Lexile",
                    guided_reading_level: "GRL",
                    fandp_level: "F&P",
                    dra_level: "DRA",
                    undecided: "Other/ I don't know my reading level system"
                }, e.editCard = !1, e.showCard = !1, e.showLogoutButton = 1 != o.fromMobileLogin, e.userAgent = u, e.videoData = {
                    state: !!c.videoEnabled
                }, e.maxNameLength = 25, e.avatarSize = 90, e.avatars = m.isTeacher() ? b.teacherAvatars : b.parentAvatars, e.initialLoad = !0, e.contactLink = "https://getepic.zendesk.com/hc/en-us/requests/new", e.datesDictionary = {
                    1: "Jan",
                    2: "Feb",
                    3: "March",
                    4: "April",
                    5: "May",
                    6: "June",
                    7: "July",
                    8: "Aug",
                    9: "Sept",
                    10: "Oct",
                    11: "Nov",
                    12: "Dec"
                },
                function () {
                    m.isTeacher() && (D.educatorAccountData = null, _());
                    f.getDefaultProduct().then(function (e) {
                        D.model = new p(e), D.model.email = c.email
                    }).catch(function (e) {
                        D.model = {}, D.model.email = c.email
                    }), e.$watch(function () {
                        return s.stripeCardInfo
                    }, function (t, o) {
                        var n;
                        if (t && (e.ccInfo.activeCCBrand = s.activeCCBrand, e.formattedCCExpDate = (n = s.stripeCardInfo, e.datesDictionary[n.exp_month] + " " + n.exp_year), e.initialLoad)) {
                            e.initialLoad = !1;
                            var i = r.search();
                            R(d.events.ACCOUNT_MANAGE_LOAD, {
                                src: i.src
                            }), R(d.events.NAVIGATION_SETTINGS)
                        }
                    })
                }(), e.avatarSelectScroller = (e.avatars, T = e.avatarSize, (w = new h(e.avatars)).getNumDisplayed = I, w.cellWidthLg = T, w.cellWidthSm = T, w), e.avatarsLeftScroll = function () {
                    e.avatarSelectScroller.getRowIndexPos() > .2 && e.avatarSelectScroller.leftClick()
                }, e.avatarsRightScroll = function () {
                    e.avatarSelectScroller.getRowIndexPos() + .2 < e.avatars.length - e.avatarSelectScroller.getNumDisplayed() && e.avatarSelectScroller.rightClick()
                }, e.cancelSubscription = function () {
                    R(d.events.ACCOUNT_DISABLE_AUTO_RENEW), g.defaultRedirect("cancel.index", null)
                }
        }
        e.$inject = ["$scope", "$modal", "$stateParams", "$mdMedia", "$location", "$filter", "Data", "BrowseService", "SubscriptionService", "AccountService", "UserAgent", "BigQuery", "SubscriptionModel", "ProductService", "RedirectService", "ProfileService", "EpicScroller", "EducatorInfo", "ProfileEditService", "$q", "$window", "$timeout", "Logsly", "SessionStorageService", "LocalStorageService"], angular.module("epicApp").controller("AccountManageController", e)
    }(),
    function () {
        function e(e, t) {
            e.emailPreferences = {}, e.isValid = !1, e.closeModalSafely = function () {
                void 0 !== e.closeModal && e.closeModal()
            }, t.get("WebAccount", "getEmailPreferences").then(function (t) {
                e.emailPreferences = t.result, e.isValid = !0
            }), e.submit = function () {
                if (e.isValid) {
                    for (var o in e.emailPreferences)
                        if (1 == e.emailPreferences[o] && "unsubscribe" != o) {
                            e.emailPreferences.unsubscribe = 0;
                            break
                        } t.get("WebAccount", "updateEmailPreferences", {
                        preferences: JSON.stringify(e.emailPreferences)
                    }).then(function (t) {
                        e.closeModalSafely()
                    })
                }
            }, e.unsubscribe = function () {
                for (var t in e.isValid = !0, e.emailPreferences) e.emailPreferences[t] = 0;
                e.emailPreferences.unsubscribe = 1, e.submit()
            }
        }
        e.$inject = ["$scope", "Data"], angular.module("epicApp").controller("EmailPreferencesFormController", e)
    }(), angular.module("epicApp").controller("AssignmentsCtrl", ["$scope", "$state", "Data", "BookService", "StringService", "BookPresentationsLogger", "BigQuery", "CollectionService", function (e, t, o, n, r, i, a, l) {
        a.log(a.events.NAVIGATION_MAILBOX), e.getContentImageUrl = n.thumbPath, e.maxTitleLength = 100, e.maxDescriptionLength = 300, i.setScrollWatchers(!0), e.$on("$destroy", i.destroyScrollWatchers), o.get("WebPlaylist", "getPlaylistLibraryForUser", {}).then(function (t) {
            t.result && Array.isArray(t.result.Playlist) ? e.assignedCollections = t.result.Playlist : console.warn("Problem getting assigned collections...")
        }), e.goToUserCollection = function (e) {
            l.goToCollection(e)
        }, e.getFormattedCollectionTitle = function (t) {
            return r.truncate(t, e.maxTitleLength)
        }, e.getFormattedCollectionDescription = function (t) {
            return r.truncate(t, e.maxDescriptionLength)
        }
    }]), angular.module("epicApp").controller("BrowseController", ["$scope", "$state", "$stateParams", "$location", "$timeout", "$modal", "Data", "Logsly", "BrowseService", "BookOverlay", "InactiveBookModal", "$mdMedia", "BigQuery", "StandaloneQuiz", "PreferencesService", "BookPresentationsLogger", "$mdDialog", "AccountService", "$animate", "LaunchService", "LoggingSourceTranslation", "ProfileService", "FavoriteService", "ABTestService", "LocalStorageService", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h, v, b, S, y, C, E, A, k) {
        p.log(p.events.NAVIGATION_BROWSE), e.loadingRows = !1, e.browseService = s, e.cdn = Globals.GLOBAL_CDN_BASE, e.exploreImgPath = Globals.GLOBAL_CDN_BASE + "website/assets/app/explore/", e.media = d, e.browseData = s.browseData;
        var T = !1;
        e.eduAssigningVariant = A.getVariantForEduAssign(), e.abTestService = A, e.eduExploreVariant = null, e.eduExploreStudentVariant = null, e.tabData = {
                tabIndex: s.browseData.section.rank - 1
            },
            function () {
                if (l.updateDeviceInfo(), E.getFavorites(), v.isEducator() ? (A.loadExperimentDataByLabel(A.EDU_EXPLORE_STUDENT, "account").then(function (t) {
                        t && (e.eduExploreStudentVariant = "edu-explore-student-control" !== t)
                    }), A.loadExperimentDataByLabel(A.EDU_EXPLORE_TEACHER, "account").then(function (t) {
                        t && (e.eduExploreVariant = "edu-explore-teacher-control" !== t, C.currentProfile.isParent ? e.eduExploreStudentVariant = !1 : e.eduExploreVariant = !1), 0 !== s.browseData.sections.length || s.isLoading ? L() : s.getCategorySections(o.section).then(function () {
                            L()
                        })
                    })) : 0 !== s.browseData.sections.length || s.isLoading ? L() : s.getCategorySections(o.section).then(function () {
                        L()
                    }), s.browseData.sectionAndRowData.hasOwnProperty("currentUserId") && C.currentProfile.id !== s.browseData.sectionAndRowData.currentUserId)
                    if (v.isEducator()) {
                        var t = s.browseData.section.name,
                            n = k.get("ebf-info-".concat(C.currentProfile.id));
                        n && !["Reading Level", "AR", "accelerated_level", "Lexile", "GRA", "DRA", "F&P"].includes(t) ? a.get("WebUser", "setUserPreferences", {
                            preferences: {
                                age: n.age
                            }
                        }).then(function () {
                            s.loadContentRows()
                        }) : s.getCategorySections()
                    } else s.getCategorySections();
                r(function () {
                    S.cameFromBrowserBack ? angular.element("#epic-app-content-container").scrollTop(s.browseData.lastScrollOffset) : 0 !== s.browseData.sections.length && s.browseData.section.modelId && s.browseData.section.modelId !== s.browseData.sections[s.getDefaultTabIndex()].modelId && s.resetSection(), e.tabData.tabIndex = s.browseData.section.rank - 1
                }, 0)
            }(), e.$watch(function () {
                return s.isLoading
            }, function (t) {
                e.loadingRows = t
            }), e.$watch(function () {
                return s.browseData.sections
            }, function (t, o) {
                r(function () {
                    e.tabData.tabIndex = s.browseData.section.rank - 1
                }, 0)
            }), e.$watch(function () {
                return s.browseData.section
            }, function (e, o) {
                if ("browse" == t.current.name && y.setBrowseSection(s.browseData.section.name), o.name && e.name && o.name != e.name) {
                    var n = s.browseData.section.name;
                    if ("Learning Videos" == n && !v.videoEnabled) return s.browseData.section = o, void f();
                    if ("Learning Videos" == n && !v.videoEnabled) return s.browseData.section = o, void f();
                    var r = ["Reading Level", "AR", "accelerated_level", "Lexile", "GRA", "DRA", "F&P"];
                    if (s.browseData.rows = [], v.isEducator()) {
                        var l = k.get("ebf-rl-".concat(C.currentProfile.id)),
                            c = k.get("ebf-info-".concat(C.currentProfile.id));
                        if (r.includes(n)) {
                            var u = {
                                reading_level_system: "unselected",
                                selected_range: "unselected"
                            };
                            l && (u.reading_level_system = l.rs, u.selected_range = l.rl.name), p.log(p.events.TAB_READING_LEVEL_VIEW, u)
                        }
                        if (c && !r.includes(n)) a.get("WebUser", "setUserPreferences", {
                            preferences: {
                                age: c.age
                            }
                        }).then(function () {
                            s.loadContentRows()
                        });
                        else if (l && r.includes(n)) {
                            var d = {
                                level: {}
                            };
                            d.level[{
                                AR: "accelerated_level",
                                Lexile: "lexile_level",
                                GRA: "guided_reading_level",
                                DRA: "dra_level",
                                "F&P": "fandp_level",
                                "Reading Level": "accelerated_level"
                            } [l.rs]] = [parseInt(l.rl.id)], d.sectionId = 12, d.method = "getContentRowsForSection", d.name = "readingLevel", s.loadContentRows(d)
                        } else s.loadContentRows()
                    } else s.loadContentRows();
                    v.isEducator() && r.includes(n) && a.get("WebReadingLevels", "getReadingLevelPreferences", {
                        args: JSON.stringify({
                            accountId: v.id
                        })
                    }).then(function (e) {
                        var t = k.get("rls-prompt-".concat(v.id)) ? k.get("rls-prompt-".concat(v.id)) : {
                            shouldBePrompted: !0
                        };
                        (null === e.result || !e.result.type || "undecided" === e.result.type && t.shouldBePrompted) && (i.open({
                            templateUrl: "modals/reading-system-select/reading-system-select.html",
                            controller: "ReadingSystemSelectController",
                            controllerAs: "ctrl"
                        }), k.set("rls-prompt-".concat(v.id), {
                            shouldBePrompted: !1
                        }), p.log(p.events.EXPLORE_SELECT_RL_VIEW, {}))
                    })
                }

                function f() {
                    h.show({
                        templateUrl: "md-dialog/videosDisabled/videosDisabled-dialog.html",
                        clickOutsideToClose: !0
                    })
                }
            }), e.showPreferencesOverlay = g.showPreferencesOverlay, e.showPrefs = g.preferencesEnabled(), e.shuffling = !1;
        var w = !1,
            D = document.getElementById("browse-rows-container"),
            I = document.getElementById("invisible-block-to-offset-scroll"),
            P = document.getElementById("shuffling-animation-image-container"),
            _ = bodymovin.loadAnimation({
                container: P,
                renderer: "svg",
                loop: !0,
                autoplay: !1,
                path: "/assets/app/animations/tornado_withbooksdata.json"
            });

        function L() {
            var t = document.getElementById("browse-tabs");
            t && e.$watch(function () {
                return t.querySelector("md-next-button")
            }, function (e) {
                var o = t.querySelector("md-next-button");
                o && (o.addEventListener("click", R), (o = t.querySelector("md-prev-button")).addEventListener("click", O))
            })
        }

        function R() {
            p.log(p.events.TAB_RIGHT_PRESSED)
        }

        function O() {
            p.log(p.events.TAB_LEFT_PRESSED)
        }
        _.setSpeed(1), e.shuffleBrowse = function () {
            e.loadingRows || !e.browseData || e.shuffling || w || (m.destroyScrollWatchers(), p.log(p.events.BROWSE_SHUFFLE_PRESSED, {}), w = !0, T = !0, e.shuffling = !0, I.scrollIntoView({
                behavior: "instant",
                block: "start",
                inline: "nearest"
            }), D.style.opacity = 0, _.goToAndPlay(0, !0), P.style.opacity = 1, s.shuffleBrowse(), e.animationTimeout = r(function () {
                "browse" === t.current.name && (_.goToAndStop(), e.shuffling = !1, w = !1, document.getElementById("browse-rows-container").style.opacity = 1, document.getElementById("shuffling-animation-image-container").style.opacity = 0, m.setScrollWatchers(!0, !0))
            }, 1e3))
        }, e.$on("$destroy", function () {
            e.animationTimeout && (r.cancel(e.animationTimeout), _.goToAndStop(0, !0), b.removeClass(P, "active")), _.destroy(), _ = null;
            var t = document.getElementById("browse-tabs");
            if (t) {
                var o = t.querySelector("md-next-button");
                o && o.removeEventListener("click", R), (o = t.querySelector("md-prev-button")) && o.removeEventListener("click", O)
            }
        }), r(function () {
            o.quizId && "standalone-quiz" == t.current.name ? a.get("WebBook", "getFullBookData", {
                bookId: o.quizId
            }).then(function (e) {
                e.result && 1 == e.result.active ? f.openQuiz(e.result) : bbb("Standalone quiz inactive!")
            }) : o.bookId ? a.get("WebBook", "getActive", {
                bookId: o.bookId
            }).then(function (e) {
                e.result && (e.result.active || Globals.GLOBAL_STAGING_MODE ? c.open(o.bookId) : u.show(o.bookId))
            }) : "browse" === t.current.name && (m.setScrollWatchers(!0, !0), e.$on("$destroy", m.destroyScrollWatchers))
        }, 1e3), e.$on("$locationChangeSuccess", function () {
            "/" === n.path() ? (m.setScrollWatchers(!0, !0), e.$on("$destroy", m.destroyScrollWatchers)) : m.destroyScrollWatchers()
        }), e.$on("$stateChangeStart", function () {
            s.browseData.lastScrollOffset = T ? 0 : angular.element("#epic-app-content-container").scrollTop()
        }), e.onChangeTab = function (t) {
            s.browseData.section.name !== t.name && e.logCategoryChange(t.name), e.browseData.section = t
        }, e.logCategoryChange = function (e) {
            var t = e || s.browseData.section.name;
            p.log(p.events.CATEGORY_CHANGED, {
                category: t
            })
        }, e.shouldShowShuffle = function () {
            return !(v.isEducator && (C.currentProfile.isParent ? e.eduExploreVariant : e.eduExploreStudentVariant && function () {
                switch (s.browseData.section.name) {
                    case "Reading Level":
                    case "AR":
                    case "Lexile":
                    case "DRA":
                    case "F&P":
                    case "GRL":
                    case "undecided":
                        return !0;
                    default:
                        return !1
                }
            }()))
        }
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p) {
            var f = this;
            f.media = n, f.formData = {
                feedback: "",
                reason: null
            }, f.selectedReason = null, f.showLoader = null;
            var g = o("toDate")(l.status.expiration),
                m = o("subscriptionStatus")(l.status.display),
                h = null;
            f.copy = {
                confirm: {
                    headerCopy: r.trustAsHtml("We&#8217;d Love For You to Stay"),
                    graphicUrl: "../../../assets/churn-cancel/owl_desktop@2x.png",
                    topCopy: "Continue nurturing the love of reading and learning in your home.",
                    bodyCopyHeader: "Once you cancel Epic! your child will no longer have access to their library of books and learning videos",
                    bodyCustomerServiceCopy: "You can reach out to customer support if you need help:",
                    cancelButtonCopy: "Cancel My Subscription",
                    stayButtonCopy: "Stay on Epic!"
                },
                confirmReducedPrice: {
                    headerCopy: r.trustAsHtml("We&#8217;d Love For You to Stay"),
                    graphicUrl: "../../../assets/churn-cancel/owl_desktop@2x.png",
                    topCopy: "Get 50% off your next month",
                    topBodyCopy: "You’ll be able to nurture your child’s love of reading and learning with over 35,000 books and videos for only $X.XX!",
                    bodyCopyHeader: "Once you cancel Epic! your child will no longer have access to their library of books and learning videos",
                    bodyCustomerServiceCopy: "You can reach out to customer support if you need help:",
                    cancelButtonCopy: "Cancel My Subscription",
                    stayButtonCopy: "Take Special Offer!"
                },
                confirmFreeTrial: {
                    headerCopy: r.trustAsHtml("We&#8217;d Love For You to Stay"),
                    graphicUrl: "../../../assets/churn-cancel/owl_desktop@2x.png",
                    topCopy: "Get an extra 30 Days FREE!",
                    topBodyCopy: "You’ll be able to nurture your child’s love of reading and learning with over 35,000 books and videos FREE for an extra 30 days.",
                    bodyCopyHeader: "Once you cancel Epic! your child will no longer have access to their library of books and learning videos",
                    bodyCustomerServiceCopy: "You can reach out to customer support if you need help:",
                    cancelButtonCopy: "Cancel My Subscription",
                    stayButtonCopy: "Take Special Offer!"
                },
                feedback: {
                    header: "We’re Sorry to See You Go",
                    pCopy1: "Your account has been cancelled. You will receive an email confirmation.",
                    subHCopy1: "Come back anytime!",
                    pCopy2: "You can continue reading until ".concat(g, ", when your account expires."),
                    pCopy3: "Your child’s history & preferences will be waiting for you.",
                    subHCopy2: "Please help us make Epic! better for kids & educators everywhere!"
                },
                cancelOptions: [{
                    key: "missing_popular_titles",
                    title: "Didn't have the popular titles we were looking for"
                }, {
                    key: "budget",
                    title: "$" + c.PRICE + "/month doesn't fit in our budget"
                }, {
                    key: "prefer_paper_books",
                    title: "My child prefers paper books"
                }, {
                    key: "pausing_sub",
                    title: "Just pausing the subscription, we'll be back later!"
                }, {
                    key: "difficult_to_use",
                    title: "We found it difficult to use"
                }, {
                    key: "limited_acces_to_device",
                    title: "My child has limited access to devices that use Epic!"
                }, {
                    key: "different_service",
                    title: "We use a different service which suits our needs better (please specify)",
                    otherField: "Other Service:"
                }, {
                    key: "other",
                    title: "Other (please leave feeback below)"
                }]
            }, "epic_monthly_799" !== d.productId && "epic_monthly_599" !== d.productId || (a.get("WebSubscriptionProduct", "noAuthGetSubscriptionProductDataByProductId", {
                productId: d.productId
            }).then(function (t) {
                var o = Math.floor(t.result.price / 2) / 100;
                e.$evalAsync(function () {
                    f.copy.confirmReducedPrice.topBodyCopy = "You’ll be able to nurture your child’s love of reading and learning with over 35,000 books and videos for only $".concat(o, "!")
                })
            }), u.loadExperimentDataByLabel(u.CANCELLATION_SWEETENERS, "account", null, !0).then(function (t) {
                e.$evalAsync(function () {
                    f.flowAbTestVariant = t, f.flowAbTestVariant === u.CANCELLATION_SWEETENERS_FREEBIE ? f.showThisVariant = "free-trial" : f.flowAbTestVariant === u.CANCELLATION_SWEETENERS_REDUCED ? f.showThisVariant = "reduced-price" : f.showThisVariant = "control"
                })
            })), f.cancel = function (e) {
                f.showLoader = !0, a.post("WebAccount", "cancelStripeSubscription").then(function (t) {
                    if (t && t.success) {
                        s.log(s.events.ACCOUNT_SUBSCRIPTION_CANCEL, {
                            renew_date: g,
                            membership_status: m,
                            special_offer: e
                        });
                        l.checkSubscriptionStatus(!0).then(function () {
                            f.showLoader = !1, i.defaultRedirect("cancel.feedback", null)
                        }).catch(function (e) {
                            f.showLoader = !1, bbb(e)
                        })
                    }
                })
            }, f.returnToBrowse = function () {
                i.defaultRedirect("browse", null)
            }, f.selectReason = function (e) {
                f.selectedReason = e, f.formData.cancelReason = e.key, f.formData.cancelReasonOther = null
            }, f.submitFeedback = function () {
                if (h) return;
                h = !0;
                var e = {
                    feedback: f.formData.feedback || ""
                };
                f.formData.cancelReason && (e.cancelReason = f.formData.cancelReason);
                f.formData.cancelReasonOther && (e.cancelReasonOther = f.formData.cancelReasonOther);
                a.post("WebAccount", "submitFeedback", e).then(function (e) {
                    e && e.success ? i.defaultRedirect("accountManage", null) : bbb(e)
                }), s.log(s.events.ACCOUNT_SUBSCRIPTION_CANCEL_REASON, {
                    renew_date: g,
                    membership_status: m,
                    reason: f.formData.cancelReason
                }), s.log(s.events.ACCOUNT_SUBSCRIPTION_CANCEL_REASON_SUBMIT, {
                    renew_date: g,
                    membership_status: m,
                    reason: f.formData.cancelReason
                })
            }, f.applyCancelDeal = function (e) {
                s.log(s.events.ACCOUNT_SUBSCRIPTION_CANCEL_FINAL_STAY, {
                    renew_date: g,
                    membership_status: m,
                    special_offer: e
                }), "applying deal ".concat(e), f.showLoader = !0, a.post("WebDeal", "applyDeal", {
                    dealLabel: e
                }).then(function (t) {
                    t.result ? t.result.success ? (p.setSessionStorageWithKey("dealToast", e), i.defaultRedirect("profileSelect", null)) : (f.cancelDealErrorMessage = t.result.error, f.showLoader = !1) : (f.cancelDealErrorMessage = "An error has happened on our end. Please try again.", f.showLoader = !1)
                })
            };
            g = o("toDate")(l.status.expiration), m = o("subscriptionStatus")(l.status.display);
            f.cancelDealErrorMessage = "", "cancel.index" === t.current.name && s.log(s.events.ACCOUNT_SUBSCRIPTION_CANCEL_FINAL_VIEW, {
                renew_date: g,
                membership_status: m
            }), "cancel.feedback" === t.current.name && s.log(s.events.ACCOUNT_SUBSCRIPTION_CANCEL_REASON_VIEW, {
                renew_date: g,
                membership_status: m
            })
        }
        angular.module("epicApp").controller("CancelController", e), e.$inject = ["$rootScope", "$state", "$filter", "$mdMedia", "$sce", "RedirectService", "Data", "SubscriptionService", "BigQuery", "SiteConstants", "ABTestService", "AccountService", "SessionStorageService"]
    }(), angular.module("epicApp").controller("CollectionController", ["$scope", "$state", "$stateParams", "Data", "CollectionData", "SubscriptionService", "BookOverlay", "InactiveBookModal", function (e, t, o, n, r, i, a, l) {
        e.cdn = Globals.GLOBAL_CDN_BASE, e.getBookImageUrl = function (t) {
            return e.cdn + "drm/" + t.toString().slice(-1) + "/" + t + "/cover.jpg"
        }, e.openBook = function (e) {
            var t = e.id || e.modelId;
            e.active || Globals.GLOBAL_STAGING_MODE ? a.open(t) : l.show(t)
        };
        var s = function () {
            r.books && 0 !== r.books.length || t.go("browse"), e.books = r.books, e.title = r.name, e.likes = r.likes
        };
        o.collectionId ? n.get("WebBookCollection", "getBooksForCollection", {
            collectionId: o.collectionId
        }).then(function (e) {
            e.result && (r.books = e.result.books, r.name = e.result.collection.title), s()
        }) : s()
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m) {
            if (p.set("eduAccountSkipProfileSelect", l.currentProfile && !!l.currentProfile.isParent), bbb("EduDashboardCtrl", l.currentProfile, !l.isTeacher()), l.currentProfile && l.isTeacher()) {
                var h = 199,
                    v = this;
                v.profileService = l, v.accountService = s, v.browseService = c, v.showTextMessage = function () {
                    r.open({
                        templateUrl: "modals/educator-dashboard/text-message-preview.html",
                        controller: "TextMessageCopyController",
                        controllerAs: "vm",
                        size: "lg",
                        keyboard: !1
                    })
                }, v.toggleVideoEnabled = function () {
                    v.accountService.videoEnabled = v.sliderState ? 0 : 1, u.get("WebAccount", "setVideoEnabledByAccountId", {
                        enabled: v.accountService.videoEnabled
                    }).then(function (e) {
                        v.browseService.getCategorySections(), v.sliderState ? S(v.bigQuery.events.EDU_DASHBOARD_CLICK_EXPLORE_VIDEO_ON, {
                            ect_completed: v.teacherECTProgress.length
                        }) : S(v.bigQuery.events.EDU_DASHBOARD_CLICK_EXPLORE_VIDEO_OFF, {
                            ect_completed: v.teacherECTProgress.length
                        })
                    })
                }, v.taskCompleted = function (e) {
                    return v.teacherECTProgress.some(function (t) {
                        return t.displayText === e
                    })
                }, v.copyCode = function (t) {
                    1 === t ? v.topClassCodeCopied = !0 : v.actionClassCodeCopied = !0;
                    var o = v.accountService.accountLoginCode.toLowerCase(),
                        n = document.createElement("input");
                    n.value = o, document.body.appendChild(n).select(), document.execCommand("copy"), document.body.removeChild(n).select(), setTimeout(function () {
                        v.topClassCodeCopied = !1, v.actionClassCodeCopied = !1, e.$apply()
                    }, 2500)
                }, v.openDownload = function (e) {
                    a.open(Globals.GLOBAL_CDN_BASE + e, "_blank")
                }, v.redirectToCalendars = function () {
                    a.open("".concat(Globals.GLOBAL_URL, "calendars"))
                }, v.sendBQ = S, v.bigQuery = d, v.printFlyer = function () {
                    var e = v.accountService.accountLoginCode.toLowerCase(),
                        t = v.educator.name,
                        o = Globals.GLOBAL_URL + "home-access-invite/enable-home-access-invite.php?cc=" + encodeURIComponent(e) + "&tn=" + encodeURIComponent(t);
                    a.open(o, "_blank")
                }, v.printClassCode = function () {
                    var e = v.accountService.accountLoginCode.toLowerCase(),
                        t = (v.educator.name, Globals.GLOBAL_DEV_MODE),
                        o = Globals.GLOBAL_URL + "class-code-flyer/class-code-flyer.php?cc=" + encodeURIComponent(e) + "&dev=" + encodeURIComponent(t);
                    a.open(o, "_blank")
                }, v.handleAction = function (t, i) {
                    switch (t) {
                        case "Add Students":
                            S(v.bigQuery.events.EDU_DASHBOARD_CLICK_ROSTER, {
                                ect_completed: v.teacherECTProgress.length,
                                source: i
                            }), n.path("roster");
                            break;
                        case "Assign Reading":
                            S(v.bigQuery.events.EDU_DASHBOARD_CLICK_ASSIGN, {
                                ect_completed: v.teacherECTProgress.length,
                                source: i
                            }), n.path("activities/assignments");
                            break;
                        case "Enable Home Access":
                            S(v.bigQuery.events.EDU_DASHBOARD_CLICK_HOME_ACCESS_EMAIL, {
                                dashboard_view: v.enableHomeAccessStats.dashboard_view,
                                ect_completed: v.teacherECTProgress.length,
                                ect_next: v.enableHomeAccessStats.ect_next
                            }), f.showEnableHomeAccessForMultiple(v.enableHomeAccessStats);
                            break;
                        case "Share Summer Promo":
                            return r.open({
                                templateUrl: "modals/summer-of-reading/summer-of-reading.html",
                                controller: "SummerOfReadingBannerController as vm"
                            }).result;
                        case "More Language Info":
                            S(v.bigQuery.events.EDU_DASHBOARD_CLICK_MORE_LANGUAGE_INFO, {
                                ect_completed: v.teacherECTProgress.length,
                                source: i
                            }), n.path("roster/share");
                            break;
                        case "Create Quiz":
                            S(v.bigQuery.events.EDU_DASHBOARD_CLICK_QUIZ, {
                                ect_completed: v.teacherECTProgress.length,
                                source: i
                            }), n.path("activities/quizzes");
                            break;
                        case "Try First Book":
                            S(v.bigQuery.events.EDU_DASHBOARD_CLICK_EXPLORE, {
                                ect_completed: v.teacherECTProgress.length,
                                source: i
                            }), n.path("/");
                            break;
                        case "Log in Students":
                            S(v.bigQuery.events.EDU_DASHBOARD_CLICK_WEB_LOGIN, {
                                ect_completed: v.teacherECTProgress.length,
                                source: i
                            }), n.path("roster/student-login");
                            break;
                        case "Send Email":
                            if (S(v.bigQuery.events.EDU_DASHBOARD_CLICK_SEND_EMAIL, {
                                    ect_completed: v.teacherECTProgress.length,
                                    source: i
                                }), 0 === v.educator.studentCount) o.go("roster.roster-tab", {
                                sendEmail: !0
                            });
                            else r.open({
                                templateUrl: "modals/add-student-emails/add-student-emails-modal.html",
                                controller: "AddStudentEmailsController",
                                size: "lg",
                                keyboard: !1,
                                scope: e
                            });
                            break;
                        case "Student Login":
                            a.location = Globals.GLOBAL_URL + "students"
                    }
                }, v.routeToReaderpillarSite = function () {
                    d.log(d.events.EDU_DASHBOARD_READERPILLAR, {}), a.open(Globals.GLOBAL_URL + "readerpillar", "_blank")
                }, v.cdn = Globals.GLOBAL_CDN_BASE, v.counter = 0, v.isNavigating = null, v.certBadge = null, v.teacherCompletionSteps = null, v.teacherCompletionStepsReady = null, v.sliderState = !!v.accountService.videoEnabled, v.actionClassCodeCopied = null, v.topClassCodeCopied = null, v.educator = {
                    name: "".concat(v.profileService.currentProfile.educatorPrefix, " ").concat(v.profileService.currentProfile.lastName),
                    avatarImg: v.profileService.currentProfile.avatar,
                    studentCount: v.profileService.childProfiles.filter(function (e) {
                        return "guest" !== e.lastName.toLowerCase()
                    }).length
                }, v.textMessage = "".concat(v.profileService.currentProfile.educatorPrefix, " ").concat(v.profileService.currentProfile.lastName, " has invited you to see your childs reading progress on Epic!"), v.circleIconEmpty = "/assets/educator-dashboard-icons/circle-empty.svg", v.circleIconFilled = "/assets/educator-dashboard-icons/circle-filled.svg", v.checkIconEmpty = "/assets/educator-dashboard-icons/check-empty.svg", v.checkIconFilled = "/assets/educator-dashboard-icons/check-filled.svg";
                var b = Globals.GLOBAL_CDN_BASE + "website/educator-resources/flyers/K5AppStudentFlyerBTS2018.pdf";
                u.get("WebAccount", "noAuthGetAccountEducatorInfoByUser", {
                    userId: l.parentProfile.id
                }).then(function (e) {
                    if (e && e.result) {
                        var t = e.result.grade;
                        "teacher" != (e.result.profession || "").toLowerCase() ? b = "website/educator-resources/flyers/K5AppStudentFlyerBTS2018.pdf" : t < 3 ? b = "website/educator-resources/flyers/K2AppStudentFlyerBTS2018.pdf" : t >= 3 && (b = "website/educator-resources/flyers/35AppStudentFlyerBTS2018.pdf"), v.copy.a.educatorResources.studentFlyer.flyerUrl = Globals.GLOBAL_CDN_BASE + b
                    }
                }), v.enableHomeAccessStats = {
                    dashboard_view: "new_user",
                    ect_completed: 0,
                    ect_next: ""
                }, v.summerOfReading = {
                    titleUrl: "".concat(v.cdn, "website/assets/educator-dashboard-icons/summer-sale.svg"),
                    subTitleUrl: "".concat(v.cdn, "website/assets/educator-dashboard-icons/summer-of-reading-dollars.svg"),
                    bodyText: "Your Families Can Have a Summer Full of Reading and Learning on Epic!",
                    btnText: "Share with Families",
                    footerOffer: "OFFER ENDS 6/11/19 AT MIDNIGHT PST.",
                    footerSubText: "After the 3 month promotional period, additional months will be billed at $".concat(g.PROMO.DEFAULT_PRICE, " per month. Families can cancel anytime.")
                }, v.copy = {
                    a: {
                        topClassCode: "Student Login - Class Code: ".concat(v.accountService.accountLoginCode.toLowerCase()),
                        h1Text: "Welcome to Your Epic! Dashboard",
                        h4Text: "Follow the Get Started steps to become an Epic! Certified Teacher!",
                        sidebar: {
                            certificationTasksHeader: "Get Started on Epic!",
                            activityContainer: {
                                h3Text: "Monthly Activity Calendar",
                                pText: "Each month is filled with fun activities your students can do on Epic!",
                                calendarSrc: "/assets/educator-resources/calendar-thumb.png",
                                ctaText: "Get Calendars"
                            }
                        },
                        shareSectionHeader: "Share Epic! with Your Students’ Families",
                        shareSectionSubheader: "Share free student progress & encourage reading at home!",
                        shareSectionMoreInfo: "For more languages and information click",
                        actionCards: {
                            addStudents: {
                                heading: "1. Add Students to Roster",
                                iconSrc: "".concat(v.cdn, "website/assets/educator-dashboard-icons/add-students.svg"),
                                iconAlt: "Clipboard",
                                paragraphText: "You have ".concat(v.educator.studentCount, " students on your roster. Get them started on Epic!"),
                                ctaText: "Add Students"
                            },
                            tryFirstBook: {
                                heading: "Try First Book",
                                paragraphText: "Students can enjoy thousands of books, videos & more.",
                                ctaText: "Go to Explore",
                                iconSrc: "/assets/educator-dashboard-icons/binoculars.svg",
                                iconAlt: "Binoculars icon"
                            },
                            assignReading: {
                                heading: "Assign Reading",
                                paragraphText: "Create content collections and assign them to your students!",
                                ctaText: "Go to Activities",
                                iconSrc: "/assets/educator-dashboard-icons/activities.svg",
                                iconAlt: "Checklist icon"
                            },
                            createQuiz: {
                                heading: "Create Quiz",
                                paragraphText: "Create quizzes to improve students' reading comprehension.",
                                ctaText: "Go to Quizzes",
                                iconSrc: "/assets/educator-dashboard-icons/activities.svg",
                                iconAlt: "Checklist icon"
                            },
                            loginStudents: {
                                heading: "Log in Students to try Epic! in Class",
                                subheading: "Access Epic! from any Chromebook, iOS, or Android device",
                                bottomHeading: "For more information on logging in click",
                                steps: [{
                                    heading: "2. Students Go To",
                                    paragraphText: "Go to",
                                    paragraphText2: "download the Epic! app.",
                                    appstoreButtonSrc: "/assets/educator-dashboard-icons/AppleStore.svg",
                                    appstoreHref: "https://itunes.apple.com/us/app/epic!-books-for-kids/id719219382?mt=8",
                                    playstoreButtonSrc: "/assets/educator-dashboard-icons/GooglePlay.svg",
                                    playstoreHref: "https://play.google.com/store/apps/details?id=com.getepic.Epic"
                                }, {
                                    heading: "3. Students Enter Class Code",
                                    paragraphText: "".concat(v.accountService.accountLoginCode.toLowerCase()),
                                    classCode: "".concat(v.accountService.accountLoginCode.toLowerCase())
                                }],
                                ctaText: "Student Login",
                                classCodeCtaText: "Print Class Code"
                            }
                        },
                        educatorResources: {
                            heading: "Educator Resources",
                            subHeading: "Get the most out of Epic! - in the classroom and beyond",
                            quickStartGuide: {
                                heading: "QUICK START GUIDE",
                                iconSrc: "/assets/educator-dashboard-icons/quick-start.svg",
                                iconAlt: "Paper icon that says start",
                                link: " https://docs.google.com/presentation/d/1p4i8H6Aqi64dAlTA11TPChlC_6JC3T5CfQPiNPNRrcQ/edit#slide=id.g3dd5a36eeb_0_2"
                            },
                            btsPresentation: {
                                heading: "BACK-TO-SCHOOL NIGHT PRESENTATION",
                                iconSrc: "/assets/educator-dashboard-icons/bts-night-presentation.svg",
                                iconAlt: "Display board icon",
                                link: "https://docs.google.com/presentation/d/14olHmli8KDEz33RXEadGjA-xdaG7pDBcuarn3NpwUwg/edit#slide=id.p"
                            },
                            lessonPlans: {
                                heading: "LESSON PLANS",
                                iconSrc: "/assets/educator-dashboard-icons/lesson-plans.svg",
                                iconAlt: "Clipboard checklist icon",
                                link: "https://drive.google.com/open?id=1rIzNNJIVG3ljpzwf7F78HpHcuEU22Dvx"
                            },
                            colleaguePresentation: {
                                heading: "COLLEAGUE PRESENTATION",
                                iconSrc: "/assets/educator-dashboard-icons/colleague-presentation.svg",
                                iconAlt: "Announcement icon",
                                link: "https://docs.google.com/presentation/d/1UTgLBlwyCX3iZsLK0k4anAXEp46Z-3UerV1F6DFkhdk/edit#slide=id.g3e33f7684c_0_5"
                            },
                            classroomDecorations: {
                                heading: "CLASSROOM DECORATIONS",
                                iconSrc: "/assets/educator-dashboard-icons/classroom-decorations.svg",
                                iconAlt: "Celebration Streamer icon",
                                link: "website/educator-resources/epic-classroom-pack.zip"
                            },
                            sharedDevices: {
                                heading: "SHARED DEVICES: HOW TO USE EPIC!",
                                iconSrc: "/assets/educator-dashboard-icons/shared-devices.svg",
                                iconAlt: "",
                                link: "https://docs.google.com/document/d/13TIRpXRXPvOrGkb1Vj7tuHvicJZXaDG2SPgevzIB6Ls/edit"
                            },
                            fullGuide: {
                                heading: "FULL GUIDE",
                                iconSrc: "/assets/educator-dashboard-icons/full-guide.svg",
                                iconAlt: "Notebook icon",
                                link: "https://docs.google.com/presentation/d/1NQc8ELqCsH62lULGtkTO02Qyt-brsnlWAM_R6zCm4bg/edit#slide=id.g3dd5a36eeb_0_2"
                            },
                            studentFlyer: {
                                heading: "STUDENT FLYER",
                                iconSrc: "/assets/educator-dashboard-icons/student-flyer.svg",
                                iconAlt: "",
                                flyerUrl: b
                            }
                        }
                    },
                    b: {}
                }, u.get("WebUser", "getTeacherOnboardingCompletion").then(function (e) {
                    var t = Object.keys(e.result.teacherCompletionSteps).map(function (t, o) {
                        return e.result.teacherCompletionSteps[t]
                    }, [].sort());
                    v.teacherCompletionSteps = e.result.teacherCompletionSteps, v.formattedTeacherCompletionSteps = t, v.teacherECTProgress = t.filter(function (e) {
                        return e.isComplete
                    }), v.certBadge = "/assets/educator-dashboard-icons/cert".concat(v.teacherECTProgress.length, ".svg"), v.reorderSections = e.result && e.result.booksReadThreshold && e.result.booksReadThreshold.booksRead >= h, v.teacherCompletionStepsReady = !0, v.reorderSections && (v.enableHomeAccessStats.dashboard_view = "active_user"), v.enableHomeAccessStats.ect_completed = v.teacherECTProgress.length;
                    var o = v.formattedTeacherCompletionSteps.find(function (e) {
                        return !e.isComplete
                    });
                    v.enableHomeAccessStats.ect_next = o ? o.displayText : ""
                }).then(function () {
                    S(v.bigQuery.events.EDU_DASHBOARD_VIEW, {
                        ect_completed: v.teacherECTProgress.length
                    });
                    var e = "active_user" === v.enableHomeAccessStats.dashboard_view ? v.bigQuery.events.EDU_DASHBOARD_VIEW_ACTIVE_USER : v.bigQuery.events.EDU_DASHBOARD_VIEW_NEW_USER,
                        t = {
                            ect_completed: v.teacherECTProgress.length,
                            ect_next: v.enableHomeAccessStats.ect_next
                        };
                    S(e, t)
                }).then(function () {
                    var e = p.get("accountsViewedArchiveModal") || {};
                    if (!e[v.accountService.email] && l.currentProfile.dateCreated < 1530403200 && v.educator.studentCount > 0) {
                        for (var t = 0; t < v.profileService.childProfiles.length; t++)
                            if (v.profileService.childProfiles[t].dateCreated > 1530403200) return;
                        return r.open({
                            templateUrl: "modals/archive-students-modal/archive-students-modal.html",
                            controller: "ArchiveStudentsController",
                            size: "lg",
                            keyboard: !1
                        }), e[v.accountService.email] = 1, void p.set("accountsViewedArchiveModal", e)
                    }
                }), v.openRainbowModel = function () {
                    if (v.counter++, 5 === v.counter) return v.counter = 0, r.open({
                        templateUrl: "modals/summer-of-reading-2/summer-of-reading2.html",
                        controller: "SummerOfReadingBanner2Controller as vm"
                    }).result
                }, v.isPromoPeriod = function () {
                    var e = Date.parse("05/13/2019"),
                        t = Date.parse("06/11/2019"),
                        o = Date.parse((new Date).toLocaleDateString());
                    return !!p.get("turnpromo") || o <= t && o >= e
                }, v.isPromoPeriod() && (S(v.bigQuery.events.EDU_DASH_SUMMER2019_VIEWBANNER, {}), m.loadExperimentDataByLabel(m.SUMMER_OF_READING_SALE_BANNER, "account").then(function (e) {
                    t.$evalAsync(function () {
                        if (v.flowAbTestVariant = e, v.flowAbTestVariant === m.SUMMER_OF_READING_SALE_BANNER_SHOW_ON_LOAD && !p.get("summerPopShowByDefault")) return r.open({
                            templateUrl: "modals/summer-of-reading-2/summer-of-reading2.html",
                            controller: "SummerOfReadingBanner2Controller as vm"
                        }).result
                    })
                }))
            } else o.go("browse");

            function S(e, t) {
                t ? v.bigQuery.log(e, t) : v.bigQuery.log(e, {
                    ect_completed: v.teacherECTProgress.length
                })
            }
        }
        e.$inject = ["$scope", "$rootScope", "$state", "$location", "$modal", "$mdDialog", "$window", "ProfileService", "AccountService", "BrowseService", "Data", "BigQuery", "LocalStorageService", "ProfileEditService", "SiteConstants", "ABTestService"], angular.module("epicApp").controller("EduDashboardCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            e.showContents = !1, 1 === Globals.GLOBAL_IS_AUTHED && t.current.name.startsWith("eduSignUp") ? t.go("browse") : (e.showContents = !0, e.mobileWidth = 600, e.window = r, n.initialize(), o.start())
        }
        e.$inject = ["$scope", "$state", "EduSignUpService", "GoogleClassroomService", "$window"], angular.module("epicApp").controller("EduSignUpController", e)
    }(), angular.module("epicApp").controller("NotUseExampleController", ["$scope", function (e) {}]),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c) {
            s.setScrollWatchers(!0), e.$on("$destroy", s.destroyScrollWatchers), c.log(c.events.NAVIGATION_MAILBOX), e.maxMessageLength = 120, e.$watch(function () {
                return i.currentProfile.id
            }, function (t, o) {
                t && !e.contentList && (e.shareeIds = [], e.shareeIds.push(i.currentProfile.id), e.refreshMailbox())
            }), e.getDaysDiff = function (e) {
                var t = Math.floor(new Date / 1e3) - e;
                return Math.floor(t / 86400)
            }, e.openDeleteModal = function (t) {
                var r = [];
                r.push(t);
                var a = e.$new(!0);
                a.modelId = t, o.open({
                    templateUrl: "modals/mailbox/delete-message-modal.html",
                    scope: a,
                    controller: "DeleteMessageController"
                }).result.then(function (t) {
                    t && t.deleted && n.get("WebSharedContent", "setSharedContentsStatusById", {
                        sharedContentIds: r,
                        status: 1,
                        userId: i.currentProfile.id
                    }).then(function (t) {
                        t && e.refreshMailbox()
                    })
                })
            }, e.refreshMailbox = function () {
                e.shareeIds = [], e.shareeIds.push(i.currentProfile.id), n.get("WebSharedContent", "getSharedContentItems", {
                    shareeIds: e.shareeIds
                }).then(function (o) {
                    o && (e.contentList = o.result.sharedContentAndContentData, l.getViewedMessagesData(), t.cert && n.get("WebSharedContent", "getOnboardingCertificateMessage", {
                        cert: t.cert
                    }).then(function (o) {
                        o && o.result && o.result.content && (e.contentList = e.contentList || [], e.contentList.splice(0, 0, o.result)), t.cert, e.contentList
                    }))
                })
            }, e.viewMessage = function (t) {
                "playlist" == t.contentType ? e.openViewMessageModal(t) : "system_message" == t.contentType ? "enable_home_access" == t.content.type ? e.enableHomeAccess(t) : e.openViewMessageModal(t) : e.openViewNotificationModal(t);
                t.viewed || (l.decrement("unviewedMessages"), e.setSharedContentsViewedById(t.modelId))
            }, e.openViewMessageModal = function (t) {
                var n = e.$new(!0);
                n.message = t, o.open({
                    scope: n,
                    template: "<view-message-modal></view-message-modal>",
                    size: "sm"
                })
            }, e.openViewNotificationModal = function (t) {
                var n = e.$new(!0);
                n.message = t, o.open({
                    scope: n,
                    template: "<view-notification-modal></view-notification-modal>",
                    size: "sm"
                })
            }, e.setSharedContentsViewedById = function (t) {
                var o = [];
                o.push(t), n.get("WebSharedContent", "setSharedContentsViewedById", {
                    sharedContentIds: o,
                    viewed: 1,
                    userId: i.currentProfile.id
                }).then(function () {
                    e.refreshMailbox()
                })
            }, e.getSenderString = function (t, o, n, r) {
                var i, a;
                i = t || o ? n : "An Epic! Parent";
                var l = e.getDaysDiff(r);
                a = l ? 1 === l ? "Yesterday" : l + " Days Ago" : "Today";
                return i + ", " + a
            }, e.getDate = function (t) {
                var o, n = t.dateModified,
                    r = e.getDaysDiff(n);
                o = r ? 1 === r ? "Yesterday" : r + " Days Ago" : "Today";
                return o
            }, e.getSubheader = function (e) {
                var t = "";
                "playlist" == e.contentType ? t = "Shared a collection with you:" : "system_message" == e.contentType ? t = "enable_home_access" == e.content.type ? "Enable Home Access Request" : "Shared a message with you:" : "copy" == e.contentType ? t = "Copied your collection:" : "favorite" == e.contentType ? t = "Favorited your collection:" : "feedback" == e.contentType ? t = "Liked your collection:" : "shared_content" == e.contentType && (t = "Shared your collection:");
                return t
            }, e.getIcon = function (t) {
                var o = e.cdn;
                "system_message" == t.contentType ? "enable_home_access" == t.content.type && (o += "/website/assets/app/inbox/mailbox/e-c-p-icon.svg") : "copy" == t.contentType ? o += "/website/assets/app/inbox/mailbox/activity-copied-icon.svg" : "favorite" == t.contentType ? o += "/website/assets/app/inbox/mailbox/activity-favorite-icon.svg" : "feedback" == t.contentType ? o += "/website/assets/app/inbox/mailbox/activity-like-icon.svg" : "shared_content" == t.contentType && (o += "/website/assets/app/inbox/mailbox/activity-share-icon.svg");
                return o
            }, e.getMessage = function (t) {
                var o = "";
                "playlist" == t.contentType ? o = r.truncate(t.message, e.maxMessageLength) : "system_message" == t.contentType ? o = "enable_home_access" == t.content.type ? t.sharerUser.journalName + " wants to read on Epic! at home!" : t.content.body : "copy" == t.contentType ? o = 1 == t.content.userCount ? t.sharerUser.journalName + " has copied your collection!" : t.content.userCount + " people have copied your collection!" : "favorite" == t.contentType ? o = 1 == t.content.userCount ? t.sharerUser.journalName + " has favorited your collection!" : t.content.userCount + " people have favorited your collection!" : "feedback" == t.contentType ? o = 1 == t.content.userCount ? t.sharerUser.journalName + " has liked your collection!" : t.content.userCount + " people have liked your collection!" : "shared_content" == t.contentType && (o = 1 == t.content.userCount ? t.sharerUser.journalName + " has shared your collection!" : t.content.userCount + " people have shared your collection!");
                return o
            }, e.isSystemMessage = function (e) {
                return "system_message" == e.contentType && "enable_home_access" != e.content.type
            }, e.getRouteURL = function (e) {
                if (e.content.url) return e.content.url;
                return !1
            }, e.enableHomeAccess = function (t) {
                e.setSharedContentsViewedById(t.modelId);
                var o = new Profile(t.webSharerUser);
                a.showEnableHomeAccess(o).then(function () {}, function () {})
            }, e.cdn = Globals.GLOBAL_CDN_BASE
        }
        e.$inject = ["$scope", "$stateParams", "$modal", "Data", "StringService", "ProfileService", "ProfileEditService", "JewelService", "BookPresentationsLogger", "BigQuery"], angular.module("epicApp").controller("MailboxCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            i.log(i.events.NAVIGATION_LIBRARY), r.setScrollWatchers(!0, !0), e.$on("$destroy", r.destroyScrollWatchers);
            var a = t.current.name;
            e.profile = o.currentProfile, e.selectedSubviewIndex = null, e.getContentImageUrl = n.thumbPath, e.subNavTabs = [];
            [{
                stateName: "my-library.favorites",
                label: "favorites",
                visibleTo: "all"
            }, {
                stateName: "my-library.collections",
                label: "collections & assignments",
                visibleTo: ["teacher", "parent"]
            }, {
                stateName: "my-library.recent-reads",
                label: "recent",
                visibleTo: "all"
            }].forEach(function (t, n) {
                (t.visibleTo.indexOf(o.currentProfile.userType) > -1 || "all" === t.visibleTo) && (e.subNavTabs.push(t), t.stateName === a && (e.selectedSubviewIndex = e.subNavTabs.length - 1))
            }), e.$watch("selectedSubviewIndex", function (o, n) {
                null !== o && null !== n && o !== n && t.go(e.subNavTabs[o].stateName)
            })
        }
        e.$inject = ["$scope", "$state", "ProfileService", "BookService", "BookPresentationsLogger", "BigQuery"], angular.module("epicApp").controller("MyLibraryCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            "true" === o.teacheroffer ? n.start(n.TEACHER_OFFER) : n.restartFromFirstState(), e.continueNuf = !0, e.nufNewService = n, e.totalSteps = n.getTotalSteps(), e.cdn = Globals.GLOBAL_CDN_BASE, e.isMobileUser = Globals.MOBILE_USER, e.connectFlowSkip = function () {
                i.log(i.events.NUF_CONNECT_SKIP), n.start(n.NEW_PROFILE, {
                    profileToUpdateId: r.currentProfile.id
                })
            }, e.goBack = function () {
                e.formShowError = !1, n.transitionState(!1)
            }, e.showImage = function () {
                return t.innerHeight > 600
            }
        }
        e.$inject = ["$scope", "$window", "$stateParams", "NufNewService", "ProfileService", "BigQuery"], angular.module("epicApp").controller("NufNewController", e)
    }(), angular.module("epicApp").controller("OriginalsController", ["$scope", "Data", "BookOverlay", "InactiveBookModal", "CollectionData", "$rootScope", "$state", "$window", "$stateParams", "BookPresentationsLogger", function (e, t, o, n, r, i, a, l, s, c) {
        e.cdn = Globals.GLOBAL_CDN_BASE, e.openBook = function (e) {
            var t = e.id || e.modelId;
            e.active || Globals.GLOBAL_STAGING_MODE ? o.open(t) : n.show(t)
        }, e.clickBack = function () {
            l.history.back()
        }, e.backIconPath = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/arrow-icon.png";
        var u = function () {
            r.series && 0 !== r.series.length || a.go("browse"), e.originalSeries = r.series
        };
        s.originalId ? t.get("WebContentTitle", "getContentTitle", {
            modelId: s.originalId
        }).then(function (e) {
            e.result && (r.series = e.result.ContentTitle, r.name = e.result.ContentTitle.title), u()
        }) : u(), c.setScrollWatchers(!0), e.$on("$destroy", c.destroyScrollWatchers)
    }]),
    function () {
        function e(e, t, o, n, r, i, a, l) {
            r.currentProfile.isParent && n.isEducator() || e.go("browse"), n.isEducator() && r.currentProfile.isParent && l.log(l.events.NAVIGATION_ACTIVITIES), t.media = o, t.cdn = Globals.GLOBAL_CDN_BASE, t.accountService = n, t.profileService = r, t.selectCtrl = new a, t.stateService = e, t.hasFetchedReadingLog = !0, t.server = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + r.currentProfile.id, t.getThemeImageUrl = i.getThemeImageUrl, t.themeImage = t.getThemeImageUrl(r.currentProfile.themeId);
            var s = [{
                label: "class log",
                state: "class-log",
                condition: function () {
                    return !0
                }
            }, {
                label: "student summary",
                state: "summary",
                condition: function () {
                    return !0
                }
            }, {
                label: "assignments & collections",
                state: "assignments",
                condition: function () {
                    return !0
                }
            }, {
                label: "quizzes",
                state: "quizzes",
                condition: function () {
                    return !0
                }
            }];

            function c() {
                t.tabs = [];
                for (var o = 0; o < s.length; o++) {
                    var n = s[o];
                    n.condition && !n.condition() || (t.tabs.push(n), "activities." + n.state === e.current.name && (t.subViewIndex = t.tabs.length - 1))
                }
            }

            function u(e) {
                t.groupId = e, t.profiles = r.getProfilesInGroup(t.groupId), t.selectCtrl.initWith(t.profiles)
            }
            t.$watch("subViewIndex", function (o, n) {
                if (o !== n) {
                    var r = t.tabs[o].state;
                    e.go("activities." + r)
                }
            }), t.$watch(function () {
                return r.childProfiles
            }, function (e, o) {
                e !== o && u(t.groupId)
            }), c(), u(null), t.shouldShowGroupSelector = function () {
                return n.isEducator() && r.currentProfile.isParent
            }, t.selectGroup = u, t.refreshTabs = c, t.refreshProfiles = function (e) {
                e = e || t.groupId, t.loading = !0, r.reloadProfiles().then(function (o) {
                    t.loading = !1, u(e)
                })
            }
        }
        e.$inject = ["$state", "$scope", "$mdMedia", "AccountService", "ProfileService", "ProfileEditService", "SelectCtrl", "BigQuery"], angular.module("epicApp").controller("EducatorActivitiesController", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d) {
            l.currentProfile.isParent && a.isEducator() || e.go("browse"), d.log(d.events.NAVIGATION_ROSTER), n.media = i, n.cdn = Globals.GLOBAL_CDN_BASE, n.accountService = a, n.profileService = l, n.selectCtrl = new c, n.guestProfileObj = null, n.stateService = e, n.sendEmail = o.sendEmail, n.hasFetchedReadingLog = !0, n.server = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + l.currentProfile.id;
            var p = "boolean" != typeof o.profileCreateFormIsCollapsed || !1 !== o.profileCreateFormIsCollapsed;
            n.profileCreateFormIsCollapsed = {
                value: p
            }, n.checkCloseAddStudentRow = function () {
                n.profileCreateFormIsCollapsed.value = !0
            }, n.getThemeImageUrl = s.getThemeImageUrl, n.themeImage = n.getThemeImageUrl(l.currentProfile.themeId), n.logBQ = function (e) {
                d.events.hasOwnProperty(e) ? d.log(d.events[e], {
                    student_count: l.childProfiles && l.childProfiles.length ? l.childProfiles.length : 0,
                    grade: l.parentProfile.grade
                }) : bbb("BigQuery does not have that event constant. Add it!")
            };
            var f = [{
                label: "roster",
                state: "roster-tab",
                condition: function () {
                    return !0
                }
            }, {
                label: "student login",
                state: "student-login",
                condition: function () {
                    return !0
                },
                eventName: "EDU_ROSTER_STUDENT_LOGIN"
            }, {
                label: "free rewards",
                state: "tap.index",
                condition: function () {
                    return !0
                },
                eventName: "EDU_ROSTER_FREE"
            }];

            function g() {
                n.tabs = [];
                for (var t = 0; t < f.length; t++) {
                    var o = f[t];
                    o.condition && !o.condition() || (n.tabs.push(o), "roster." + o.state === e.current.name && (n.subViewIndex = n.tabs.length - 1), "tap.index" === o.state && e.current.name.startsWith("roster.tap") && (n.subViewIndex = n.tabs.length - 1))
                }
            }

            function m(e) {
                n.groupId = e, n.profiles = l.getProfilesInGroup(n.groupId);
                for (var t = 0; t < n.profiles.length; t++)
                    if ("Guest" === n.profiles[t].firstName && n.profiles[t].isDefault) {
                        n.guestProfileObj = n.profiles[t], n.profiles.splice(t, 1);
                        break
                    } n.selectCtrl.initWith(n.profiles)
            }
            n.$watch("subViewIndex", function (t, o) {
                if (t !== o) {
                    var r = n.tabs[t].state;
                    e.go("roster." + r)
                }
            }), n.$watch(function () {
                return l.childProfiles
            }, function (e, t) {
                e !== t && m(n.groupId)
            }), g(), m(null), n.shouldShowGroupSelector = function () {
                return a.isEducator() && l.currentProfile.isParent
            }, n.selectGroup = m, n.refreshProfiles = function (e) {
                e = e || n.groupId, n.loading = !0, l.reloadProfiles().then(function (t) {
                    n.loading = !1, m(e)
                })
            }, n.refreshTabs = g
        }
        e.$inject = ["$state", "$location", "$stateParams", "$scope", "$window", "$mdMedia", "AccountService", "ProfileService", "ProfileEditService", "SelectCtrl", "Logsly", "BigQuery"], angular.module("epicApp").controller("EducatorRosterController", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u) {
            r.isEducator() && i.currentProfile.isParent && e.go("activities"), t.media = n, t.cdn = Globals.GLOBAL_CDN_BASE, t.accountService = r, t.profileService = i, t.selectCtrl = new l, t.showTeacherButtons = i.currentProfile.isParent && r.isEducator(), t.hasFetchedReadingLog = !0, t.server = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + i.currentProfile.id, t.getThemeImageUrl = a.getThemeImageUrl, t.themeImage = t.getThemeImageUrl(i.currentProfile.themeId), t.levelDataLib = s;
            var d = [{
                label: r.isEducator() ? "students" : "profiles",
                state: "profiles",
                condition: function () {
                    return i.currentProfile.isParent
                },
                notifications: function () {
                    if (t.profileService.childProfiles && r.isEducator()) {
                        var e = 0;
                        return angular.forEach(t.profileService.childProfiles, function (o) {
                            o.hasPendingLink && o.hasPendingLink() && !o.isOwnedByAccountId(t.profileService.currentProfile.accountId) && e++
                        }), e
                    }
                    return 0
                }
            }, {
                label: "activity",
                state: "activity",
                condition: function () {
                    return !0
                }
            }, {
                label: "quizzes",
                state: "quizzes",
                condition: function () {
                    return i.currentProfile.isParent && r.isEducator()
                }
            }, {
                label: "assignments",
                state: "assignments",
                condition: function () {
                    return i.currentProfile.isParent
                }
            }, {
                label: "achievements",
                state: "achievements",
                condition: function () {
                    return !i.currentProfile.isParent
                }
            }];

            function p() {
                t.tabs = [];
                for (var o = 0; o < d.length; o++) {
                    var n = d[o];
                    n.condition && !n.condition() || (t.tabs.push(n), "dashboard." + n.state === e.current.name && (t.subViewIndex = t.tabs.length - 1))
                }
            }

            function f(e) {
                t.groupId = e, t.profiles = i.getProfilesInGroup(t.groupId), t.selectCtrl.initWith(t.profiles)
            }
            t.$watch("subViewIndex", function (o, n) {
                if (o !== n) {
                    var r = t.tabs[o] && t.tabs[o].state;
                    r = r.replace(/student/gi, "profile"), e.go("dashboard." + r)
                }
            }), t.$watch(function () {
                return i.childProfiles
            }, function (e, o) {
                e !== o && f(t.groupId)
            }), t.$watch(function () {
                return i.currentProfile.themeId
            }, function (e, o) {
                e !== o && (t.themeImage = t.getThemeImageUrl(i.currentProfile.themeId))
            }), p(), f(null), t.saveActivityLog = function () {
                o.location.href = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + i.currentProfile.id
            }, t.shouldShowGroupSelector = function () {
                return r.isEducator() && i.currentProfile.isParent
            }, t.selectGroup = f, t.refreshProfiles = function (e) {
                e = e || t.groupId, t.loading = !0, i.reloadProfiles().then(function (o) {
                    t.loading = !1, f(e)
                })
            }, t.refreshTabs = p, t.goToReadingLog = function () {
                e.go("readingLog", {})
            }
        }
        e.$inject = ["$state", "$scope", "$window", "$mdMedia", "AccountService", "ProfileService", "ProfileEditService", "SelectCtrl", "levelDataLib", "Logsly", "BigQuery"], angular.module("epicApp").controller("ProfileController", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d) {
            if (Globals.GLOBAL_IS_AUTHED) {
                var p = r.childProfiles.length;
                l.log(l.events.PROFILE_SELECT_VIEW, {
                    child_count: p
                });
                for (var f, g = r.childProfiles, m = !1, h = p - 1; h > -1; h--) {
                    var v = g[h];
                    v.name && "my profile" == v.name.toLowerCase() && (f = !0), v.isProfilePendingTransfer() && (m = !0)
                }
                f && m && l.log(l.events.PROFILE_SELECT_MY_PROFILE_EXISTS, {});
                e.media = t, e.accountService = n, e.profileService = r, e.profileAccessService = u, e.currentProfileId = r.currentProfile.id, e.shouldShowGroups = function () {
                    if (!r.classroomGroups) return !1;
                    var e, t, o = r.classroomGroups.length;
                    for (e = 0; e < o; e++)
                        if ((t = r.classroomGroups[e]).userIds && t.userIds.length > 0) return !0;
                    return !1
                }(), e.signOut = function () {
                    return l.log(l.events.PROFILE_SELECT_SIGNOUT), l.signOut(), n.logout(), Promise.resolve()
                }, e.selectGroup = y, e.addChild = function () {
                    l.log(l.events.PROFILE_SELECT_ADD), s.start(s.NEW_PROFILE)
                }, e.routeToClassroomCode = function () {
                    n.logout(!0), i.location.href = Globals.GLOBAL_URL + "sign-in-student"
                }, e.localStorageService = a, e.cdn = Globals.GLOBAL_CDN_BASE, e.addChildImage = e.cdn + "website/assets/sign-in/add-child.svg", e.sortProfiles = C, r.passwordChecked = !!r.currentProfile.isParent, y(n.groupId), e.localStorageService.set("eduAccountSkipProfileSelect", !1), e.nameSearch = {
                    string: ""
                }, e.showProfile = E, e.clearProfileSearch = function () {
                    return e.nameSearch.string = "", void(e.showNoStudentsErrorFlag = !1)
                }, e.setNoStudentsError = function () {
                    for (var t = 0; t < e.profilesForNewLayout.length; t++) {
                        var o = e.profilesForNewLayout[t];
                        if (E(o)) return void(e.showNoStudentsErrorFlag = !1)
                    }
                    return void(e.showNoStudentsErrorFlag = !0)
                }, o.$on("reloadProfilesOnProfileSelect", function () {
                    r.reloadProfiles().then(function () {
                        y(n.groupId)
                    })
                });
                var b = c.getSessionStorageWithKey("dealToast");
                if (b) {
                    var S = "50_percent_off" === b ? "Great! You will get 50% off your next month of Epic!" : "Great! Your free trial has been extended by 30 Days!";
                    d.show({
                        hideDelay: 0,
                        position: "bottom right",
                        controller: "ToastTemplateController",
                        templateUrl: "toasts/toast-template/toast-template.html",
                        locals: {
                            title: "Special Offer Applied!",
                            desc: S,
                            imgPath: Globals.GLOBAL_CDN_BASE + "website/assets/app/toasts/home-access-character.svg",
                            classes: ["wide-toast-image"]
                        }
                    }), e.$on("$destroy", function () {
                        d.hide()
                    }), c.removeSessionStorageKey("dealToast")
                }
            } else i.location.href = Globals.GLOBAL_URL + "app/sign-in";

            function y(t) {
                t = t || null, n.currentGroupId = t, e.profilesForNewLayout = r.getProfilesInGroup(t), e.profilesForNewLayout.sort(C)
            }

            function C(e, t) {
                var o = e.name.toUpperCase(),
                    n = t.name.toUpperCase();
                return 1 === e.accountType && e.isDefault && "Guest" === e.firstName ? 1 : 1 === t.accountType && t.isDefault && "Guest" === t.firstName ? -1 : o > n ? 1 : o < n ? -1 : 0
            }

            function E(t) {
                var o = t.firstName.length > 0 && t.lastName.length > 0 ? "".concat(t.firstName, " ").concat(t.lastName) : t.name;
                return (o = o.toUpperCase()).startsWith(e.nameSearch.string.toUpperCase())
            }
        }
        e.$inject = ["$scope", "$mdMedia", "$rootScope", "AccountService", "ProfileService", "$window", "LocalStorageService", "BigQuery", "NufNewService", "SessionStorageService", "ProfileAccessService", "$mdToast"], angular.module("epicApp").controller("ProfileSelectCtrl", e)
    }(), angular.module("epicApp").controller("ReadingLogController", ["$scope", "$state", "$stateParams", "$window", "Data", "ProfileService", "BookService", "BookPresentationsLogger", "$interval", "$timeout", "$rootScope", "BigQuery", function (e, t, o, n, r, i, a, l, s, c, u, d) {
        d.log(d.events.READING_LOG_VIEW), e.profileId = 0, t.params.id ? e.profileId = t.params.id : i.currentProfile.id && (e.profileId = i.currentProfile.id, e.title = i.currentProfile.name + "’s Recent Reads"), e.displayName = "Student", e.title = "", e.logData = {}, e.logEntryCount = 0, e.datesDisplayed = 1, e.startDate = 0, e.readingLogsLoading = !0, e.saveReadingLogPath = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + e.profileId, e.cdn = Globals.GLOBAL_CDN_BASE, e.getBookImageUrl = a.thumbPath, e.formatReadTime = i.formatReadTime, e.openBook = function (e, t) {
            a.openBook(e);
            var o = {};
            o.index = t, o.rowIndex = t, o.section = m[t].title, o.contentType = h(t), l.addOpenedContentData(e.modelId, "reading-log", o)
        }, e.$watch(function () {
            return i.currentProfile.id
        }, function (o, n) {
            t.params.id || o == n || (e.profileId = i.currentProfile.id, e.title = i.currentProfile.name + "'s Reading Log", e.saveReadingLogPath = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + i.currentProfile.id, e.getLogData())
        }), e.getLogData = function () {
            return e.readingLogsLoading = !0, r.get("WebUser", "getLogEntries", {
                userId: e.profileId,
                startDate: e.startDate
            }).then(function (t) {
                if (t.result) {
                    if (t.result.alert_message) n.history.back(), n.alert(t.result.alert_message);
                    else if (t.result.log) {
                        t.result.name && (e.title = t.result.name + "’s Reading Log", e.displayName = t.result.name);
                        var o = 0,
                            r = e.logData;
                        for (var i in t.result.log) {
                            for (var a = [], s = 0; s < t.result.log[i].logEntries.length; s++) {
                                var c = t.result.log[i].logEntries[s];
                                c.book && 4 !== c.book.type && a.push(c)
                            }
                            if (a.length > 0) {
                                t.result.log[i].logEntries = a, o += a.length;
                                var d = a[a.length - 1];
                                e.startDate > 0 ? e.startDate = Math.min(e.startDate, d.date) : e.startDate = d.date, r[i] = t.result.log[i]
                            } else e.noLogActivity = !0
                        }
                        e.logEntryCount += o, e.datesDisplayed = Math.max(e.datesDisplayed, Object.keys(r).length), e.logData = r,
                            function () {
                                var t;
                                (t = e.logData, m = Object.keys(t).sort(function (e, t) {
                                    return e + t
                                }).reduce(function (e, o) {
                                    return t[o].logEntries.forEach(function (e) {
                                        e.title = t[o].title
                                    }), e = e.concat(t[o].logEntries)
                                }, [])).length > 0 && l.getRenderedDomElements("readinglog-row").then(function (e) {
                                    p = e, v()
                                }).catch(function (e) {})
                            }(), l.setScrollWatchers(!0);
                        var f = u.$on("vertical-scroll", function () {
                            v()
                        });
                        e.$on("$destroy", function () {
                            f(), l.destroyScrollWatchers()
                        })
                    }
                } else console.warn("Problem getting reading log data")
            }).then(function () {
                e.readingLogsLoading = !1
            })
        }, e.profileId && e.getLogData(), e.readingLogsAvailable = function () {
            return Object.keys(e.logData).length > 0
        };
        var p = [],
            f = null,
            g = [],
            m = null;

        function h(e) {
            return m && e ? 4 === m[e].book.type ? "video" : 2 === m[e].book.type ? "audiobook" : 5 === m[e].book.type ? "quiz" : "book" : null
        }

        function v() {
            if (p)
                for (var e, t = 0; t < p.length; t++)
                    if (e = g.findIndex(function (e) {
                            return e[0] === m[t].book.modelId && e[2] === t
                        }), l.getElementIsInWindow(p[t])) {
                        var o = {};
                        o.index = t, o.rowIndex = t, o.contentType = h(t), o.section = m[t].title, e >= 0 ? 0 !== g[e][1] && Date.now() - g[e][1] > 1e4 ? (l.addViewedContentData(m[t].book.modelId, "reading_log", o), g[e][1] = Date.now()) : g[e][1] = 0 : (l.addViewedContentData(m[t].book.modelId, "reading_log", o), f = [m[t].book.modelId, 0, t], g.push(f))
                    } else g = l.addressBookViewsArrayItemsNotInWindow(e, g)
        }
    }]),
    function () {
        function e(e, t, o, n) {
            var r = this;
            r.userIsStudentOrChild = function () {
                return "child" === e.currentProfile.userType || "student" === e.currentProfile.userType
            }, r.toggleFavoriteContent = function () {
                var e = r.bookMeta.data;
                e.favorited = !e.favorited, "playlistData" === r.bookMeta.objectType ? t.toggleCollectionFavorite(e.id || e.modelId, e.title, e.favorited).then(function (t) {
                    t && t.result && (e.favorited = t.result.favorited)
                }) : t.toggleContentFavorite(e.id || e.modelId, e.title, e.favorited, e.type, !1, "search_row").then(function (e) {
                    r.toggleFavoriteInCurrentScopeSearchResults && r.toggleFavoriteInCurrentScopeSearchResults()
                })
            }, r.addContentToCollection = function (e) {
                var t = [{
                    id: e.id || e.modelId,
                    title: e.title
                }];
                o.displayAddBookToCollectionModal(t), n.log(n.events.COLLECTION_START_SEARCH_ONE, {
                    book_id: e.id || e.modelId
                })
            }, r.iconsSrc = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/system-icons/", r.showTooltips = {
                collection: !1,
                favorite: !1
            }
        }
        e.$inject = ["ProfileService", "FavoriteService", "CollectionService", "BigQuery"], angular.module("epicApp").component("searchAddTo", {
            templateUrl: "search/search-add-to.html",
            controller: e,
            bindings: {
                bookMeta: "<",
                featured: "<",
                toggleFavoriteInCurrentScopeSearchResults: "&?"
            }
        })
    }(), angular.module("epicApp").directive("searchColumnHeader", function () {
        return {
            restrict: "E",
            templateUrl: "search/search-column-header.html",
            scope: {
                label: "<",
                sortByProp: "&",
                sortOrderColumn: "<",
                sortOrder: "<",
                sortColumnNumber: "<"
            },
            replace: !0,
            link: function (e, t, o) {
                e.getLayoutAlign = function () {
                    return "center center"
                }
            }
        }
    }),
    function () {
        function e(e, t) {
            this.bookService = e, this.searchService = t, this.getContentImageUrl = e.thumbPath
        }
        e.$inject = ["BookService", "SearchService"], angular.module("epicApp").component("searchResultFeatured", {
            templateUrl: "search/search-result-featured.html",
            controller: e,
            bindings: {
                fullSectionData: "<",
                rowIndex: "<",
                filtersSet: "&",
                clearFiltersAndSearch: "&",
                openContent: "&",
                format: "<",
                tabClicked: "&",
                section: "<",
                featured: "<",
                toggleFavoriteInCurrentScopeSearchResults: "&?"
            }
        })
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            var l = this;

            function s(e) {
                return e && e.data ? 5 === e.data.type ? "quiz" : 4 === e.data.type ? "video" : 2 === e.data.type ? "audiobook" : 1 === e.data.type && e.data.audio ? "read-to-me" : "book" : null
            }
            l.abTestService = a, l.profileService = n, l.getContentImageUrl = t.thumbPath, l.openContent = function (n, a) {
                r.log(r.events.SEARCH_CONTENT_OPENED, {
                    search_term: i.searchText,
                    search_type: i.getSearchType(),
                    tab: i.currentTabName,
                    row_number: l.rowIndex || -1,
                    index_number: l.index,
                    content_type: s(n)
                }), 5 == n.data.type ? o.openQuiz(n.data) : n.data.type ? t.openBook(n.data) : e.go("user-collection", {
                    collectionId: n.data.modelId
                })
            }, l.formatDuration = function (e) {
                var t = Math.floor(e / 60),
                    o = e % 60;
                t < 10 && (t = "0" + t);
                o < 10 && (o = "0" + o);
                return t + ":" + o
            }, l.hideDetailPanel = function () {
                l.shouldShowDetail = !1
            }, l.shouldShowDetail = !1, l.searchService = i, l.toggleSelectItem = function (e) {
                if (!e.objectId) return;
                var t = e.objectId;
                i.selectedResults.hasOwnProperty(t) ? delete i.selectedResults[t] : i.selectedResults[t] = e;
                bbb(i.selectedResults)
            }, l.checkSelectedItem = function (e) {
                var t = e.objectId;
                return i.selectedResults.hasOwnProperty(t)
            }, l.viewsImgSrc = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/icon-eye.svg"
        }
        e.$inject = ["$state", "BookService", "StandaloneQuiz", "ProfileService", "BigQuery", "SearchService", "ABTestService"], angular.module("epicApp").component("searchResultItem", {
            templateUrl: "search/search-result-item.html",
            controller: e,
            bindings: {
                bookMeta: "<",
                format: "<",
                index: "<",
                rowIndex: "<",
                rowTitle: "<",
                section: "<",
                featured: "<",
                toggleFavoriteInCurrentScopeSearchResults: "&?"
            }
        })
    }(),
    function () {
        function e(e) {
            return {
                restrict: "E",
                scope: {
                    shouldShowDetail: "<",
                    content: "<"
                },
                replace: !0,
                templateUrl: "search/search-result-mouseover.html",
                link: function (t, o, n) {
                    t.bookService = e
                }
            }
        }
        e.$inject = ["BookService"], angular.module("epicApp").directive("searchResultMouseover", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            var a = this;
            a.bookService = e, a.profileService = t, a.searchService = o, a.abTestService = i, a.goToSection = function () {
                o.tabClicked(o.getCorrespondingSectionTab(a.fullSectionData))
            }, a.displayContentLimit = 1 / 0, a.rowIndex = 0 | a.rowIndex, a.showDetailCardsSections = ["Books", "Videos", "Read-To-Me", "Audiobooks"], a.logContentOpen = function (e, t) {
                var n = null;
                t && (n = 5 === t.type ? "quiz" : 4 === t.type ? "video" : 2 === t.type ? "audiobook" : 1 === t.type && t.audio ? "read-to-me" : "book");
                var i = {
                    search_term: o.searchText,
                    search_type: o.getSearchType(),
                    tab: o.currentTabName,
                    row_number: a.rowIndex || -1,
                    index_number: e,
                    content_type: n
                };
                r.log(r.events.SEARCH_CONTENT_OPENED, i)
            };
            var l = function () {
                a.displayContentLimit = function () {
                    if ("ALL" !== o.currentTabName) return 1 / 0;
                    var e, t = angular.element(".search-grid-results").eq(a.rowIndex);
                    if (0 !== t.length && (e = t.css("grid-template-columns"))) return 2 * e.split(" ").length;
                    return 1 / 0
                }()
            };
            a.$onInit = function () {
                a.numContentTotal = a.fullSectionData.searchResultSection.searchResultsData.length, angular.element(n).on("resize", l)
            }, a.$doCheck = function (e) {
                l()
            }, a.$onDestroy = function () {
                angular.element(n).off("resize", l)
            }
        }
        e.$inject = ["BookService", "ProfileService", "SearchService", "$window", "BigQuery", "ABTestService"], angular.module("epicApp").component("searchResultSectionDetail", {
            templateUrl: "search/search-result-section-detail.html",
            controller: e,
            bindings: {
                fullSectionData: "<",
                rowIndex: "<"
            }
        })
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            var l = this;
            l.bookService = n, l.ABTestService = a, l.getContentImageUrl = n.thumbPath, l.getResultItemClasses = function () {
                var e = "";
                "cards" === l.format && ("wide" === u() && (e = " wide-cards"), "featured" === u() && (e = " featured-card"), "featured" !== u() && (t("(min-width: 500px)") && t("(max-width: 800px)") ? e = e.concat(" sm") : t("(min-width: 800px)") && t("(max-width: 960px)") ? e = e.concat(" med") : t("gt-sm") && (e = e.concat(" lg"))));
                return e
            }, l.contentItemsLimit = 1 / 0, l.goToSection = function () {
                l.tabClicked()
            }, l.profileService = r, l.searchService = i;
            var s = function () {
                l.contentItemsLimit = d()
            };

            function c() {
                return l.fullSectionData.searchResultSection.objectTypes[0]
            }

            function u() {
                return l.featured ? "featured" : "videoBookData" === c() || "quizBookData" === c() || "playlistData" === c() ? "wide" : "regular"
            }

            function d() {
                return "cards" === l.format && "ALL" === l.section ? "playlistData" === c() ? 10 : t("gt-sm") ? "regular" === u() ? 12 : 8 : t("sm") ? "regular" === u() ? 8 : 6 : "regular" === u() ? 4 : 2 : 1 / 0
            }
            l.$onChanges = function (e) {
                l.contentItemsLimit = d()
            }, l.$onInit = function () {
                l.sectionDataLength = l.fullSectionData && l.fullSectionData.searchResultSection ? l.fullSectionData.searchResultSection.searchResultsData.length : 1, l.contentItemsLimit = d(), angular.element(o).on("resize", s)
            }, l.$onDestroy = function () {
                angular.element(o).off("resize", s)
            }
        }
        e.$inject = ["$element", "$mdMedia", "$window", "BookService", "ProfileService", "SearchService", "ABTestService"], angular.module("epicApp").component("searchResultSection", {
            templateUrl: "search/search-result-section.html",
            controller: e,
            bindings: {
                fullSectionData: "<",
                filtersSet: "&",
                clearFiltersAndSearch: "&",
                openContent: "&",
                format: "<",
                rowIndex: "<",
                tabClicked: "&",
                section: "<",
                featured: "<",
                toggleFavoriteInCurrentScopeSearchResults: "&?"
            }
        })
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d) {
            function p(e) {
                return document.getElementById(e) ? i(function () {
                    return document.getElementById(e)
                }, 0) : i(function () {
                    return p(e)
                }, 500)
            }
            e.searchService = a, e.abTestService = l, e.profileService = c, e.resultsDisplay = "cards", e.iconsSrc = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/system-icons/", e.cdnPath = Globals.GLOBAL_CDN_BASE, e.setSearchText = function (o, n) {
                    p("search_input_value").then(function () {
                        o ? t.$broadcast("angucomplete-alt:changeInput", "search_input", o) : t.$broadcast("angucomplete-alt:clearInput"), e.searchService.searchTextChanged(o, n, null, !0)
                    })
                }, e.chooseResultsView = function (t) {
                    if ("rows" === t) n.log(n.events.SEARCH_LIST_VIEW);
                    else {
                        if ("cards" !== t) return;
                        n.log(n.events.SEARCH_COVER_VIEW)
                    }
                    e.resultsDisplay = t;
                    var o = s.get("searchViewType") || {};
                    o[c.currentProfile.id] = t, s.set("searchViewType", o)
                }, e.checkCloseFilters = function () {
                    c.currentProfile.isParent && a.closeAllFilters()
                }, e.iconsSrc = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/system-icons/",
                function () {
                    n.log(n.events.NAVIGATION_SEARCH), a.restoreSearchText(a.searchText), t.$on("$stateChangeStart", function () {
                        t.$broadcast("angucomplete-alt:clearInput")
                    }), u.getFavorites().then(function () {
                        a.init()
                    }), p("search_input_value").then(function (e) {}), o.term && e.setSearchText(o.term);
                    r.setScrollWatchers(!0), e.$on("$destroy", function () {
                        r.destroyScrollWatchers(), t.$broadcast("angucomplete-alt:clearInput")
                    });
                    var i = s.get("searchViewType") || {};
                    i.hasOwnProperty(c.currentProfile.id) && (e.resultsDisplay = i[c.currentProfile.id])
                }(), e.formatTabName = function (e) {
                    if (e) {
                        var t = e.split("-");
                        return (t = t.map(function (e) {
                            return e[0] + e.substring(1).toLowerCase()
                        })).join("-")
                    }
                }, e.showReadingLevelConversionsChart = function () {
                    d.open({
                        templateUrl: "modals/reading-level-conversions-chart/reading-level-conversions-chart.html",
                        controller: "ReadingLevelConversionsChartController",
                        controllerAs: "ctrl",
                        size: "lg",
                        keyboard: !1
                    })
                }, e.logSortDropdown = function (e, t) {
                    n.log(n.events.SEARCH_SORT_CHANGED, {
                        sortType: e,
                        sortLabel: t,
                        dropdown: !0
                    })
                }
        }
        e.$inject = ["$scope", "$rootScope", "$stateParams", "BigQuery", "BookPresentationsLogger", "$timeout", "SearchService", "ABTestService", "LocalStorageService", "ProfileService", "FavoriteService", "$modal"], angular.module("epicApp").controller("SearchController", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            e.media = n, 1 === Globals.GLOBAL_IS_AUTHED && "signIn" === o.current.name && o.go("profileSelect"), e.signInStudent = function () {
                t.location.href = Globals.GLOBAL_URL + "sign-in-student"
            }, e.sendToAccountType = function () {
                Globals.GLOBAL_MSPWA ? t.location.href = Globals.GLOBAL_URL + "app/personalize_educator_welcome?educator=true" : t.location.href = Globals.GLOBAL_URL + "app/personalize_account_type"
            }
        }
        e.$inject = ["$scope", "$window", "$state", "$mdMedia", "AccountService"], angular.module("epicApp").controller("SignInController", e)
    }(), angular.module("epicApp").controller("TapMainCtrl", ["$scope", "$state", "$timeout", "$modal", "Data", "AccountService", "ProfileService", "ProfileEditService", "TapService", "CopyToClipboardService", "BigQuery", function (e, t, o, n, r, i, a, l, s, c, u) {
        e.refreshTabs(), e.$watch(function () {
            i.email && a.initialized && (i.isEducator() && a.currentProfile.isParent || t.go("browse"))
        }), e.profileService = a, e.tapService = s, e.stateService = t, Promise.all([s.refreshTapFunds(), s.refreshTapGiftCardCatalog()]).then(function (e) {
            s.setShouldEnableRedeemOption()
        }), s.getClassroomCode();
        var d = "website/educator-resources/flyers/K5AppStudentFlyerBTS2018.pdf";
        r.get("WebAccount", "noAuthGetAccountEducatorInfoByUser", {
            userId: a.parentProfile.id
        }).then(function (e) {
            if (e && e.result) {
                var t = e.result.grade;
                d = t < 3 ? "website/educator-resources/flyers/K2AppStudentFlyerBTS2018.pdf" : "website/educator-resources/flyers/35AppStudentFlyerBTS2018.pdf"
            }
        }), e.goToDashboard = function () {
            t.go("roster.tap.index")
        }, e.getProfileGroupPercentageByState = function (e) {
            if (!s.tapStudentProfiles) return "0%";
            var t = s.tapStudentProfiles.length,
                o = s.filterProfilesByConnectionState(e).length;
            return parseInt(o / t * 100) + "%"
        }, e.enableHomeAccess = function (e) {
            e.id = parseInt(e.id || e.modelId), l.showEnableHomeAccess(e).then(function () {
                s.refereshTapStudentProfiles()
            })
        }, e.openAddEmailModal = function () {
            n.open({
                templateUrl: "modals/add-student-emails/add-student-emails-modal.html",
                controller: "AddStudentEmailsController",
                size: "lg",
                keyboard: !1,
                scope: e
            })
        }, e.copyConnectCodeToClipboard = function (t) {
            c.copy(t), e.showCopied = !0, o(function () {
                e.showCopied = !1
            }, 2e3)
        }, e.getLetterCdnUrl = function () {
            return Globals.GLOBAL_URL + "epic-reading-club-parent-flyer?classroom_code=" + i.accountLoginCode + "&educator_name=" + a.currentProfile.name
        }, e.getFlyerCdnUrl = function () {
            return Globals.GLOBAL_CDN_BASE + d
        }, e.openInviteParents = function () {
            var t = e.$new(!0);
            n.open({
                template: "<invite-parents-modal></invite-parents-modal>",
                scope: t
            })
        }, e.logBQ = function (e) {
            u.events.hasOwnProperty(e) ? u.log(u.events[e], {
                pt_total: s.tapFunds
            }) : bbb("BigQuery does not have that event constant. Add it!")
        }
    }]),
    function () {
        function e(e, t, o, n, r) {
            function i(e) {
                var t = o("toDate")(r.status.expiration),
                    i = o("subscriptionStatus")(r.status.display);
                n.log(e, {
                    renew_date: t,
                    membership_status: i
                })
            }
            e.continue = function () {
                i(n.events.ACCOUNT_SUBSCRIPTION_CONTINUE_AGAIN), t.go("unsubscribe.feedback")
            }, e.changedMind = function () {
                i(n.events.ACCOUNT_SUBSCRIPTION_CHANGE_MIND), t.go("accountManage")
            }
        }

        function t(e, t, o, n, r, i, a, l) {
            var s;
            e.formData = {
                feedback: "",
                reason: null
            }, e.cancelOptions = [{
                key: "missing_popular_titles",
                title: "Didn't have the popular titles we were looking for"
            }, {
                key: "budget",
                title: "$" + r.PRICE + "/month doesn't fit in our budget"
            }, {
                key: "prefer_paper_books",
                title: "My child prefers paper books"
            }, {
                key: "pausing_sub",
                title: "Just pausing the subscription, we'll be back later!"
            }, {
                key: "difficult_to_use",
                title: "We found it difficult to use"
            }, {
                key: "limited_acces_to_device",
                title: "My child has limited access to devices that use Epic!"
            }, {
                key: "different_service",
                title: "We use a different service which suits our needs better (please specify)",
                otherField: "Other Service:"
            }, {
                key: "other",
                title: "Other (please leave feeback below)"
            }], e.selectReason = function (t) {
                e.selectedReason = t, e.formData.cancelReason = t.key, e.formData.cancelReasonOther = null
            };
            var c = a("toDate")(n.status.expiration),
                u = a("subscriptionStatus")(n.status.display);
            e.unsub = function () {
                if (!s) {
                    s = !0;
                    var r = {
                        feedback: e.formData.feedback || ""
                    };
                    e.formData.cancelReason && (r.cancelReason = e.formData.cancelReason), e.formData.cancelReasonOther && (r.cancelReasonOther = e.formData.cancelReasonOther), o.post("WebAccount", "submitFeedback", r).then(function (e) {}), l.log(l.events.ACCOUNT_SUBSCRIPTION_CANCEL_REASON, {
                        renew_date: c,
                        membership_status: u,
                        reason: e.formData.cancelReason
                    }), o.post("WebAccount", "cancelStripeSubscription").then(function (e) {
                        if (e && e.success) {
                            n.checkSubscriptionStatus(!0).then(function () {
                                t.go("unsubscribe.success")
                            }).catch(function (e) {
                                bbb(e)
                            })
                        }
                    })
                }
            }, e.changedMind = function () {
                l.log(l.events.ACCOUNT_SUBSCRIPTION_CANCEL_REASON_CHANGE_MIND, {
                    renew_date: c,
                    membership_status: u
                }), t.go("accountManage")
            }
        }
        e.$inject = ["$scope", "$state", "$filter", "BigQuery", "SubscriptionService"], t.$inject = ["$scope", "$state", "Data", "SubscriptionService", "SiteConstants", "Logsly", "$filter", "BigQuery"], angular.module("epicApp").controller("UnsubscribeMissionCtrl", e).controller("UnsubscribeFeedbackCtrl", t).controller("UnsubscribeSuccessCtrl", function () {})
    }(), angular.module("epicApp").controller("UserCollectionController", ["$scope", "$rootScope", "$state", "$stateParams", "$location", "$window", "$modal", "$mdToast", "$timeout", "Data", "AccountService", "ProfileService", "JewelService", "FavoriteService", "StringService", "ShareContentService", "BookPresentationsLogger", "Logsly", "CollectionService", "BigQuery", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f, g, m, h, v, b, S) {
        h.setScrollWatchers(!0), e.$on("$destroy", h.destroyScrollWatchers), b.logCollectionEvent(n.collectionId, S.events.COLLECTION_VIEW), e.collection = {}, e.userIsOwner = !1, e.liked = 0, e.pinterestImageUrl = encodeURIComponent(Globals.GLOBAL_URL + "collection-image/" + n.collectionId + ".jpg"), e.achievementData = null, e.achievementIcon = null, e.achievementProgress = null, e.negativeAchievementProgress = null, e.backIconPath = Globals.GLOBAL_CDN_BASE + "website/assets/app/shared-elements/system-icons/icn-back-grey.png", e.truncatedDescriptionLength = 300, e.cdn = Globals.GLOBAL_CDN_BASE, e.profileData = d, e.stringService = g, e.accountService = u, e.shareContentService = m, e.numRequired = null, e.coinMarkers = [{
            url: "".concat(e.cdn, "crc/coins/coin1.png")
        }, {
            url: "".concat(e.cdn, "crc/coins/coin2.png")
        }, {
            url: "".concat(e.cdn, "crc/coins/coin3.png")
        }, {
            url: "".concat(e.cdn, "crc/coins/coin4.png")
        }, {
            url: "".concat(e.cdn, "crc/coins/coin5.png")
        }];
        var y = function () {
            var t = {
                userId: d.currentProfile.id,
                contentType: "Collection",
                contentId: n.collectionId
            };
            c.get("WebFeedback", "getRating", t).then(function (t) {
                e.feedback = t.result, e.feedback.likes = t.result.upVotes, e.liked = t.result.myVote
            })
        };

        function C(t) {
            return e.numRequired = t.numRequired, e.progressType = 5 === t.numRequired ? "coin" : "bar", "coin" === e.progressType && (e.coinMarkers = function (t) {
                return e.coinMarkers.map(function (o, n) {
                    return t && t.bookIds ? (o.url = n + 1 <= t.bookIds.length ? "".concat(e.cdn, "crc/coins/coin").concat(n + 1 + "_done", ".png") : o.url, o) : o
                })
            }(t)), t && t.numRequired && t.bookIds ? t.bookIds.length / t.numRequired * 100 : t && !t.bookIds ? 0 : void bbb("no bookIds Array!")
        }
        t.$on("book.finished", function () {
            e.achievementData && c.get("WebPlaylist", "getPlaylistAndBooksData", {
                playlistId: n.collectionId
            }).then(function (t) {
                if (t.result.Achievement) {
                    e.achievementProgress = C(t.result.Achievement);
                    var o = 100 === e.achievementProgress ? "".concat(e.cdn, "/achievements/").concat(t.result.Achievement.achievementId, ".png") : "".concat(e.cdn, "/achievements/").concat(t.result.Achievement.achievementId, "-locked.png");
                    e.achievementData = t.result.Achievement, e.achievementIcon = o, e.negativeAchievementProgress = 100 - e.achievementProgress
                }
            })
        }), c.get("WebPlaylist", "getPlaylistAndBooksData", {
            playlistId: n.collectionId
        }).then(function (t) {
            if (t.result && t.result.simpleBookData) {
                if (t.result && t.result.bgImageLarge && (e.collectionBanner = t.result.bgImageLarge), t.result.Achievement) {
                    e.achievementProgress = C(t.result.Achievement);
                    var r = 100 === e.achievementProgress ? "".concat(e.cdn, "/achievements/").concat(t.result.Achievement.achievementId, ".png") : "".concat(e.cdn, "/achievements/").concat(t.result.Achievement.achievementId, "-locked.png"),
                        i = "".concat(e.cdn, "crc/crc_WackyAdvntr1170x266@2x.gif");
                    e.achievementData = t.result.Achievement, e.achievementIcon = r, e.hardCodedChallengeBanner = i, e.negativeAchievementProgress = 100 - e.achievementProgress
                }
                e.collection = t.result, e.pinterestLinkUrl = encodeURIComponent(Globals.GLOBAL_URL + "collection/" + n.collectionId + "/" + g.getSEOFriendlyString(e.collection.title) + "?source=pinterest&medium=social&campaign=collections"), e.collection.videoItems = [], e.collection.bookItems = [], e.collection.quizItems = [], e.collection.description = e.collection.description || e.collection.autoDescription || "", e.pinterestText = encodeURIComponent(e.collection.title + " - " + g.truncate(e.collection.description, 150)), e.collection.simpleBookData.forEach(function (t, o) {
                    5 === t.type ? e.collection.quizItems.push(t) : 4 === t.type ? e.collection.videoItems.push(t) : e.collection.bookItems.push(t)
                }), e.collection.viewed || e.userIsOwner || c.get("WebPlaylist", "viewPlaylistAssignment", {
                    playlistId: e.collection.id
                }).then(function (e) {
                    e.result && p.decrement("unviewedAssignments")
                })
            } else console.warn("Problem getting collection data"), o.go("browse");
            y()
        }), e.$watch(function () {
            return {
                profileId: d.currentProfile.id,
                collectionOwnerId: e.collection.owner_id
            }
        }, function (t, o) {
            !e.f && t.profileId && t.collectionOwnerId && t.profileId === t.collectionOwnerId && (e.userIsOwner = !0)
        }, !0), t.$on("book.finished", function () {
            e.lastcontentOpenedId && (e.collection.completedBookIds || (e.collection.completedBookIds = []), e.collection.completedBookIds.push(e.lastcontentOpenedId))
        }), e.openCollectionEditModal = function () {
            b.logCollectionEvent(n.collectionId, S.events.COLLECTION_EDIT, {
                source: "collection"
            });
            var t = e.$new(!0);
            t.collection = e.collection, a.open({
                template: "<collection-edit></collection-edit>",
                scope: t,
                size: "sm"
            }).result.then(function (t) {
                if ("update" === t) l.show({
                    hideDelay: 3e3,
                    position: "bottom right",
                    controller: "CollectionUpdateToastController",
                    templateUrl: "toasts/collection-update/collection-update.html",
                    locals: {
                        collection: e.collection
                    }
                });
                else if ("delete" === t) {
                    var n = e.$new(!0);
                    a.open({
                        template: "<collection-delete></collection-delete>",
                        scope: n,
                        size: "sm"
                    }).result.then(function (t) {
                        t && o.go("my-library.collections", {
                            deferredDeletedCollection: e.collection
                        })
                    })
                }
            })
        }, e.isTeacher = function () {
            return u.isEducator() && d.currentProfile.isParent
        }, e.canShare = function () {
            return e.userType = d.currentProfile.userType, "teacher" === e.userType || "parent" === e.userType
        }, e.openLessonPlanModal = function () {
            var t = e.$new(!0);
            t.collection = e.collection, t.collection.lesson_plan || (t.collection.lesson_plan = ""), t.isEditable = e.userIsOwner, a.open({
                templateUrl: "modals/collection-lesson-plan/collection-lesson-plan.html",
                scope: t,
                controller: "LessonPlanModalController"
            })
        }, e.openAssignCollection = function () {
            b.displayAssignModal(e.collection), b.logCollectionEvent(e.collection.id, S.events.COLLECTION_ASSIGN, {
                source: "collection"
            })
        }, e.openCollectionInfo = function () {
            var t = e.$new(!0);
            t.collection = e.collection, t.likes = e.feedback.likes, a.open({
                templateUrl: "modals/collection-info/collection-info.html",
                scope: t,
                controller: "CollectionInfoModalController"
            })
        }, e.openShareModal = function () {
            var t = e.$new(!0);
            t.collection = e.collection, a.open({
                templateUrl: "modals/collection-sharing/share-collection/share-collection-modal.html",
                scope: t,
                controller: "ShareCollectionModalController"
            })
        }, e.openShareMenu = function (t, o) {
            t(o), b.logCollectionEvent(e.collection.id, S.events.COLLECTION_SHARE, {
                source: "collection"
            })
        }, e.showSharePinterestForCollection = function (e) {
            for (var t = e.simpleBookData || [], o = 0; o < t.length; o++)
                if (t[o].type && 5 === t[o].type) return !1;
            return !0
        }, e.openPinterestUrl = function () {
            var t = "http://pinterest.com/pin/create/button/?url=" + e.pinterestLinkUrl + "&media=" + e.pinterestImageUrl + "&description=" + e.pinterestText;
            m.openPinterestUrl(t, e.collection.id, "collection")
        }, e.favoriteCollection = function () {
            var t = e.collection;
            t.favorited = !t.favorited, t.favorited && b.logCollectionEvent(n.collectionId, S.events.COLLECTION_FAVORITE), f.toggleCollectionFavorite(t.id, t.title, t.favorited)
        }, e.cloneCollection = function () {
            if (!0 !== e.collectionBeenCloned) {
                b.logCollectionEvent(e.collection.id, S.events.COLLECTION_COPY_COLLECTION);
                var t = e.$new(!0);
                t.collection = e.collection, a.open({
                    template: "<collection-copy></collection-copy>",
                    scope: t
                }).result.then(function (t) {
                    t && (e.collectionBeenCloned = !0, l.show({
                        hideDelay: 5e3,
                        position: "bottom right",
                        controller: "CollectionCopyToastController",
                        templateUrl: "toasts/collection-copy/collection-copy.html",
                        locals: {
                            collection: t
                        }
                    }))
                })
            }
        }, e.likeCollection = function () {
            e.liked = 1 === e.liked ? 0 : 1, e.liked && b.logCollectionEvent(n.collectionId, S.events.COLLECTION_LIKE);
            var t = {
                userId: d.currentProfile.id,
                contentType: "Collection",
                contentId: n.collectionId,
                rating: e.liked
            };
            c.get("WebFeedback", "rateContent", t).then(function (e) {
                y()
            })
        }, e.saveLastOpenedContent = function (t) {
            e.lastcontentOpenedId = parseInt(t.modelId || t.id)
        }, e.booksRemovedStack = [], e.removeFromCollection = function (t, n, r) {
            if (e.collection.bookItems.length + e.collection.videoItems.length + e.collection.quizItems.length === 1) {
                var i = e.$new(!0);
                a.open({
                    template: "<collection-delete></collection-delete>",
                    scope: i,
                    size: "sm"
                }).result.then(function (t) {
                    t && o.go("my-library.collections", {
                        deferredDeletedCollection: e.collection
                    })
                })
            } else e.booksRemovedStack.push(e.collection[t].splice(n, 1)[0]), l.show({
                hideDelay: 5e3,
                position: "bottom right",
                controller: "CollectionRemoveToastController",
                templateUrl: "toasts/collection-remove/collection-remove.html",
                locals: {
                    item: r
                }
            }).then(function (o) {
                if (o) {
                    var r = e.booksRemovedStack.pop();
                    e.collection[t].splice(n, 0, r)
                } else {
                    var i = {
                        playlistId: e.collection.id
                    };
                    if (e.booksRemovedStack.length > 1) {
                        var a = e.booksRemovedStack.slice(0, -1).map(function (e) {
                            return e.modelId
                        });
                        e.booksRemovedStack = e.booksRemovedStack.slice(-1), i.bookIds = JSON.stringify(a), c.post("WebPlaylist", "removeBooksFromPlaylist", i).then(function (e) {})
                    } else 1 === e.booksRemovedStack.length && (i.bookId = e.booksRemovedStack[0].modelId, c.post("WebPlaylist", "removeBookFromPlaylist", i).then(function (e) {}))
                }
            })
        }, e.showCompleteStamp = function (t) {
            var o = e.collection.completedBookIds || [];
            return !e.userIsOwner && o.indexOf(parseInt(t.modelId)) > -1
        }, e.getCollectionAgeRange = function () {
            var t = e.collection.age_range_min,
                o = e.collection.age_range_max;
            return t === o ? t : t + "–" + o
        }, e.getCollectionDescription = function () {
            var t = e.collection;
            return e.showFullDescription ? t.description : e.stringService.truncate(t.description, e.truncatedDescriptionLength)
        }, e.descriptionMoreButtonIsHidden = function () {
            return e.showFullDescription || e.collection.description.length < e.truncatedDescriptionLength
        }, e.toggleShowFullDescription = function () {
            e.showFullDescription = !e.showFullDescription
        }, e.historyBack = function () {
            i.history.back()
        }, e.collection.videoItems = [], e.collection.bookItems = [], e.collection.quizItems = [], e.getRowIndex = function (t) {
            var o = e.collection.bookItems.length,
                n = e.collection.videoItems.length;
            return e.collection.quizItems.length, "bookItems" === t ? 0 : "videoItems" === t ? o ? 1 : 0 : o && n ? 2 : o || n ? 1 : 0
        }
    }]),
    function () {
        function e(e, t, o, n, r, i, a) {
            e.eduSignUpService = o, e.formCreateData = {
                accountEmail: null,
                accountPassword: null
            }, e.errorMessages = {
                validEmail: "Please enter a valid email address!",
                loginAvailable: "The email you entered is already in use. Please use another.",
                password: "Please enter a password of at least 6 characters.",
                validEducatorDomain: "Please use your email provided by your educational institution."
            }, e.emailError = "", e.submissionInProg = !1, e.checkedTerms = !0, e.attemptSubmit = !1, e.attemptSubmitEmail = !1, e.emailError = "", e.showPasswordCheckMark = !1, e.submit = function () {
                if (!e.submissionInProg)
                    if (e.accountForm.$valid && e.checkedTerms) e.submissionInProg = !0, o.setAccountData(e.formCreateData), Object.assign(o.eduAccountData, o.educatorInfoObj.getFlattened()), t.post("WebAccount", "noAuthCreateEducationAccount", l(o.eduAccountData)).then(function (t) {
                        if (!t.result || !t.result.Account) return e.submissionInProg = !1, t.result && t.result.alert_message && alert(t.result.alert_message), e.errorMessage = "There was an error creating your account!", !1;
                        i.login(o.eduAccountData.accountEmail, o.eduAccountData.accountPassword, null, 1).then(function (e) {
                            a.setAfterHoursTimestamp(o.eduAccountData.accountEmail), o.next()
                        }), r.track("nuf_account_create_success_educator", "nuf", "educator"), pintrk("track", "signup"), fbq("track", "CompleteRegistration", {
                            value: 0,
                            currency: "USD"
                        })
                    });
                    else {
                        e.attemptSubmit = !0, e.attemptSubmitEmail = !0;
                        var s = {
                            accountType: i.ACCOUNT_TYPE_EDUCATOR,
                            fail_reason: "Invalid form"
                        };
                        n.log(n.events.NUF_STEP_ACCOUNT_CREATE + "_fail", s)
                    }
            };
            var l = function (e) {
                var t = JSON.parse(JSON.stringify(e));
                for (var o in t) null !== t[o] && void 0 !== t[o] || delete t[o];
                return t.email = e.accountEmail, t.password = e.accountPassword, t
            };
            e.getEmailError = function () {
                var t = e.accountForm.accountEmail.$error;
                if (t.validEmail) return e.errorMessages.validEmail;
                if (t.loginAvailable) return e.errorMessages.loginAvailable;
                if (t.validEducatorDomain) {
                    var o = function (e) {
                        if (!e) return null;
                        var t = e.lastIndexOf("@");
                        if (-1 === t) return null;
                        return e.substring(t + 1)
                    }(e.accountForm.accountEmail.$viewValue);
                    return o ? function (e) {
                        return "We noticed that the email you entered ends in '" + e + "'. As Epic! is only free for educators, please use the email address provided to you by your school."
                    }(o) : e.errorMessages.validEducatorDomain
                }
            }, e.$watch("accountForm.accountPassword.$valid", function (t, o) {
                t != o && t && (e.showPasswordCheckMark = !0)
            })
        }
        e.$inject = ["$scope", "Data", "EduSignUpService", "BigQuery", "Logsly", "AccountService", "AfterHoursService"], angular.module("epicApp").controller("EduSignUpCreateController", e)
    }(),
    function () {
        function e(e, t, o) {
            e.eduSignUpService = t, e.onSubmitFail = function () {
                o.log(o.events.NUF_STEP_EDU_PERSONAL_INFO + "_fail", {
                    fail_reason: "Invalid form"
                })
            }, e.onSubmitSuccess = function () {
                t.eduAccountData.usedSchoolSearch = 1, t.next()
            }
        }
        e.$inject = ["$scope", "EduSignUpService", "BigQuery"], angular.module("epicApp").controller("EduSignUpMoreController", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            e.eduSignUpService = o, e.placeholderText = "Example 1 :\nFirst name Last name, Parent email (optional)\nFirst name Last name, Parent email (optional)\n\n-or-\n\nExample 2 :\nLast name, First name, Parent email (optional)\nLast name, First name, Parent email (optional)", e.rosterExample1 = "Last name, First Name, Parent email (optional)", e.rosterExample2 = "First name Last name, Parent email (optional)", e.attemptSubmit = !1, e.submissionInProg = !1, e.showInstructions = !1, e.skipRoster = !1, e.loggedWhyParent = !1, e.googleReady = r.initialized, e.errorInRosterInput = !1, e.isShowingPlaceholder = !0, e.formRosterData = {
                accountRoster: null
            }, e.submit = function () {
                e.skipRoster ? (i.log(i.events.NUF_STEP_EDU_ADD_STUDENT_SKIP), o.next()) : l()
            };
            var l = function () {
                if (!e.submissionInProg) {
                    e.submissionInProg = !0;
                    var n = new a;
                    n.setRosterData({
                        rosterString: e.formRosterData.accountRoster
                    }), n.setGradeToAll(o.currentGradeDict[o.eduAccountData.accountCurrentGrade]);
                    var r, l, s = {
                        import_type: "manual",
                        student_count: n.getRosterSize(),
                        email_count: n.getEmailCount(),
                        grade: o.currentGradeDict[o.eduAccountData.accountCurrentGrade]
                    };
                    i.log(i.events.NUF_STEP_EDU_ADD_STUDENT_ADD, s), r = n, (l = t.open({
                        templateUrl: "modals/roster-confirmation/roster-confirmation-modal.html",
                        controller: "RosterConfirmationController",
                        size: "lg",
                        keyboard: !1
                    })).rosterObj = r, l.fromSignUp = !0, e.submissionInProg = !1
                }
            };
            e.viewingWhyParentEmail = function () {
                e.loggedWhyParent || (i.log(i.events.NUF_STEP_EDU_ADD_STUDENT_WHY_PARENTS), e.loggedWhyParent = !0)
            };
            var s = document.getElementById("roster-text-area");

            function c() {
                e.formRosterData.accountRoster = e.placeholderText, s.classList.add("showing-placeholder"), e.isShowingPlaceholder = !0
            }
            e.isShowingPlaceholder = !0, c(), e.onTextareaFocus = function () {
                e.formRosterData.accountRoster === e.placeholderText && (e.formRosterData.accountRoster = "", s.classList.remove("showing-placeholder"), e.isShowingPlaceholder = !1), e.showInstructions = !0
            }, e.onTextareaBlur = function () {
                e.formRosterData.accountRoster && "" !== e.formRosterData.accountRoster || c(), e.showInstructions = !1
            }, e.openGoogleClassroom = function () {
                i.log(i.events.NUF_STEP_EDU_ADD_STUDENT_ADD, {
                    import_type: "google"
                }), r.openClassroom()
            }, e.$on("googleImportComplete", function (e, t) {
                var n = {
                    import_type: "google",
                    student_count: t.numStudentsAdded,
                    grade: o.currentGradeDict[o.eduAccountData.accountCurrentGrade]
                };
                i.log(i.events.NUF_STEP_EDU_ADD_STUDENT_SUCCESS, n), o.next()
            })
        }
        e.$inject = ["$scope", "$modal", "EduSignUpService", "ProfileService", "GoogleClassroomService", "BigQuery", "Roster"], angular.module("epicApp").controller("EduSignUpRosterController", e)
    }(), angular.module("epicApp").controller("MyLibraryCollectionsCtrl", ["$scope", "$state", "$stateParams", "$modal", "$mdToast", "$timeout", "$window", "Data", "StringService", "AccountService", "ProfileService", "ShareContentService", "CollectionService", "BigQuery", function (e, t, o, n, r, i, a, l, s, c, u, d, p, f) {
        e.maxTitleLength = 100, e.stringService = s, e.shareContentService = d, e.collectionService = p, f.log(f.events.MY_LIBRARY_COLLECTIONS_VIEW);
        var g = function (t) {
            var o = e.collectionList.splice(t, 1)[0];
            r.show({
                hideDelay: 5e3,
                position: "bottom right",
                controller: "CollectionDeleteToastController",
                templateUrl: "toasts/collection-delete/collection-delete.html",
                locals: {
                    collection: o
                }
            }).then(function (n) {
                n ? e.collectionList.splice(t, 0, o) : l.post("WebPlaylist", "deletePlaylist", {
                    playlistId: o.id
                })
            })
        };
        e.getAllCollections = function (t) {
            if (t > -1) p.getCollectionsForLibrary({
                pageIndex: t
            }).then(function (t) {
                e.collectionList = e.collectionList || [];
                var o = t.Playlist;
                o.forEach(function (e) {
                    e.bookCount = 0, e.videoCount = 0, e.quizCount = 0, e.simpleBookData.forEach(function (t) {
                        5 === t.type ? e.quizCount++ : 4 === t.type ? e.videoCount++ : e.bookCount++
                    })
                }), e.collectionList = e.collectionList.concat(o), e.getAllCollections(t.nextPaginationIndex), i(function () {
                    a.dispatchEvent(new Event("resize"))
                }, 500)
            });
            else if (o.deferredDeletedCollection) {
                for (var n, r, l = o.deferredDeletedCollection, s = 0; s < e.collectionList.length; s++)
                    if (r = e.collectionList[s], parseInt(r.id) === parseInt(l.id)) {
                        n = s;
                        break
                    }
                "number" == typeof n && n > -1 && g(n)
            }
        }, e.getAllCollections(0), e.goToCollection = function (e) {
            p.goToCollection(e)
        }, e.getCollectionAgeRange = function (e) {
            var t = e.age_range_min,
                o = e.age_range_max;
            return t === o ? t : t + "–" + o
        }, e.getProfilesAssignedText = function () {
            return c.isEducator() ? "Students Assigned" : "Profiles Assigned"
        }, e.openShareMenu = function (e, t, o) {
            p.logCollectionEvent(o.id, f.events.COLLECTION_SHARE, {
                source: "library"
            }), e(t)
        }, e.isTeacher = function () {
            return c.isEducator() && u.currentProfile.isParent
        }, e.showSharePinterestForCollection = function (e) {
            for (var t = e.simpleBookData || [], o = 0; o < t.length; o++)
                if (t[o].type && 5 === t[o].type) return !1;
            return !0
        }, e.openPinterestUrl = function (e) {
            var t = "http://pinterest.com/pin/create/button/?url=" + encodeURIComponent(Globals.GLOBAL_URL + "collection/" + e.id + "/" + s.getSEOFriendlyString(e.title) + "?source=pinterest&medium=social&campaign=collections") + "&media=" + encodeURIComponent(Globals.GLOBAL_URL + "collection-image/" + e.id + ".jpg") + "&description=" + encodeURIComponent(e.title + " - " + s.truncate(e.description, 150));
            d.openPinterestUrl(t, e.id, "library")
        }, e.editCollection = function (t, o) {
            p.logCollectionEvent(t.id, f.events.COLLECTION_EDIT, {
                source: "library"
            });
            var i = e.$new(!0);
            i.collection = t, n.open({
                template: "<collection-edit></collection-edit>",
                scope: i
            }).result.then(function (i) {
                if ("update" === i) r.show({
                    hideDelay: 3e3,
                    position: "bottom right",
                    controller: "CollectionUpdateToastController",
                    templateUrl: "toasts/collection-update/collection-update.html",
                    locals: {
                        collection: t
                    }
                });
                else if ("delete" === i) {
                    var a = e.$new(!0);
                    n.open({
                        template: "<collection-delete></collection-delete>",
                        scope: a
                    }).result.then(function (e) {
                        e && g(o)
                    })
                }
            })
        }, e.confirmDelete = function (t) {
            var o = e.$new(!0);
            n.open({
                template: "<collection-delete></collection-delete>",
                scope: o,
                size: "sm"
            }).result.then(function (e) {
                e && g(t)
            })
        }, e.openAssignCollection = function (t) {
            p.displayAssignModal(e.collectionList[t]), p.logCollectionEvent(e.collectionList[t].id, f.events.COLLECTION_ASSIGN, {
                source: "library"
            })
        }
    }]),
    function () {
        function e(e, t, o, n, r, i, a) {
            function l() {
                e.loading = !0, t.get("WebFavorite", "getFavoriteRowsForUserId").then(function (t) {
                    e.loading = !1, t && t.result ? (e.favoriteData = e.favoriteData || {}, e.favoriteData.collections = t.result.playlists, e.favoriteData.books = t.result.bookData, e.favoriteData.videos = t.result.videoData, e.favoriteData.quizzes = t.result.quizData, e.activeTypes = Object.keys(e.favoriteData).reduce(function (t, o) {
                        return e.favoriteData[o].length > 0 && t.push(o), t
                    }, [])) : console.warn("ERROR: Problem getting favorite books"), o(function () {
                        n.dispatchEvent(new Event("resize"))
                    }, 500)
                })
            }
            e.userHasFavorites = function () {
                var t = !1,
                    o = e.favoriteData;
                for (var n in o) {
                    var r = o[n];
                    Array.isArray(r) && r.length > 0 && (t = !0)
                }
                return t
            }, e.eduAssigningVariant = i.getVariantForEduAssign(), e.abTestService = i, r.log(r.events.MY_LIBRARY_FAVORITES_VIEW), l(), a.$on("favoriteToggled", function () {
                l()
            })
        }
        e.$inject = ["$scope", "Data", "$timeout", "$window", "BigQuery", "ABTestService", "$rootScope"], angular.module("epicApp").controller("MyLibraryFavoritesCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            e.loading = !0, n.get("WebUser", "getRecentReads", {
                limit: 25
            }).then(function (n) {
                if (e.loading = !1, n && n.result) {
                    e.recentBooksData = [], e.recentVideosData = [];
                    for (var r = n.result.books, i = n.result.videos, a = 0; a < r.length; a++) e.recentBooksData.push(r[a].book || null);
                    for (a = 0; a < i.length; a++) e.recentVideosData.push(i[a].book || null)
                } else console.warn("ERROR: Problem getting recently read books");
                t(function () {
                    o.dispatchEvent(new Event("resize"))
                }, 500)
            }), r.log(r.events.MY_LIBRARY_RECENTS_VIEW), e.eduAssigningVariant = i.getVariantForEduAssign(), e.abTestService = i
        }
        e.$inject = ["$scope", "$timeout", "$window", "Data", "BigQuery", "ABTestService"], angular.module("epicApp").controller("MyLibraryRecentReadsCtrl", e)
    }(), angular.module("epicApp").controller("NufEducatorWelcomeController", ["$stateParams", "$scope", "$mdMedia", "Logsly", "BigQuery", "$state", function (e, t, o, n, r, i) {
        t.cdn = Globals.GLOBAL_CDN_BASE, t.stepId = "educator_welcome", t.mdMedia = o, r.log(r.events.NUF_STEP_EDUCATOR_WELCOME + "_start"), "true" === e.educator && n.track("nuf_step_selected_account_type", "nuf", 1), t.onNextButton = function () {
            i.go("eduSignUp"), r.log(r.events.NUF_STEP_EDUCATOR_WELCOME + "_complete")
        }
    }]), angular.module("epicApp").controller("NufAccountTypeController", ["$scope", "$window", "$mdMedia", "Logsly", "$state", "BigQuery", function (e, t, o, n, r, i) {
        e.stepId = "account_type", e.media = o, i.log(i.events.NUF_STEP_ACCOUNT_TYPE + "_start"), e.selectAccountType = function (e) {
            i.log(i.events.NUF_STEP_ACCOUNT_TYPE + "_complete"), 0 !== e ? (n.track("nuf_step_selected_account_type", "nuf", e), 1 === e && r.go("personalizeEducatorWelcome")) : t.open(Globals.GLOBAL_URL + "promo/", "_self")
        }
    }]),
    function () {
        function e(e, t, o, n, r, i, a) {
            o.linkedExistingStudent || o.addedAndLinkedNewProfile ? o.transitionState(!0) : a.log(a.events.NUF_CONNECT_ADD_CHILD_VIEW), e.nufNewService = o, e.teacherPickerService = n, e.totalSteps = o.getTotalSteps(), e.isSubmitting = !1, e.ageOptions = {
                "2 & under": 2,
                "3 years old": 3,
                "4 years old": 4,
                "5 years old": 5,
                "6 years old": 6,
                "7 years old": 7,
                "8 years old": 8,
                "9 years old": 9,
                "10 years old": 10,
                "11 years old": 11,
                "12+ years old": 12
            }, e.gradeOptions = {
                "Pre-K": -1,
                K: 0,
                "1st Grade": 1,
                "2nd Grade": 2,
                "3rd Grade": 3,
                "4th Grade": 4,
                "5th Grade": 5,
                "6th Grade": 6,
                "7th Grade +": 7
            }, e.submit = function () {
                e.attemptedSubmit = !0, !e.isSubmitting && o.isValidLinkChildData() && (e.isSubmitting = !0, a.log(a.events.NUF_CONNECT_ADD_CHILD_SUBMIT), o.updateCurrentProfileWithNufData().then(function () {
                    o.updateCurrentProfileWithAccountEmail(), r.createEducatorAccountLinkByClassroomCode(i.currentProfile.id, n.selectedTeacher.classroomCode).then(function (e) {
                        i.reloadProfiles(), a.log(a.events.NUF_CONNECT_ADD_CHILD_SUCCESS), o.addedAndLinkedNewProfile = !0, o.transitionState(!0)
                    })
                }))
            }, e.congratsNext = function () {
                a.log(a.events.NUF_CONNECT_CONGRATS_SUBMIT), o.transitionState(!0)
            }
        }
        e.$inject = ["$scope", "Data", "NufNewService", "TeacherPickerService", "AccountLinkService", "ProfileService", "BigQuery"], angular.module("epicApp").controller("ConnectConfirmChildController", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            n.linkedExistingStudent && n.transitionState(!0), e.teacherPickerService = o, e.nufNewService = n, e.profileService = r, e.isSubmitting = !1, e.connectStudentData = {
                showStudentsResults: !1,
                studentsList: [],
                childSearchString: ""
            }, e.teacherData = o.selectedTeacher, e.teacherData || n.restartConnectFlow(), e.totalSteps = n.getTotalSteps(), t.get("Website", "noAuthFindStudentsByLoginCode", {
                loginCode: e.teacherData.classroomCode
            }).then(function (t) {
                t && t.result && t.result.studentUser && (e.connectStudentData.studentsList = t.result.studentUser, e.connectStudentData.studentsList = e.connectStudentData.studentsList.filter(function (e) {
                    return !(e.isDefault && "Guest" === e.firstName)
                }))
            }), e.searchNames = function (t) {
                return !(!t.firstName || !(t.firstName + " " + t.lastName).toLowerCase().includes(e.connectStudentData.childSearchString.toLowerCase())) || !!t.name && t.name.toLowerCase().includes(e.connectStudentData.childSearchString.toLowerCase())
            }, e.selectChild = function (t) {
                if (t) {
                    e.connectStudentData.showStudentsResults = !1;
                    var o = t.firstName ? t.firstName + " " + t.lastName : t.name;
                    e.connectStudentData.childSearchString = o, n.selectedStudentToLink = t, n.updateNufDataWithSelectedProfile()
                }
            }, e.addOwnChild = function () {
                n.updateNufDataWithSelectedProfile(!0), i.log(i.events.NUF_CONNECT_CHILD_SEARCH_ADD_STUDENT), n.transitionState(!0)
            }, e.submit = function () {
                if (!e.isSubmitting)
                    if (e.isSubmitting = !0, e.attemptedSubmit = !0, n.selectedStudentToLink) {
                        var o = r.currentProfile.id;
                        r.selectProfile(r.parentProfile.id).then(function (e) {
                            t.get("WebUserAccountLink", "transferStudentToParentAndLinkToTeacher", {
                                studentUserId: n.selectedStudentToLink.id,
                                deleteUserIds: [o]
                            }).then(function (e) {
                                e && e.result && e.result.UserAccountLink && (n.linkedExistingStudent = !0, r.reloadProfiles(), r.selectProfile(n.selectedStudentToLink.id).then(function (e) {
                                    n.updateCurrentProfileWithAccountEmail(), i.log(i.events.NUF_CONNECT_CHILD_SEARCH_SUCCESS), n.transitionState(!0)
                                }))
                            })
                        })
                    } else e.isSubmitting = !1
            }
        }
        e.$inject = ["$scope", "Data", "TeacherPickerService", "NufNewService", "ProfileService", "BigQuery"], angular.module("epicApp").controller("ConnectStudentController", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            e.totalSteps = n.getTotalSteps(), n.updateNufDataWithSelectedProfile(!0), e.teacherPickerService = r, e.ProfileService = i, r.getUsStates();
            var l = ["state", "city", "school", "teacher"];
            e.teacherPickerData = {
                showStateResults: !1,
                showCityResults: !1,
                showSchoolResults: !1,
                showTeacherResults: !1,
                showCitySelector: !1,
                showSchoolSelector: !1,
                showTeacherSelector: !1,
                teacherEmailInput: "",
                isViewingTeacherEmail: !1,
                teacherEmailErrorMessage: "",
                classCodeInput: "",
                classroomCodeErrorMessage: "",
                noInputErrorMessage: "",
                attemptedSubmit: !1,
                isSubmitting: !1
            }, e.selectState = function (t) {
                e.requestPending = !0, e.teacherPickerData.showStateResults = !1, r.searchTerms.state = t.name, e.teacherPickerData.showCitySelector = !0, r.selectState(t).then(function (t) {
                    e.requestPending = !1
                })
            }, e.selectCity = function (t) {
                e.requestPending = !0, e.teacherPickerData.showCityResults = !1, r.searchTerms.city = t, e.teacherPickerData.showSchoolSelector = !0, r.selectCity(t).then(function (t) {
                    e.requestPending = !1
                })
            }, e.selectSchool = function (t) {
                e.requestPending = !0, e.teacherPickerData.showSchoolResults = !1, r.searchTerms.school = t, e.teacherPickerData.showTeacherSelector = !0, r.selectSchool(t).then(function (t) {
                    e.requestPending = !1
                })
            }, e.selectTeacher = function (t) {
                e.teacherPickerData.showTeacherResults = !1, r.searchTerms.teacher = t.educatorPrefix + " " + t.educatorLastName, r.selectTeacher(t)
            }, e.clearTeacherPickerData = function (t) {
                if (l.includes(t)) switch (t) {
                    case "state":
                        r.selectedState = null, r.searchTerms.city = "", r.cityList = [], e.teacherPickerData.showCitySelector = !1;
                    case "city":
                        r.selectedCity = null, r.searchTerms.school = "", r.schoolList = [], e.teacherPickerData.showSchoolSelector = !1;
                    case "school":
                        r.selectedSchool = null, r.searchTerms.teacher = "", r.teacherList = [], e.teacherPickerData.showTeacherSelector = !1;
                    case "teacher":
                        r.selectedTeacher = null
                }
            }, e.clearTeacherPickerData("state"), e.selectTeacherByClassroomCode = function () {
                var t = e.teacherPickerData.classCodeInput;
                if (e.teacherPickerData.teacherEmailInput = "", e.teacherPickerData.teacherEmailErrorMessage = "", RegExp("^[a-z]{3}-?\\d{4}$", "i").test(t)) return t ? (e.teacherPickerData.classroomCodeErrorMessage = "", r.selectTeacherByClassroomCode(t).then(function (t) {
                    r.selectedTeacher ? (e.teacherPickerData.classroomCodeErrorMessage = "", e.teacherPickerData.teacherEmailErrorMessage = "") : e.teacherPickerData.classroomCodeErrorMessage = "There is no classroom with that code. Check that the code is correct or skip to create a new profile for your child. "
                })) : void 0;
                e.teacherPickerData.classroomCodeErrorMessage = "Code is invalid. Classroom codes follow this pattern: abc1234"
            }, e.selectTeacherByEmail = function () {
                var t = e.teacherPickerData.teacherEmailInput;
                return e.teacherPickerData.classCodeInput = "", e.teacherPickerData.classroomCodeErrorMessage = "", r.selectTeacherByEmail(t).then(function (t) {
                    r.selectedTeacher ? (e.teacherPickerData.teacherEmailErrorMessage = "", e.teacherPickerData.classroomCodeErrorMessage = "") : (bbb("teacher email error"), e.teacherPickerData.teacherEmailErrorMessage = "There is no teacher on Epic! with that email. Check that the email is correct or skip to create a new profile for your child. ")
                })
            }, e.submit = function () {
                e.teacherPickerData.isSubmitting || (e.teacherPickerData.isSubmitting = !0, e.teacherPickerData.attemptedSubmit = !0, a.log(a.events.NUF_CONNECT_TEACHER_SEARCH_SUBMIT), r.selectedTeacher ? (e.teacherPickerData.classCodeInput && !e.teacherPickerData.classroomCodeErrorMessage ? a.log(a.events.NUF_CONNECT_CLASS_CODE_SUCCESS) : e.teacherPickerData.teacherEmailInput && !e.teacherPickerData.teacherEmailErrorMessage && a.log(a.events.NUF_CONNECT_EMAIL_SUCCESS), n.transitionState(!0)) : (e.teacherPickerData.isSubmitting = !1, e.teacherPickerData.classroomCodeErrorMessage ? a.log(a.events.NUF_CONNECT_CLASS_CODE_FAIL) : e.teacherPickerData.teacherEmailErrorMessage && a.log(a.events.NUF_CONNECT_EMAIL_FAIL)))
            }
        }
        e.$inject = ["$scope", "$q", "Data", "NufNewService", "TeacherPickerService", "ProfileService", "BigQuery"], angular.module("epicApp").controller("ConnectTeacherController", e)
    }(),
    function () {
        function e(e, t) {
            e.curStepNumber = t.getCurStepNumber(), e.totalSteps = t.getTotalSteps(), e.ageData = {
                selectedAge: null,
                isValidName: !0,
                isValidAge: !0
            }, e.ageOptions = {
                "2 & under": 2,
                "3 years old": 3,
                "4 years old": 4,
                "5 years old": 5,
                "6 years old": 6,
                "7 years old": 7,
                "8 years old": 8,
                "9 years old": 9,
                "10 years old": 10,
                "11 years old": 11,
                "12+ years old": 12
            }, e.submit = function () {
                e.ageData.isValidName = t.isValidProfileName(), e.ageData.isValidAge = t.isValidAge(), t.isValidProfileName() && t.isValidAge() && t.transitionState(!0), bbb(t.profileData)
            }
        }
        e.$inject = ["$scope", "NufNewService"], angular.module("epicApp").controller("NufNewAgeController", e)
    }(),
    function () {
        function e(e, t, o) {
            e.subjectsAreLoaded = !1, e.subjects = [], e.checkmarkImagePath = "/img/app/nuf/subject-checkmark.png", e.age = o.getAge(), e.curStepNumber = o.getCurStepNumber(), e.totalSteps = o.getTotalSteps(), e.submissionInProg = !1, e.errorMessage = "", e.displayName = o.profileData.firstName ? o.profileData.firstName : o.profileData.profileName, e.displayName.length > 13 && (e.displayName = e.displayName.substr(0, 13) + "..."), e.submit = function () {
                if (!e.submissionInProg) {
                    if (e.submissionInProg = !0, 0 === Object.keys(o.profileData.selectedSubjectIds).length) return e.errorMessage = "Please select at least one interest. This helps us show content that you would enjoy!", void(e.submissionInProg = !1);
                    e.errorMessage = "", o.transitionState(!0), bbb(o.profileData)
                }
            }, t.get("WebSubject", "getNufSubjects", {
                age: e.age
            }).then(function (t) {
                t && t.result && t.result.ageRelatedSubjects && (o.setSubjectData(t.result.ageRelatedSubjects), e.subjects = o.getSubjectData(), e.subjectsAreLoaded = !0)
            }), e.getSubjectImagePath = function (e) {
                return e.image_path ? Globals.GLOBAL_CDN_BASE + e.image_path + "@2x.png" : Globals.GLOBAL_CDN_BASE + "section_thumbnails/section-thumbnail-" + e.subjectId + "@2x.png"
            }, e.isSubjectSelectedForOpacity = function (e) {
                return o.isSubjectSelected(e) ? "is-selected" : "is-not-selected"
            }
        }
        e.$inject = ["$scope", "Data", "NufNewService"], angular.module("epicApp").controller("NufNewSubjectsController", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            e.profileService = n, e.loading = !0, e.refreshTabs(), e.$watch(function () {
                return [n.currentProfile.id, n.currentProfile.name, n.currentProfile.firstName, n.currentProfile.lastName, n.currentProfile.avatar]
            }, function (t, n) {
                void 0 !== t && (!e.profile && e.profileService.currentProfile.isParent || (e.profile || (e.profile = e.profileService), o.get("WebAchievement", "getUserAchievementsLibrary", {}).then(function (t) {
                    e.achievements = [];
                    var o = t.result.filter(function (e) {
                            return !e.hidden
                        }),
                        n = o.filter(function (e) {
                            return !!e.completed
                        }),
                        r = o.filter(function (e) {
                            return !e.completed
                        });
                    n.sort(function (e, t) {
                        return t.dateCompleted - e.dateCompleted
                    }), r.sort(function (e, t) {
                        return e.sort - t.sort
                    }), e.achievements = e.achievements.concat(n), e.achievements = e.achievements.concat(r), e.loading = !1
                })))
            }, !0), e.getNonActiveAchievementImageUrl = r.getNonActiveAchievementImageUrl, e.getActiveAchievementImageUrl = r.getAchImgUrl, e.showAchievementDetail = r.showAchievementDetail
        }
        e.$inject = ["$scope", "$mdDialog", "Data", "ProfileService", "Achievement"], angular.module("epicApp").controller("ProfileAchievementRowsCtrl", e)
    }(),
    function () {
        function e(e, t) {
            return {
                restrict: "E",
                templateUrl: "profile/activity/profile-activity-row-achievement.html",
                scope: {
                    activity: "="
                },
                link: function (o, n, r) {
                    o.statData = [{
                        label: "Earned On",
                        value: e.toDate(o.activity.userLogEntry.date)
                    }], o.getAchievementImageUrl = function (e) {
                        return Globals.GLOBAL_CDN_BASE + "achievements/" + e + ".png"
                    }, o.showAchievementDetail = function (e, o) {
                        o.completed = 1, o.name = o.achievementName, o.desc = o.description, t.showAchievementDetail(e, o)
                    }
                }
            }
        }
        e.$inject = ["StringService", "Achievement"], angular.module("epicApp").directive("profileActivityRowAchievement", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            return {
                restrict: "E",
                templateUrl: "profile/activity/profile-activity-row-book.html",
                scope: {
                    activity: "=",
                    index: "="
                },
                link: function (i, a, l) {
                    i.statData = [{
                        label: "Time Read",
                        value: o.toTime(i.activity.userLogEntry.time)
                    }, {
                        label: "Pages Flipped",
                        value: i.activity.userLogEntry.pagesFlipped
                    }, {
                        label: "Date",
                        value: o.toDate(i.activity.userLogEntry.dateModified)
                    }], i.getBookImageUrl = function (t) {
                        return e.thumbPath(t)
                    }, i.openBook = function (e) {
                        t.open(e), n.addOpenedContentData(i.activity.userLogEntry.bookId, s, i)
                    }, i.hasProgress = function (e) {
                        return !isNaN(e) && angular.isNumber(parseFloat(e))
                    }, i.clampValue = function (e, t, o) {
                        return e = Math.max(e, t), e = Math.min(e, o)
                    };
                    var s = r.current.name,
                        c = a[0].getElementsByClassName("profile-row")[0];
                    n.makeContentItemLevelCheckIfViewedAndLog(c, s, i.activity.userLogEntry.bookId, i)
                }
            }
        }
        e.$inject = ["BookService", "BookOverlay", "StringService", "BookPresentationsLogger", "$state"], angular.module("epicApp").directive("profileActivityRowBook", e)
    }(),
    function () {
        function e(e) {
            return {
                restrict: "E",
                templateUrl: "profile/activity/profile-activity-row-level-up.html",
                scope: {
                    activity: "="
                },
                link: function (t, o, n) {
                    t.statData = [{
                        label: "Current Level",
                        value: t.activity.userLogEntry.level
                    }, {
                        label: "Date",
                        value: e.toDate(t.activity.userLogEntry.dateModified)
                    }]
                }
            }
        }
        e.$inject = ["StringService"], angular.module("epicApp").directive("profileActivityRowLevelUp", e)
    }(),
    function () {
        function e(e, t, o) {
            return {
                restrict: "E",
                templateUrl: "profile/activity/profile-activity-row-quiz.html",
                scope: {
                    activity: "=",
                    index: "="
                },
                link: function (n, r, i) {
                    n.statData = [{
                        label: "Quiz Score",
                        value: n.activity.userLogEntry.score + "%"
                    }, {
                        label: "Date",
                        value: e.toDate(n.activity.userLogEntry.date)
                    }], n.getBookImageUrl = function (e) {
                        return t.thumbPath(e)
                    }, n.openBook = function (e) {
                        o.open(e)
                    }
                }
            }
        }
        e.$inject = ["StringService", "BookService", "BookOverlay"], angular.module("epicApp").directive("profileActivityRowQuiz", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            return {
                restrict: "E",
                templateUrl: "profile/activity/profile-activity-row-video.html",
                scope: {
                    activity: "=",
                    index: "="
                },
                link: function (i, a, l) {
                    i.statData = [{
                        label: "Watch Time",
                        value: o.toTime(i.activity.userLogEntry.time)
                    }, {
                        label: "Date",
                        value: o.toDate(i.activity.userLogEntry.dateModified)
                    }], i.getBookImageUrl = function (t) {
                        return e.thumbPath(t)
                    }, i.openBook = function (e) {
                        t.open(e), r.addOpenedContentData(i.activity.userLogEntry.bookId, s, i)
                    }, i.hasProgress = function (e) {
                        return !isNaN(e) && angular.isNumber(+e)
                    };
                    var s = n.current.name,
                        c = a[0].getElementsByClassName("profile-row")[0];
                    r.makeContentItemLevelCheckIfViewedAndLog(c, s, i.activity.userLogEntry.bookId, i)
                }
            }
        }
        e.$inject = ["BookService", "BookOverlay", "StringService", "$state", "BookPresentationsLogger"], angular.module("epicApp").directive("profileActivityRowVideo", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            i.isEducator() && o.currentProfile.isParent && r.log(r.events.EDU_ACTIVITIES_STUDENT_LOG), "function" == typeof e.refreshTabs && e.refreshTabs(), n.setScrollWatchers(!0), e.$on("$destroy", n.destroyScrollWatchers), e.downloadLog = function () {
                a.location.href = e.saveLogPath
            }, e.activity = null, e.loading = !0, e.sortModel = {}, e.sortModelNonParent = {};
            var l = {
                label: "Earned On",
                property: "userLogEntry.dateModified",
                orderBy: [{
                    label: "Most Recent First",
                    reverse: 1
                }, {
                    label: "Oldest First",
                    reverse: 0
                }],
                default: !0
            };

            function s() {
                if (e.profile || !o.currentProfile.isParent) e.profile || (e.profile = o.currentProfile), e.activity = null, e.loading = !0, t.get("WebUserActivity", "getUserActivitiesByUserId", {
                    userId: e.profile.id
                }).then(function (t) {
                    bbb("Loaded activity for user: " + e.profile.id), e.activity = t.result && t.result.length > 0 ? t.result : null, e.loading = !1
                });
                else if (o.currentProfile.isParent) {
                    e.activity = null, e.loading = !0;
                    var n = e.groupId ? {
                        groupId: e.groupId
                    } : {};
                    t.get("WebUserActivity", "getUserActivitiesByTeacherId", n).then(function (t) {
                        e.activity = t.result && t.result.length > 0 ? t.result : null, e.loading = !1
                    })
                }
            }
            e.sortData = [l, {
                label: "Profile Name",
                property: "userName",
                orderBy: [{
                    label: "A - Z",
                    reverse: 0
                }, {
                    label: "Z - A",
                    reverse: 1
                }]
            }], e.sortDataNonParent = [l], e.saveLogPath = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + o.currentProfile.id + "&type=classlog", e.saveLogText = i.isEducator() ? "Download Class Log" : "Download Activity Log", e.$watch(function () {
                return e.groupId
            }, function (t, n) {
                t !== n && (s(), e.saveLogPath = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + o.currentProfile.id + "&type=classlog&groupid=" + t)
            }), s()
        }
        e.$inject = ["$scope", "Data", "ProfileService", "BookPresentationsLogger", "BigQuery", "AccountService", "$window"], angular.module("epicApp").controller("ProfileActivityRowsCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l) {
            return {
                restrict: "E",
                templateUrl: "profile/assignment/profile-assignment-row.html",
                scope: {
                    assignment: "=",
                    index: "="
                },
                link: function (e) {
                    var t = e.assignment.assignedCount ? e.assignment.assignedCount : 0,
                        o = e.assignment.usersCompleted ? e.assignment.usersCompleted.length : 0;
                    e.statData = [{
                        label: "Profiles Assigned",
                        value: t
                    }, {
                        label: "Completed",
                        value: o
                    }], e.openAssignCollection = function (e) {
                        a.displayAssignModal(e), a.logCollectionEvent(e.id, l.events.COLLECTION_ASSIGN_CLICK, {
                            one_book_special: 0
                        })
                    }, e.percentComplete = function (e) {
                        if (0 === e.assignedCount || !e.usersCompleted) return 0;
                        return Math.floor(e.usersCompleted.length / e.assignedCount * 100)
                    }
                }
            }
        }
        e.$inject = ["StringService", "EpicConfirmationService", "$modal", "BookService", "BookOverlay", "QuizService", "CollectionService", "BigQuery"], angular.module("epicApp").directive("profileAssignmentRow", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l) {
            e.loading = !0, e.abTestService = l, e.cdnUrl = Globals.GLOBAL_CDN_BASE, e.eduAssigningVariant = l.getVariantForEduAssign(), "function" == typeof e.refreshTabs && e.refreshTabs(), n.setScrollWatchers(!0), e.$on("$destroy", n.destroyScrollWatchers), e.accountService = r, e.sortModel = {}, e.sortData = [{
                    label: "Assignment Name",
                    property: "title",
                    orderBy: [{
                        label: "A - Z",
                        reverse: 0
                    }, {
                        label: "Z - A",
                        reverse: 1
                    }],
                    default: !0
                }, {
                    label: "Assigned",
                    property: "assignedCount"
                }, {
                    label: "Completed",
                    property: "usersCompleted.length"
                }], e.logBQ = function (t) {
                    t ? i.events.hasOwnProperty(t) && i.log(i.events[t], function (t) {
                        if (t && i.events.hasOwnProperty(t)) {
                            var o = {
                                EDU_ACTIVITIES_ASSIGNMENTS_SEARCH: {
                                    assignment_count: e.collectionsWithAssignmentsCount,
                                    collections_count: e.assignments.length
                                },
                                EDU_ACTIVITIES_ASSIGNMENTS_EXPLORE: {
                                    assignment_count: e.collectionsWithAssignmentsCount,
                                    collections_count: e.assignments.length
                                }
                            };
                            return o[t]
                        }
                        bbb("eventName is not a string or event is not defined on BigQuery service")
                    }(t)) : bbb("eventName should be a string")
                },
                function () {
                    if (e.profile) t.get("WebPlaylist", "getPlaylistsAndAssignmentsAndProgressDataForAssignee", {
                        assigneeId: e.profile.id
                    }).then(function (t) {
                        var o = t.result || [];
                        o = o.filter(function (e) {
                            return "assignmentData" in e
                        }), e.assignments = o, e.loading = !1
                    });
                    else if (o.currentProfile.isParent) {
                        var n = r.isEducator() ? "getPlaylistLibraryForUser" : "getDashboardPlaylistLibrary",
                            l = {
                                types: [a.TYPES.REGULAR, a.TYPES.SINGLE_BOOK]
                            };
                        t.get("WebPlaylist", n, l).then(function (t) {
                            t && t.result ? e.assignments = t.result.Playlist || [] : e.assignments = [], e.loading = !1;
                            var o = 0;
                            e.collectionsWithAssignmentsCount = o, e.assignments.forEach(function (e) {
                                e.assignedCount && e.assignedCount > 0 && o++
                            }), r.isEducator() && i.log(i.events.EDU_ACTIVITIES_CLASS_ASSIGNMENTS, {
                                assignment_count: o,
                                collections_count: e.assignments.length
                            })
                        })
                    }
                }()
        }
        e.$inject = ["$scope", "Data", "ProfileService", "BookPresentationsLogger", "AccountService", "BigQuery", "CollectionService", "ABTestService"], angular.module("epicApp").controller("ProfileAssignmentRowsCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            e.refreshTabs();
            var a = ["english", "spanish", "chinese"];
            e.showTextMessageOverlay = function (e) {
                var t = o.open({
                    templateUrl: "modals/educator-dashboard/text-message-preview.html",
                    controller: "TextMessageCopyController",
                    controllerAs: "vm",
                    size: "lg",
                    keyboard: !1
                });
                a.includes(e) || (e = "english"), t.textMessageLanguage = e
            }, e.goToRosterTab = function () {
                if (0 === i.getChildProfilesWithoutGuest().length) t.go("roster.roster-tab", {
                    sendEmail: !0
                }, {
                    reload: !0
                });
                else o.open({
                    templateUrl: "modals/add-student-emails/add-student-emails-modal.html",
                    controller: "AddStudentEmailsController",
                    size: "lg",
                    keyboard: !1,
                    scope: e
                })
            }, e.printFlyer = function (e) {
                var t = r.accountLoginCode.toLowerCase(),
                    o = i.currentProfile.educatorPrefix + " " + i.currentProfile.lastName;
                a.includes(e) || (e = "english");
                var l = Globals.GLOBAL_URL + "mp/teacher-letter.php?cc=" + encodeURIComponent(t) + "&tn=" + encodeURIComponent(o) + "&l=" + encodeURIComponent(e);
                n.open(l, "_blank")
            }
        }
        e.$inject = ["$scope", "$state", "$modal", "$window", "AccountService", "ProfileService"], angular.module("epicApp").controller("EducatorRosterShareCtrl", e)
    }(),
    function () {
        function e(e, t, o) {
            e.refreshTabs(), e.classCodeData = {
                classCode: t.accountLoginCode.toLowerCase(),
                classCodeCopied: !1
            }, e.downloadData = {
                appstoreButtonSrc: "/assets/educator-dashboard-icons/AppleStore.svg",
                appstoreHref: "https://itunes.apple.com/us/app/epic!-books-for-kids/id719219382?mt=8",
                playstoreButtonSrc: "/assets/educator-dashboard-icons/GooglePlay.svg",
                playstoreHref: "https://play.google.com/store/apps/details?id=com.getepic.Epic"
            }, e.copyCode = function () {
                var n = t.accountLoginCode.toLowerCase(),
                    r = document.createElement("input");
                r.value = n, document.body.appendChild(r).select(), document.execCommand("copy"), document.body.removeChild(r).select(), e.classCodeData.classCodeCopied = !0, o(function () {
                    e.classCodeData.classCodeCopied = !1
                }, 2500)
            }
        }
        e.$inject = ["$scope", "AccountService", "$timeout"], angular.module("epicApp").controller("EducatorRosterStudentLoginCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s) {
            return {
                restrict: "E",
                templateUrl: function (e, t) {
                    return r.isEducator() && i.currentProfile.isParent ? "profile/header/educator-activities-header.html" : "profile/header/profile-header.html"
                },
                scope: !0,
                link: function (c) {
                    function u() {
                        return c.$parent.levelDataLib && c.$parent.levelDataLib.Level && c.$parent.levelDataLib.Level.filter(function (e) {
                            return e.xpLevel === c.getUserLevel()
                        }) || null
                    }
                    c.media = o, c.accountService = r, c.profileService = i, c.profileEditService = a, c.stateService = e, c.tapService = l, c.hasFetchedReadingLog = !0, c.booksFinished = 0, c.readTime = 0, c.videosWatched = 0, c.isEducator = r.isEducator(), c.leftSideCopyLayoutAlign = "teacher" === i.currentProfile.userType || "parent" === i.currentProfile.userType ? "start start" : "space-between start", c.rightBlockLayoutAlign = "teacher" === i.currentProfile.userType ? "start center" : "start end", l.refreshTapFunds(), c.getUserLevel = function () {
                        return i.currentProfile.xpLevel || null
                    }, c.getUserLevelTitle = function () {
                        var e = u();
                        return e && e.length && u()[0].title || null
                    }, c.getProgressTowardNextLevel = function () {
                        return i.currentProfile.xp / u()[0].xp * 100
                    }, i.currentProfile.isParent ? c.$watch(function () {
                        return i.childProfiles ? i.childProfiles.length : 0
                    }, function (e, o) {
                        c.loadingStats = !0;
                        var n = 0,
                            r = 0,
                            a = 0,
                            l = t("removePendingProfilesForAccountId")(i.childProfiles, i.currentProfile.accountId);
                        if (l && l.length > 0)
                            for (var s = 0; s < l.length; s++) n += l[s].booksFinished || 0, r += l[s].readTime || 0, l[s].videosWatched && "NaN" !== l[s].videosWatched && (a += l[s].videosWatched);
                        c.booksFinished = n, c.readTime = r, c.videosWatched = a, c.loadingStats = !1
                    }) : c.$watch(function () {
                        return i.currentProfile.booksFinished
                    }, function (e, t) {
                        c.loadingStats = !0, i.updateProfileStats().then(function () {
                            c.booksFinished = i.currentProfile.booksFinished || 0, c.readTime = i.currentProfile.readTime || 0, c.videosWatched = i.currentProfile.videosWatched || 0, c.loadingStats = !1
                        })
                    }), c.numApprovedProfiles = function () {
                        var e, t, o = 0,
                            n = i.childProfiles.length;
                        for (e = 0; e < n; e++) !(t = i.childProfiles[e]).isOwnedByAccountId(r.id) && t.isProfilePendingApproval() || o++;
                        return o
                    }, c.goToEnrollTap = function () {
                        e.go("tap.enroll")
                    }, c.goToTapFunds = function () {
                        e.go("tap.index")
                    }, c.goToAccountManage = function () {
                        n.log(n.events.ACCOUNT_SETTINGS, {
                            source: "dashboard"
                        }), e.go("accountManage")
                    }, c.showPreferencesOverlay = s.showPreferencesOverlay, c.showPrefs = s.preferencesEnabled()
                }
            }
        }
        e.$inject = ["$state", "$filter", "$mdMedia", "BigQuery", "AccountService", "ProfileService", "ProfileEditService", "TapService", "PreferencesService"], angular.module("epicApp").directive("profileHeader", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s) {
            return {
                restrict: "E",
                templateUrl: "profile/profiles/educator-roster-row.html",
                scope: {
                    profile: "=",
                    selectCtrl: "=",
                    onRefresh: "="
                },
                link: function (s) {
                    function c(e) {
                        a.open({
                            templateUrl: "modals/alert/epic-alert.html",
                            controller: "EpicAlertCtrl",
                            controllerAs: "ctrl",
                            resolve: {
                                params: function () {
                                    return {
                                        title: "Transfer Error",
                                        message: e,
                                        submit: "OK"
                                    }
                                }
                            }
                        })
                    }

                    function u() {
                        return s.onRefresh()
                    }
                    s.profileService = o, s.accountService = e, s.accountLinkService = t, s.maxNameLength = 25, s.updatesToProfile = {
                        name: {
                            valueFirst: s.profile.firstName,
                            valueLast: s.profile.lastName,
                            isEditing: !1
                        },
                        email: {
                            value: s.profile.email || "",
                            isEditing: !1
                        },
                        pin: {
                            value: s.profile.pin,
                            isEditing: !1
                        }
                    }, s.canEditEmailField = function () {
                        return s.profile.homeAccessStatus === t.HOME_ACCESS_STATUS_PENDING || s.profile.homeAccessStatus === t.HOME_ACCESS_STATUS_CAN_ENABLE
                    }, s.shouldShowEmail = function () {
                        return s.profile.email && (s.profile.homeAccessStatus === t.HOME_ACCESS_STATUS_PENDING || s.profile.homeAccessStatus === t.HOME_ACCESS_STATUS_ENABLED)
                    }, s.approveProfileTransfer = function (e) {
                        if (s.approvingTransfer) return;
                        s.approvingTransfer = !0, i.post("WebUserAccountTransfer", "noAuthConfirmUserTransferToEmail", {
                            tid: e.id,
                            sig: e.sig
                        }).then(function (e) {
                            var t = e.result;
                            t.error ? s.transferError = t.error : u(), s.approvingTransfer = !1
                        })
                    }, s.cancelProfileTransfer = function (e) {
                        r.setTitle("Cancel Profile Transfer"), r.setDescription("Are you sure you want to cancel the profile transfer?"), r.show().then(function () {
                            cancelTransferRequest(e).then(function (e) {
                                e.result.error || u()
                            })
                        })
                    }, s.transferProfile = function (e) {
                        var t = s.$new(!0);
                        t.profileIds = [e.id], t.profileName = e.name, t.profileAvatars = [e.avatar], t.onSuccess = u, t.onFailure = c, a.open({
                            templateUrl: "modals/profile-transfer/profile-transfer.html",
                            scope: t,
                            controller: "ProfileTransferController"
                        })
                    }, s.rejectLink = function (e) {
                        s.accountLinkService.rejectAccountLink(e, u).then(function (e) {
                            u()
                        })
                    }, s.enableHomeAccess = function (e) {
                        n.showEnableHomeAccess(e)
                    }, s.resendHomeAccess = function (e) {
                        n.sendEnableHomeAccessRequest(e)
                    }, s.cancelHomeAccess = function (e) {
                        e.email = null, e.pendingAccountLink = [], e.userAccountTransfer = [], o.updateProfile(e).then(function (t) {
                            bbb("Home access request canceled", e)
                        })
                    }, s.onClickEditEmailPencil = function () {
                        var e = s.profile.email ? l.events.EDU_ROSTER_EMAIL_EDIT : l.events.EDU_ROSTER_ADD_EMAIL_CLICK;
                        l.log(e)
                    }, s.onClickEnableHomeAccessButton = function () {
                        var e = s.profile.homeAccessStatus === t.HOME_ACCESS_STATUS_CAN_ENABLE && s.profile.email ? l.events.EDU_ROSTER_MP_EMAIL_ENABLE_HOME_ACCESS : l.events.EDU_ROSTER_ADD_EMAIL_HOME_ACCESS_CLICK;
                        l.log(e)
                    }, s.onClickResendHomeAccess = function () {
                        l.log(l.events.EDU_ROSTER_ADD_EMAIL_RESEND)
                    }, s.selectProfile = function () {
                        s.selectCtrl.select(s.profile)
                    }, s.reloadChildProfile = u, s.currentAccountOwns = function (e) {
                        return e.isOwnedByAccountId(o.parentProfile.accountId)
                    }, s.updateProfile = function (e) {
                        var t = {};
                        if ("name" === e) {
                            if (s.updatesToProfile.name.isEditing = !1, s.updatesToProfile.name.valueFirst === s.profile.firstName && s.updatesToProfile.name.valueLast == s.profile.lastName) return;
                            t.firstName = s.updatesToProfile.name.valueFirst, t.lastName = s.updatesToProfile.name.valueLast
                        } else if ("pin" === e) {
                            if (!/^[0-9]{4}$/.test(s.updatesToProfile.pin.value) && s.updatesToProfile.pin.value) return void(s.pinErrorMessage = "PINs must be 4 numbers");
                            if (s.updatesToProfile.pin.isEditing = !1, s.profile.pin === s.updatesToProfile.pin.value) return;
                            s.pinErrorMessage = "", t.pin = s.updatesToProfile.pin.value
                        }
                        o.updateProfile(s.profile, t).then(function () {})
                    }, s.pinErrorMessage = ""
                }
            }
        }
        e.$inject = ["AccountService", "AccountLinkService", "ProfileService", "ProfileEditService", "EpicConfirmationService", "Data", "$modal", "BigQuery", "$timeout"], angular.module("epicApp").directive("educatorRosterRow", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p) {
            c.log(c.events.EDU_ROSTER_VIEW), e.refreshTabs();
            var f = e.selectCtrl;

            function g() {
                function n(t) {
                    return o.createGroup(t, f.getValues("id")).then(function (n) {
                        var r = o.getGroupByName(t);
                        if (0 === f.getValues("id").length) h(r);
                        else {
                            var i = r ? r.id : null;
                            e.selectGroup(i)
                        }
                        return n
                    })
                }
                t.show({
                    templateUrl: "md-dialog/classroom-groups/classroom-create-group/classroom-create-group-dialog.html",
                    controller: "ClassroomCreateGroupDialogCtrl",
                    clickOutsideToClose: !0,
                    resolve: {
                        params: function () {
                            return {
                                createGroup: n
                            }
                        }
                    }
                })
            }

            function m() {
                var e = new i(o.classroomGroups);

                function n() {
                    return o.setProfilesForGroups(e.getValues("id"), f.getValues("id")).then(function () {
                        f.deselectAll()
                    })
                }
                t.show({
                    templateUrl: "md-dialog/classroom-groups/classroom-add-to-groups/classroom-add-to-groups-dialog.html",
                    controller: "ClassroomAddToGroupsDialogCtrl",
                    clickOutsideToClose: !0,
                    resolve: {
                        params: function () {
                            return {
                                groupSelectCtrl: e,
                                addToGroups: n
                            }
                        }
                    }
                })
            }

            function h(n) {
                var r = n ? n.id : e.groupId,
                    a = o.getGroupById(r),
                    l = new i(o.getProfilesNotInGroup(a.id));

                function u() {
                    return o.setProfilesForGroups([a.id], l.getValues("id"), null).then(function (t) {
                        if (e.selectGroup(a.id), t) {
                            for (var n = null, r = 0; r < t.length; r++)
                                if (t[r].id === a.id) {
                                    n = t[r];
                                    break
                                } s.isEducator() && o.currentProfile.isParent && c.log(c.events.EDU_ROSTER_ADD_STUDENT_TO_GROUP, {
                                group_add_student_count: n.userIds.length
                            })
                        }
                    })
                }
                t.show({
                    templateUrl: "md-dialog/classroom-groups/classroom-add-profiles/classroom-add-profiles-dialog.html",
                    controller: "ClassroomAddProfilesDialogCtrl",
                    clickOutsideToClose: !0,
                    resolve: {
                        params: function () {
                            return {
                                selectCtrl: l,
                                group: a,
                                addToGroup: u
                            }
                        }
                    }
                })
            }

            function v() {
                function n() {
                    return o.setProfilesForGroups([e.groupId], null, f.getValues("id")).then(function () {
                        e.selectGroup(e.groupId)
                    })
                }
                t.show({
                    templateUrl: "md-dialog/classroom-groups/classroom-remove-from-group/classroom-remove-from-group-dialog.html",
                    controller: "ClassroomRemoveFromGroupDialogCtrl",
                    clickOutsideToClose: !0,
                    resolve: {
                        params: function () {
                            return {
                                total: e.profiles.length,
                                numSelected: f.selected.length,
                                removeFromGroup: n
                            }
                        }
                    }
                })
            }

            function b() {
                var n = o.getGroupById(e.groupId);

                function r(t) {
                    return o.renameGroup(e.groupId, t).then(function (e) {
                        return e
                    })
                }
                t.show({
                    templateUrl: "md-dialog/classroom-groups/classroom-rename-group/classroom-rename-group-dialog.html",
                    controller: "ClassroomRenameGroupDialogCtrl",
                    clickOutsideToClose: !0,
                    resolve: {
                        params: function () {
                            return {
                                groupName: n.name,
                                renameGroup: r
                            }
                        }
                    }
                })
            }

            function S() {
                var n = o.getGroupById(e.groupId).name || "unknown";

                function r() {
                    return o.deleteGroup(e.groupId).then(function (t) {
                        e.selectGroup(null), s.isEducator() && o.currentProfile.isParent && c.log(c.events.EDU_ROSTER_DELETE_GROUP_SUCCESS, {
                            group_name: n,
                            group_count: o.classroomGroups.length
                        })
                    })
                }
                t.show({
                    templateUrl: "md-dialog/classroom-groups/classroom-delete-group/classroom-delete-group-dialog.html",
                    controller: "ClassroomGroupDeleteDialogCtrl",
                    clickOutsideToClose: !0,
                    resolve: {
                        params: function () {
                            return {
                                groupName: n,
                                deleteGroup: r
                            }
                        }
                    }
                })
            }

            function y() {
                function e(e) {
                    return r.assignCollections(f.getValues("id"), e.getValues("id")).then(function (e) {
                        f.deselectAll()
                    })
                }
                t.show({
                    templateUrl: "md-dialog/collections/collection-assign/collection-assign-dialog.html",
                    controller: "CollectionAssignDialogCtrl",
                    clickOutsideToClose: !0,
                    resolve: {
                        params: function () {
                            return {
                                assignCollections: e
                            }
                        }
                    }
                })
            }

            function C() {
                var t = f.selected.length > 0 ? f.selected : e.profiles;
                if (s.isEducator() && o.currentProfile.isParent && c.log(c.events.EDU_ROSTER_TRANSFER_ATTEMPT, {
                        transfer_student_count: f.selected.length
                    }), !(t = t.filter(function (e) {
                        if (e.id && !e.isDefault && 1 === e.accountType) return e
                    })).length) {
                    var n = e.$new(!0);
                    return n.onClose = e.refreshProfiles, e.showError("No selected profiles are eligible for transfer.", n)
                }
                var r = t.map(function (e) {
                        return e.id || null
                    }),
                    i = t.length > 3 ? t.slice(0, 3).map(function (e) {
                        return e.avatar
                    }) : t.map(function (e) {
                        return e.avatar
                    }),
                    l = e.$new(!0);
                l.profileIds = r, l.profileName = 1 === l.profileIds.length ? t[0].name : t.length + " Student Profiles", l.profileAvatars = i, l.onSuccess = e.refreshProfiles, l.onFailure = e.showError, a.open({
                    templateUrl: "modals/profile-transfer/profile-transfer.html",
                    scope: l,
                    controller: "ProfileTransferController"
                })
            }
            e.stateService = l, e.profileService = o, e.onEditSuccess = function (t) {
                t && t.result ? t.result.alert_message ? e.error = t.result.alert_message : (e.error = "", c.log(c.events.EDU_ROSTER_ADD_STUDENT_SUCCESS, {
                    student_count: 1,
                    email_count: e.newProfileData.email ? 1 : 0,
                    grade: e.newProfileData.grade
                }), p.show({
                    hideDelay: 5e3,
                    position: "bottom right",
                    controller: "ProfileCreatedToastController",
                    templateUrl: "toasts/profile-created/profile-created.html",
                    locals: {
                        profile: e.newProfileData
                    }
                }), o.setProfilesForGroups([e.groupId], [t.result.newProfile.id]).then(function () {
                    e.selectGroup(e.groupId)
                }), e.newProfileData = o.getNewProfile(), e.newProfileData.name = "") : e.error = "Oops, there was an error creating this profile!"
            }, e.googleClassroomClicked = function () {
                u.openClassroom(), c.log(c.events.EDU_ROSTER_GOOGLE_CLASSROOM), u.fromRosterPage = !0
            }, e.showUploadRoster = function () {
                a.open({
                    templateUrl: "modals/roster-add-students/roster-add-students-modal.html",
                    controller: "RosterAddStudentsController",
                    size: "lg",
                    keyboard: !1
                })
            }, e.updateGrade = function (t) {
                e.newProfileData.grade = d.gradeKeyToInt[t]
            }, e.showCreateGroup = g, e.selectSort = function (t) {
                var o = e.sortDataRoster[t];
                e.sortModel.property = o.property, e.sortModel.reverse = o.reverse, o.reverse = 0 === o.reverse ? 1 : 0
            }, e.disableAddStudents = function () {
                return !f.noneSelected()
            }, e.toggleAddStudent = function () {
                e.profileCreateFormIsCollapsed.value = !e.profileCreateFormIsCollapsed.value, e.profileCreateFormIsCollapsed.value || document.getElementById("epic-app-content-container").scrollTo(0, 0)
            }, e.newProfileData = o.getNewProfile(), e.newProfileData.name = "", e.creatingText = "Create Profile", e.googleReady = u.initialized, s.isEducator() && u.initialize(), e.selectedGradeData = {
                selectedGrade: d.gradeIntToString[o.currentProfile.grade]
            }, e.sortModel = {
                property: null,
                reverse: null
            }, e.sortDataRoster = {
                name: {
                    label: "Student Name",
                    property: "name",
                    reverse: 0
                },
                grade: {
                    label: "Grade",
                    property: "grade",
                    reverse: 0
                },
                email: {
                    label: "Parent Email",
                    property: "email",
                    reverse: 0
                },
                status: {
                    label: "Parent/Guardian Status",
                    property: ["approvedAccountLink.length", "email"],
                    reverse: 1
                }
            }, e.gradeOptions = ["Pre-K", "K", "1st Grade", "2nd Grade", "3rd Grade", "4th Grade", "5th Grade", "6th Grade", "7th Grade +"], e.actionOptions = [{
                condition: function () {
                    return !e.groupId || e.groupId && !f.noneSelected()
                },
                conditionalLabel: function () {
                    return f.noneSelected() ? "Create Group" : "Create Group from Selected"
                },
                method: g
            }, {
                condition: function () {
                    return !e.groupId && !f.noneSelected()
                },
                label: "Add Selected to Group(s)",
                method: m
            }, {
                condition: function () {
                    return e.groupId && f.noneSelected()
                },
                label: "Add Profiles to Group",
                method: h
            }, {
                condition: function () {
                    return e.groupId && !f.noneSelected()
                },
                label: "Remove Selected from Group",
                method: v
            }, {
                condition: function () {
                    return null !== e.groupId && f.noneSelected()
                },
                label: "Rename This Group",
                method: b
            }, {
                condition: function () {
                    return null !== e.groupId && f.noneSelected()
                },
                label: "Remove Group",
                method: S
            }, {
                condition: function () {
                    return !f.noneSelected()
                },
                label: "Assign Collection to Selected",
                method: y
            }, {
                condition: function () {
                    return !f.noneSelected()
                },
                label: "Drop Selected Profiles",
                method: function () {
                    n.showDeleteProfiles(f.selected).then(function () {
                        e.selectGroup(e.groupId)
                    })
                }
            }, {
                condition: function () {
                    return f.noneSelected()
                },
                label: "Select profiles to view more options",
                disabled: !0,
                style: {
                    "font-size": "12px",
                    "font-style": "italic",
                    color: "#c8cfd3"
                }
            }, {
                conditionalLabel: function () {
                    return f.allSelected || f.noneSelected() ? "Transfer All Students" : "Transfer Selected"
                },
                method: C
            }], e.createGroupAction = {
                label: "Create Group",
                method: g
            }, e.addStudentsToGroupAction = {
                condition: function () {
                    return e.groupId
                },
                disabledCondition: function () {
                    return !f.noneSelected()
                },
                label: "Add Students to Group",
                method: h
            }, e.groupActions = [{
                condition: function () {
                    return !0
                },
                label: "Edit Group Name",
                method: b
            }, {
                condition: function () {
                    return !0
                },
                label: "Remove Group",
                method: S
            }, {
                condition: function () {
                    return f.noneSelected()
                },
                label: "Transfer All",
                method: C
            }], e.selectedActions = [{
                condition: function () {
                    return !f.noneSelected()
                },
                label: "Assign Collection",
                method: y
            }, {
                condition: function () {
                    return (!e.groupId || e.groupId && !f.noneSelected()) && !f.noneSelected()
                },
                label: "Create Group",
                method: g
            }, {
                condition: function () {
                    return !f.noneSelected() && o.classroomGroups.length > 0
                },
                label: "Add to Group",
                method: m
            }, {
                condition: function () {
                    return e.groupId && !f.noneSelected()
                },
                label: "Remove From Group",
                method: v
            }, {
                condition: function () {
                    return !f.noneSelected() && !e.groupId
                },
                label: "Transfer Student",
                method: C
            }, {
                condition: function () {
                    return !f.noneSelected() && !e.groupId
                },
                label: "Archive Student",
                method: function () {
                    n.showArchiveProfiles(f.selected).then(function () {
                        e.selectGroup(e.groupId)
                    })
                }
            }], e.noneSelectedText = {
                condition: function () {
                    return f.noneSelected()
                },
                label: "Select students to see actions"
            }, e.sendEmail && 0 === f.selectables.length && e.showUploadRoster(), u.setCallback(function (t) {
                o.reloadProfiles();
                var n, r = [],
                    i = t.data.usersAdded.length;
                for (n = 0; n < i; n++) r.push(t.data.usersAdded[n].id);
                o.setProfilesForGroups([e.groupId], r).then(function () {
                    e.selectGroup(e.groupId)
                }), p.show({
                    hideDelay: 3e3,
                    position: "bottom right",
                    controller: "AccountImportToastController",
                    templateUrl: "toasts/account-import/account-import.html",
                    locals: {
                        numberOfNewUsers: t.data.usersAdded,
                        numberOfDuplicateUsers: t.data.duplicates
                    }
                })
            }), e.$watch(function () {
                return u.initialized
            }, function (t, o) {
                t && (e.googleReady = !0)
            }), e.selectSort("name"), e.showError = function (e, t) {
                a.open({
                    templateUrl: "modals/alert/epic-alert.html",
                    controller: "EpicAlertCtrl",
                    controllerAs: "ctrl",
                    scope: t,
                    resolve: {
                        params: function () {
                            return {
                                title: "Transfer Error",
                                message: e,
                                submit: "OK"
                            }
                        }
                    }
                })
            }
        }
        e.$inject = ["$scope", "$mdDialog", "ProfileService", "ProfileEditService", "CollectionService", "SelectCtrl", "$modal", "$state", "AccountService", "BigQuery", "GoogleClassroomService", "Roster", "$mdToast"], angular.module("epicApp").controller("EducatorRosterRowsCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            return {
                restrict: "E",
                templateUrl: "profile/profiles/educator-summary-row.html",
                scope: {
                    profile: "="
                },
                link: function (i) {
                    i.profileService = o, i.accountService = e, i.accountLinkService = t, i.isProfileLoading = {}, i.stateService = r, i.statData = [{
                        label: "Books Finished",
                        value: i.profile.booksFinished
                    }, {
                        label: "Hours Read",
                        value: n.toHours(i.profile.readTime)
                    }, {
                        label: "Last Active",
                        value: n.toDate(i.profile.dateModified)
                    }], i.currentAccountOwns = function (e) {
                        return e.isOwnedByAccountId(o.parentProfile.accountId)
                    }, i.routeToActivity = function (e) {
                        r.go("readingLog.id", {
                            id: e.id
                        })
                    }
                }
            }
        }
        e.$inject = ["AccountService", "AccountLinkService", "ProfileService", "StringService", "$state"], angular.module("epicApp").directive("educatorSummaryRow", e)
    }(),
    function () {
        function e(e, t, o, n, r, i) {
            n.log(n.events.EDU_ACTIVITIES_CLASS_SUMMARY), e.refreshTabs();
            var a = e.selectCtrl;
            e.showCreateGroup = function () {
                function n(n) {
                    return o.createGroup(n, a.getValues("id")).then(function (i) {
                        var l = o.getGroupByName(n);
                        if (0 === a.getValues("id").length) ! function (n) {
                            var i = n ? n.id : e.groupId,
                                a = o.getGroupById(i),
                                l = new r(o.getProfilesNotInGroup(a.id));

                            function s() {
                                return o.setProfilesForGroups([a.id], l.getValues("id"), null).then(function (t) {
                                    if (e.selectGroup(a.id), t)
                                        for (var o = 0; o < t.length; o++)
                                            if (t[o].id === a.id) {
                                                t[o];
                                                break
                                            }
                                })
                            }
                            t.show({
                                templateUrl: "md-dialog/classroom-groups/classroom-add-profiles/classroom-add-profiles-dialog.html",
                                controller: "ClassroomAddProfilesDialogCtrl",
                                clickOutsideToClose: !0,
                                resolve: {
                                    params: function () {
                                        return {
                                            selectCtrl: l,
                                            group: a,
                                            addToGroup: s
                                        }
                                    }
                                }
                            })
                        }(l);
                        else {
                            var s = l ? l.id : null;
                            e.selectGroup(s)
                        }
                        return i
                    })
                }
                t.show({
                    templateUrl: "md-dialog/classroom-groups/classroom-create-group/classroom-create-group-dialog.html",
                    controller: "ClassroomCreateGroupDialogCtrl",
                    clickOutsideToClose: !0,
                    resolve: {
                        params: function () {
                            return {
                                createGroup: n
                            }
                        }
                    }
                })
            }, e.downloadLog = function () {
                i.location.href = e.saveSummaryPath
            }, e.sortModel = {
                property: null,
                reverse: null
            }, e.sortData = [{
                label: "Profile Name",
                property: "name",
                orderBy: [{
                    label: "A - Z",
                    reverse: 0
                }, {
                    label: "Z - A",
                    reverse: 1
                }],
                default: !0
            }, {
                label: "Books Finished",
                property: "booksFinished"
            }, {
                label: "Hours Read",
                property: "readTime"
            }, {
                label: "Last Active",
                property: "dateModified",
                orderBy: [{
                    label: "Oldest First",
                    reverse: 0
                }, {
                    label: "Most Recent First",
                    reverse: 1
                }]
            }], e.saveSummaryPath = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + o.currentProfile.id + "&type=student_summary"
        }
        e.$inject = ["$scope", "$mdDialog", "ProfileService", "BigQuery", "SelectCtrl", "$window"], angular.module("epicApp").controller("EducatorSummaryRowsCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a, l, s, c, u, d, p) {
            return {
                restrict: "E",
                templateUrl: "profile/profiles/profile-row.html",
                scope: {
                    profile: "=",
                    selectCtrl: "=",
                    onRefresh: "="
                },
                link: function (f) {
                    function g(e) {
                        s.open({
                            templateUrl: "modals/alert/epic-alert.html",
                            controller: "EpicAlertCtrl",
                            controllerAs: "ctrl",
                            resolve: {
                                params: function () {
                                    return {
                                        title: "Transfer Error",
                                        message: e,
                                        submit: "OK"
                                    }
                                }
                            }
                        })
                    }

                    function m(e) {
                        var t = f.$new(!0);
                        t.profileIds = [e.id], t.profileName = e.name, t.profileAvatars = [e.avatar], t.onSuccess = b, t.onFailure = g, s.open({
                            templateUrl: "modals/profile-transfer/profile-transfer.html",
                            scope: t,
                            controller: "ProfileTransferController"
                        })
                    }

                    function h(e) {
                        if (!f.cancellingTransfer) return f.cancellingTransfer = !0, l.post("WebUserAccountTransfer", "noAuthCanceProfileTransfer", {
                            tid: e.id,
                            sig: e.sig
                        }).then(function (e) {
                            var t = e.result;
                            return t.error && (f.transferError = t.error), f.cancellingTransfer = !1, e
                        })
                    }

                    function v(e) {
                        var t = !1;
                        return angular.forEach(o.accountsNotFound, function (o, n) {
                            e.userId == n && (t = !0)
                        }), t
                    }

                    function b() {
                        return f.onRefresh()
                    }

                    function S(e) {
                        return e.isOwnedByAccountId(n.parentProfile.accountId)
                    }
                    f.profileService = n, f.accountService = t, f.accountLinkService = o, f.isProfileLoading = {}, f.stateService = u, f.menuData = [{
                        img: "editprofile-icon-small",
                        label: "Customize",
                        conditionalLabel: function (e) {
                            return S(e) ? "Customize" : "View Details"
                        },
                        condition: function (e) {
                            return !(t.isEducator() && e.isDefault && S(e))
                        },
                        method: function (e) {
                            r.showProfileEdit(e)
                        }
                    }, {
                        img: "view-activity-icon",
                        label: "View Activity",
                        condition: function (e) {
                            return n.currentProfile.isParent
                        },
                        method: function (e) {
                            (S(e) || e.hasApprovedLinks()) && c.show({
                                templateUrl: "md-dialog/profile/profile-activity/profile-activity-dialog.html",
                                controller: "ProfileActivityDialogCtrl",
                                clickOutsideToClose: !0,
                                resolve: {
                                    profile: function () {
                                        return e
                                    }
                                }
                            })
                        }
                    }, {
                        img: "assign-icon-small",
                        label: "Assign a Collection",
                        method: function (e) {
                            var t = f.$new(!0);
                            t.studentId = e.id, t.studentName = e.name, t.avatarId = e.avatar, s.open({
                                template: "<collection-assignments></collection-assignments>",
                                scope: t,
                                size: "sm"
                            })
                        }
                    }, {
                        img: "save-log-icon-2",
                        label: "Save Reading Log",
                        method: function (t) {
                            e.location = Globals.GLOBAL_URL + "reading-log/csv.php?dev=web&uid=" + t.id
                        }
                    }, {
                        img: "view-reading-log-icon-small",
                        label: "View Reading Log",
                        method: function (e) {
                            u.go("readingLog.id", {
                                id: e.id
                            })
                        }
                    }, {
                        img: "tap-icon-small",
                        conditionalLabel: function (e) {
                            return e.hasLinksOrTransfer() || v(e) ? e.hasPendingLink() && !e.hasApprovedLinks() ? "Connect To Your Teacher" : "Leave the Classroom" : "Connect To Your Teacher"
                        },
                        condition: function (e) {
                            return !t.isEducator() && !e.hasPendingLink()
                        },
                        method: function (e) {
                            e.hasLinksOrTransfer() || v(e) ? e.hasPendingLink() && !e.hasApprovedLinks() ? f.openClassroomConnect(e, !0) : f.accountLinkService.showAccountUnlink(e, b, e.getApprovedLink().accountUUID) : f.openClassroomConnect(e)
                        }
                    }, {
                        img: "view-groups-icon",
                        label: "View Groups",
                        condition: function (e) {
                            return t.isEducator()
                        },
                        method: function (e) {
                            var t = new d(n.classroomGroups);

                            function o() {
                                return n.setGroupsForProfiles(t.getValues("id"), [e.id]).then(function (e) {
                                    b()
                                })
                            }
                            c.show({
                                templateUrl: "md-dialog/classroom-groups/classroom-add-to-groups/classroom-add-to-groups-dialog.html",
                                controller: "ClassroomAddToGroupsDialogCtrl",
                                clickOutsideToClose: !0,
                                resolve: {
                                    params: function () {
                                        return {
                                            profile: e,
                                            groupSelectCtrl: t,
                                            addToGroups: o
                                        }
                                    }
                                }
                            })
                        }
                    }, {
                        img: "link-home-account-icon-small-2",
                        label: "Transfer Profile",
                        condition: function (e) {
                            return t.isEducator() && !e.isDefault && !e.hasLinksOrTransfer()
                        },
                        method: m
                    }, {
                        img: "delete-icon-small",
                        label: "Delete Profile",
                        condition: function (e) {
                            return !(t.isEducator() && e.isDefault && S(e) || e.isProfilePendingTransfer())
                        },
                        conditionalLabel: function (e) {
                            return S(e) ? "Delete Profile" : "Remove from class"
                        },
                        method: function (e) {
                            S(e) ? r.showDeleteProfiles([e]) : o.showAccountUnlink(e, b)
                        },
                        styling: ["pink-d"]
                    }], f.statData = [{
                        label: "Books Finished",
                        value: f.profile.booksFinished
                    }, {
                        label: "Hours Read",
                        value: i.toHours(f.profile.readTime)
                    }, {
                        label: "Last Active",
                        value: i.toDate(f.profile.dateModified)
                    }], f.onMenuClick = function (e, t) {
                        f.menuData[e].method(t)
                    }, f.openClassroomConnect = function (e, t) {
                        p.open(e.id, e.name, e.avatar, !!t)
                    }, f.approveProfileTransfer = function (e) {
                        if (f.approvingTransfer) return;
                        f.approvingTransfer = !0, l.post("WebUserAccountTransfer", "noAuthConfirmUserTransferToEmail", {
                            tid: e.id,
                            sig: e.sig
                        }).then(function (e) {
                            var t = e.result;
                            t.error ? f.transferError = t.error : b(), f.approvingTransfer = !1
                        })
                    }, f.cancelTransferRequest = h, f.cancelProfileTransfer = function (e) {
                        a.setTitle("Cancel Profile Transfer"), a.setDescription("Are you sure you want to cancel the profile transfer?"), a.show().then(function () {
                            h(e).then(function (e) {
                                e.result.error || b()
                            })
                        })
                    }, f.transferProfile = m, f.linkNotFound = v, f.rejectLink = function (e) {
                        if (f.isProfileLoading[e.id]) return;
                        f.isProfileLoading[e.id] = !0, f.accountLinkService.rejectAccountLink(e, b).then(function (e) {
                            b()
                        })
                    }, f.reloadChildProfile = b, f.currentAccountOwns = S
                }
            }
        }
        e.$inject = ["$window", "AccountService", "AccountLinkService", "ProfileService", "ProfileEditService", "StringService", "EpicConfirmationService", "Data", "$modal", "$mdDialog", "$state", "SelectCtrl", "ClassroomConnectService"], angular.module("epicApp").directive("profileRow", e)
    }(),
    function () {
        function e(e, t, o) {
            o.log(o.events.NAVIGATION_PROFILE), e.refreshTabs();
            e.selectCtrl;
            e.profileService = t, e.sortModel = {
                property: null,
                reverse: null
            }, e.sortData = [{
                label: "Profile Name",
                property: "name",
                orderBy: [{
                    label: "A - Z",
                    reverse: 0
                }, {
                    label: "Z - A",
                    reverse: 1
                }],
                default: !0
            }, {
                label: "Books Finished",
                property: "booksFinished"
            }, {
                label: "Hours Read",
                property: "readTime"
            }, {
                label: "Last Active",
                property: "dateModified",
                orderBy: [{
                    label: "Oldest First",
                    reverse: 0
                }, {
                    label: "Most Recent First",
                    reverse: 1
                }]
            }]
        }
        e.$inject = ["$scope", "ProfileService", "BigQuery"], angular.module("epicApp").controller("ProfileRowsCtrl", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            return {
                restrict: "E",
                templateUrl: "profile/quiz/profile-quiz-row.html",
                scope: {
                    quizData: "=",
                    profile: "=?"
                },
                link: function (l) {
                    if (l.quiz = l.quizData.quiz, l.profile) {
                        var s = l.quizData.user.userQuiz;
                        l.statData = [{
                            label: "Score",
                            value: s.score + "%"
                        }, {
                            label: "Created On",
                            value: e.toDate(s.date_created)
                        }]
                    } else l.statData = [{
                        label: "Students Taken",
                        value: l.quiz.numUserTakes
                    }, {
                        label: "Average Score",
                        value: l.quiz.avgScore + "%"
                    }, {
                        label: "Created On",
                        value: e.toDate(l.quiz.date_created)
                    }];
                    l.menuData = [{
                        img: "edit-quiz-icon-small",
                        label: "Edit Quiz",
                        method: function (e) {
                            r.openWithDrawer(e.book_id), l.logBQ("EDU_ACTIVITIES_QUIZ_OPTION_CLICK", "editQuiz")
                        }
                    }, {
                        img: "view-results-quiz-icon-small",
                        label: "Quiz Results",
                        method: function (e) {
                            o.open({
                                templateUrl: "modals/quiz/quiz-list/quiz-list.html",
                                controller: "QuizListController",
                                resolve: {
                                    selectedQuiz: function () {
                                        return l.quizData
                                    },
                                    selectedUser: function () {
                                        return null
                                    }
                                }
                            }), l.logBQ("EDU_ACTIVITIES_QUIZ_OPTION_CLICK", "quizResults")
                        }
                    }, {
                        img: "publish-quiz-icon-small",
                        labelFunc: function (e) {
                            return 1 == e.published ? "Unpublish Quiz" : "Publish Quiz"
                        },
                        label: "Unpublish/Publish",
                        method: function (e) {
                            if (1 == e.published) t.setTitle("Unpublish your quiz?"), t.setDescription("If you unpublish your quiz, others won't be able to see it. Are you sure you want to unpublish your quiz?"), t.show().then(function () {
                                i.unpublishQuiz(e.id), e.published = 0
                            }), l.logBQ("EDU_ACTIVITIES_QUIZ_OPTION_CLICK", "unPublishQuiz");
                            else {
                                var o = {};
                                o.quiz = angular.copy(e), o.quizQuestions = angular.copy(e.quizQuestions);
                                var n = i.publishQuizWithValidation(e.id, o);
                                n ? e.published = 1 : (t.setTitle("Quiz Error!"), t.setDescription("Please check that you've added a quiz title and at least three questions."), t.setOneOption(!0), t.show()), l.logBQ("EDU_ACTIVITIES_QUIZ_OPTION_CLICK", "publishQuiz")
                            }
                        }
                    }, {
                        img: "take-quiz-icon-small",
                        label: "Take Quiz",
                        condition: function (e) {
                            return e && e.quizQuestions && e.quizQuestions.length > 0
                        },
                        method: function (e) {
                            var t = {};
                            t.quiz = angular.copy(e), t.quizQuestions = angular.copy(e.quizQuestions), i.setQuiz(t), i.takeQuiz(e.bookTitle), l.logBQ("EDU_ACTIVITIES_QUIZ_OPTION_CLICK", "takeQuiz")
                        }
                    }], l.getBookThumbURL = function (e, t) {
                        return n.thumbPath(e, t)
                    }, l.openBook = function (e) {
                        r.open(e)
                    }, l.logBQ = function (e, t) {
                        t ? a.log(a.events[e], {
                            students_taken: l.quiz.numUserTakes,
                            avg_score: l.quiz.avgScore,
                            option_selected: t
                        }) : a.log(a.events[e], {
                            students_taken: l.quiz.numUserTakes,
                            avg_score: l.quiz.avgScore
                        })
                    }
                }
            }
        }
        e.$inject = ["StringService", "EpicConfirmationService", "$modal", "BookService", "BookOverlay", "QuizService", "BigQuery"], angular.module("epicApp").directive("profileQuizRow", e)
    }(),
    function () {
        function e(e, t, o, n, r) {
            function i() {
                if (e.loading = !0, e.profile) {
                    var i = {
                        userId: e.profile.id
                    };
                    t.get("WebQuiz", "getQuizDataForUserId", i).then(function (t) {
                        t && t.result && t.result.quizData && (e.quizzes = t.result.quizData), e.loading = !1
                    })
                } else o.currentProfile.isParent && t.get("WebQuiz", "getQuizDataForAccount").then(function (t) {
                    t && t.result && (e.quizzes = t.result), e.loading = !1, r.isEducator() && n.log(n.events.EDU_ACTIVITIES_CLASS_QUIZ, {
                        quiz_count: e.quizzes.length
                    })
                })
            }
            "function" == typeof e.refreshTabs && e.refreshTabs(), e.profileService = o, e.quizzes = [], e.sortModel = {}, e.sortData = [{
                label: "Date Created",
                property: "quiz.date_created",
                orderBy: [{
                    label: "Most Recent First",
                    reverse: 1
                }, {
                    label: "Oldest First",
                    reverse: 0
                }],
                default: !0
            }, {
                label: "Quiz Name",
                property: "quiz.title",
                orderBy: [{
                    label: "A - Z",
                    reverse: 0
                }, {
                    label: "Z - A",
                    reverse: 1
                }]
            }, {
                label: "Quiz Status",
                property: "quiz.published",
                orderBy: [{
                    label: "Unpublished First",
                    reverse: 0
                }, {
                    label: "Published First",
                    reverse: 1
                }]
            }, {
                label: "Students Taken",
                property: "quiz.numUserTakes"
            }, {
                label: "Average Score",
                property: "quiz.avgScore"
            }], e.$on("quiz.update", function (e, t) {
                t && t.quizData && t.quizData.quiz && i()
            }), e.$on("quiz.delete", function (e, t) {
                t && i()
            }), i(), e.logBQ = function (t) {
                var o = e.quizzes.length;
                n.log(n.events[t], {
                    quiz_count: o
                })
            }
        }
        e.$inject = ["$scope", "Data", "ProfileService", "BigQuery", "AccountService"], angular.module("epicApp").controller("ProfileQuizRowsCtrl", e)
    }(),
    function () {
        function e(e, t, o, n) {
            return {
                restrict: "E",
                templateUrl: "profile/row-components/profile-row-avatar.html",
                scope: {
                    profile: "="
                },
                link: function (r, i) {
                    r.accountService = e, r.profileService = t, r.stateService = n, r.TOOLTIP_PROFILE_TRANSFER_PENDING = 0, r.TOOLTIP_PROFILE_LINK_PENDING = 1, r.TOOLTIP_PROFILE_OTHER_PENDING = 2, r.getStatus = function (e) {
                        return e.isProfilePendingTransfer() ? r.TOOLTIP_PROFILE_TRANSFER_PENDING : e.hasPendingLink() ? r.TOOLTIP_PROFILE_LINK_PENDING : r.TOOLTIP_PROFILE_OTHER_PENDING
                    }, r.getApprovedTooltipTitle = function (t) {
                        if (e.isEducator) {
                            var n = -1,
                                r = -1;
                            t.getApprovedLink() && (r = t.getApprovedLink().type, n = t.getApprovedLink().ownerAccountType);
                            var i = "";
                            switch (r) {
                                case o.ACCOUNT_USER_LINK_TYPE_OTHERS:
                                    i = "Google Classroom Account";
                                    break;
                                default:
                                    i = n == e.ACCOUNT_TYPE_EDUCATOR || n == e.ACCOUNT_TYPE_HOMESCHOOLER ? "Connect From Another Classroom" : "Enable Home Access"
                            }
                            return i
                        }
                        return "Connect To Your Teacher"
                    }, r.getApprovedTooltipText = function (t) {
                        if (e.isEducator()) {
                            var n = -1,
                                r = -1;
                            t.getApprovedLink() && (n = t.getApprovedLink().type, r = t.getApprovedLink().ownerAccountType);
                            var i = "";
                            switch (n) {
                                case o.ACCOUNT_USER_LINK_TYPE_OTHERS:
                                    i = "This profile has been import into your classroom from a Google Classroom account.";
                                    break;
                                default:
                                    i = r == e.ACCOUNT_TYPE_EDUCATOR || r == e.ACCOUNT_TYPE_HOMESCHOOLER ? "This profile has been connected to your classroom from another classroom." : "This profile has been connected to your classroom from a home account."
                            }
                            return i
                        }
                        return "This profile has been connected to your child's classroom."
                    }, r.getTooltipTitle = function (t) {
                        switch (r.getStatus(t)) {
                            case r.TOOLTIP_PROFILE_TRANSFER_PENDING:
                                return e.isEducator ? t.getPendingTransfer() && t.getPendingTransfer().type === o.ACCOUNT_USER_TRANSFER_TYPE_HOME ? "Enable Home Access" : "Transfer Profile" : "Connect To Your Teacher";
                            case r.TOOLTIP_PROFILE_LINK_PENDING:
                                return "Connect To Your Teacher";
                            default:
                                return "Profile Status"
                        }
                    }, r.getPendingIcon = function (t) {
                        return e.isEducator() ? "/assets/profile/link-pending-icon.svg" : t.isProfilePendingApproval() ? "/assets/profile/join-classroom-icon-pending.svg" : "/assets/profile/link-pending-icon.svg"
                    }, r.getApprovedIcon = function (t) {
                        if (e.isEducator) {
                            var n = -1,
                                r = -1;
                            t.getApprovedLink() && (r = t.getApprovedLink().type, n = t.getApprovedLink().ownerAccountType);
                            var i = "";
                            switch (r) {
                                case o.ACCOUNT_USER_LINK_TYPE_OTHERS:
                                    i = "/assets/profile/menu/google-classroom.png";
                                    break;
                                default:
                                    i = n == e.ACCOUNT_TYPE_EDUCATOR || n == e.ACCOUNT_TYPE_HOMESCHOOLER ? "/assets/profile/join-classroom-icon-linked.svg" : "/assets/profile/linked-to-home-icon.svg"
                            }
                            return i
                        }
                        return "/assets/profile/join-classroom-icon-linked.svg"
                    }, r.width = r.width || 60, i.css({
                        width: r.width + "px",
                        height: r.width + "px"
                    })
                }
            }
        }
        e.$inject = ["AccountService", "ProfileService", "AccountLinkService", "$state"], angular.module("epicApp").directive("profileRowAvatar", e)
    }(),
    function () {
        function e(e, t, o, n, r, i, a) {
            return {
                restrict: "E",
                templateUrl: "profile/row-components/profile-row-create.html",
                scope: {
                    groupId: "=",
                    onSuccess: "="
                },
                link: function (l) {
                    l.accountService = e, l.ageData = [{
                        name: "0-4",
                        age: 4
                    }, {
                        name: "5",
                        age: 5
                    }, {
                        name: "6",
                        age: 6
                    }, {
                        name: "7",
                        age: 7
                    }, {
                        name: "8",
                        age: 8
                    }, {
                        name: "9",
                        age: 9
                    }, {
                        name: "10",
                        age: 10
                    }, {
                        name: "11",
                        age: 11
                    }, {
                        name: "12+",
                        age: 12
                    }], l.newProfileData = t.getNewProfile(), l.newProfileData.name = "", l.creatingText = "Create Profile", l.googleReady = o.initialized, o.initialize(), o.setCallback(function (e) {
                        t.reloadProfiles();
                        var o, r = [],
                            i = e.data.usersAdded.length;
                        for (o = 0; o < i; o++) r.push(e.data.usersAdded[o].id);
                        t.setProfilesForGroups([l.groupId], r).then(function () {
                            l.onSuccess(l.groupId)
                        }), n.show({
                            hideDelay: 3e3,
                            position: "bottom right",
                            controller: "AccountImportToastController",
                            templateUrl: "toasts/account-import/account-import.html",
                            locals: {
                                numberOfNewUsers: e.data.usersAdded,
                                numberOfDuplicateUsers: e.data.duplicates
                            }
                        })
                    }), l.$watch(function () {
                        return o.initialized
                    }, function (e, t) {
                        e && (l.googleReady = !0)
                    }), l.isCollapsed = t.childProfiles.length > 3, l.onEditSuccess = function (e) {
                        e && e.result ? e.result.alert_message ? l.error = e.result.alert_message : (l.error = "", n.show({
                            hideDelay: 5e3,
                            position: "bottom right",
                            controller: "ProfileCreatedToastController",
                            templateUrl: "toasts/profile-created/profile-created.html",
                            locals: {
                                profile: l.newProfileData
                            }
                        }), t.setProfilesForGroups([l.groupId], [e.result.newProfile.id]).then(function () {
                            l.onSuccess(l.groupId)
                        }), l.newProfileData = t.getNewProfile(), l.newProfileData.name = "") : l.error = "Oops, there was an error creating this profile!"
                    }, l.googleClassroomClicked = function () {
                        o.openClassroom(), a.log(a.events.EDU_ROSTER_GOOGLE_CLASSROOM), o.fromRosterPage = !0
                    }, l.showUploadCsv = function () {
                        r.show({
                            templateUrl: "md-dialog/csv/upload-students-csv/upload-students-csv-dialog.html",
                            controller: "UploadStudentsCsvDialogCtrl",
                            clickOutsideToClose: !0
                        }).then(function () {
                            t.reloadProfiles(), l.onSuccess(l.groupId)
                        })
                    }, l.showUploadRoster = function () {
                        i.open({
                            templateUrl: "modals/roster-add-students/roster-add-students-modal.html",
                            controller: "RosterAddStudentsController",
                            size: "lg",
                            keyboard: !1
                        })
                    }
                }
            }
        }
        e.$inject = ["AccountService", "ProfileService", "GoogleClassroomService", "$mdToast", "$mdDialog", "$modal", "BigQuery"], angular.module("epicApp").directive("profileRowCreate", e)
    }(),
    function () {
        angular.module("epicApp").directive("profileRowStats", function () {
            return {
                restrict: "E",
                templateUrl: "profile/row-components/profile-row-stats.html",
                scope: {
                    data: "="
                },
                link: function (e) {}
            }
        })
    }(), angular.module("epicApp").directive("profileThemeRows", ["Achievement", function (e) {
        return {
            restrict: "E",
            templateUrl: "profile/themes/profile-theme-rows.html",
            scope: {
                profile: "=?",
                hideSort: "=?"
            },
            link: function (e, t, o) {
                e.themes = ["theme1", "theme2"]
            }
        }
    }]), angular.module("epicApp").controller("SignInMobileCtrl", ["$scope", "$state", "$stateParams", "Data", "AccountService", "ProfileService", function (e, t, o, n, r, i) {
        var a = o.mobileToWebAppSigninToken,
            l = o.destinationRoute,
            s = o.sig;
        r.loginFromMobile(a, l, s).then(function (o) {
            if (o.success) {
                var n = o;
                i.getCurrentProfile().then(function (o) {
                    i.renewTimestamp(), void 0 !== e.$close && e.$close(), n.destinationRoute && (l = n.destinationRoute), t.go(l, {
                        fromMobileLogin: 1
                    }), e.formSubmissionIsPending = !1
                })
            } else t.go("signIn")
        })
    }]), angular.module("epicApp").controller("TapConfirmCtrl", ["$scope", "$state", "$window", "AccountService", "TapService", function (e, t, o, n, r) {
        e.accountService = n, e.tapService = r, r.selectedCard || t.go("roster.tap.index"), e.confirmTapRedemption = function () {
            e.redemptionError = null, e.userPassword ? r.selectedCard ? (e.redeemPending = !0, r.confirmTapCardRedemption(e.userPassword).then(function (o) {
                e.redeemPending = !1, o.result && Array.isArray(o.result.errors) && 0 === o.result.errors.length ? t.go("roster.tap.success") : (o.result && Array.isArray(o.result.errors) && o.result.errors.length > 0 ? e.redemptionError = r.errorDictionary[o.result.errors[0]] || r.defaultError : e.redemptionError = r.defaultError, console.warn("Problem redeeming TAP Gift Card"))
            })) : e.redemptionError = "TAP redemption error. Please try again later." : e.redemptionError = "Please enter a password."
        }, e.showRemainingTapBalance = function () {
            return r.tapFunds - r.selectedCard.tapPoints >= 0
        }, e.getRemainingTapBalance = function () {
            return r.formatIntWithCommas(r.tapFunds - r.selectedCard.tapPoints)
        }, e.getTapPointsNeededForRedemption = function () {
            return r.formatIntWithCommas(Math.abs(r.tapFunds - r.selectedCard.tapPoints))
        }, e.goBack = function () {
            o.history.back()
        }
    }]), angular.module("epicApp").controller("TapEnrollCtrl", ["$scope", "$state", "Data", "AccountService", "TapService", "BigQuery", "ProfileService", function (e, t, o, n, r, i, a) {
        e.accountService = n, e.tapService = r, e.$watchGroup(["accountService.email", "accountService.tapEnrolled"], function (e) {
            e[0] && e[1] && t.go("roster.tap.index")
        }), e.tapService = r, e.enrollTap = function () {
            e.enrollErrorMessage = null, e.enrollmentPending = !0, r.enrollTap(e.tosIsChecked).then(function (o) {
                e.enrollmentPending = !1, n.tapEnrolled ? t.go("roster.tap.index") : e.enrollErrorMessage = "Error. Please try again later."
            }), e.logBQ("EDU_ROSTER_FREE_ENROLL")
        }, e.logBQ = function (e) {
            i.events.hasOwnProperty(e) ? i.log(i.events[e], {
                student_count: a.childProfiles && a.childProfiles.length ? a.childProfiles.length : 0,
                grade: a.parentProfile.grade
            }) : bbb("BigQuery does not have that event constant. Add it!")
        }
    }]), angular.module("epicApp").controller("TapFaqCtrl", ["$scope", function (e) {}]), angular.module("epicApp").controller("TapIndexCtrl", ["$state", "$scope", "AccountService", "TapService", "Logsly", "ProfileService", function (e, t, o, n, r, i) {
        t.accountService = o, t.tapService = n, t.profileService = i, t.$watchGroup(["accountService.email", "accountService.tapEnrolled"], function (t) {
            t[0] && !t[1] && e.go("roster.tap.enroll")
        }), n.refereshTapStudentProfiles(), n.getClassroomCode()
    }]), angular.module("epicApp").controller("TapRedeemCtrl", ["$scope", "$state", "TapService", function (e, t, o) {
        e.tapService = o, e.selectGiftCard = function (e) {
            o.selectTapCardForRedemption(e), t.go("roster.tap.confirm")
        }
    }]), angular.module("epicApp").controller("TapSuccessCtrl", ["$scope", "$state", "AccountService", "TapService", function (e, t, o, n) {
        n.selectedCard || t.go("roster.tap.index"), e.tapService = n, e.accountService = o, n.refreshTapFunds(), e.goToDashboard = function () {
            t.go("profile")
        }
    }]);
//# sourceMappingURL=bundle.js.map