# from xml.etree import ElementTree

# class ParseXML(object):
#     def __init__(self, xmlpath):
#         #指定输入文件路径
#         self.xmlpath = xmlpath

#     def getRoot(self):
#         #打开要解析的xml文件
#         tree = ElementTree.parse(self.xmlpath)
#         #获取xml文件的根节点对象
#         return tree.getroot()

#     def findNodeByname(self, parentNode, nodeName):
#         #通过界面名称返回节点对象
#         parentNode.find()
#         nodes = parentNode.findall(nodeName)
#         return nodes

#     def getNodeOfChildText(self, node):
#         #获取当前节点下所有子节点的节点名做key

#         childenTextdict = {i.tag: i.text for i in list(node.iter())[1:]}
#         return childenTextdict

#     def getDataFromXml(self):
#         root = self.getRoot()
#         books = self.findNodeByname(root, 'book')
#         datalist = []
#         for book in books:
#             chlidrenText = self.getNodeOfChildText(book)
#             datalist.append(chlidrenText)
#         return datalist

# if __name__ == '__main__':
#     xmlparh = ParseXML('7-1.xml')
#     datas = xmlparh.getDataFromXml()
#     for i in datas:
#         print(i['name'], i['author'])

import json, math, pandas, random

# for filename in ["7-1", "7-2", "8-1", "8-2", "9-1"]:
#     info_child = {}

#     info = pandas.DataFrame(
#         columns=["姓名", "年龄", "性别", "省份", "加入天数", "帮助人数", "分摊金额", "赔付金额", "疾病"])

#     with open("./{}.json".format(filename), "r", encoding="utf-8") as fn:
#         data = json.loads(fn.read())

#     for item in data:
#         info_child["姓名"] = item['android.view.View'][0]['android.view.View'][
#             0]['-text']
#         info_child["疾病"] = item['android.view.View'][0]['android.view.View'][
#             1]['-text']
#         info_child["年龄"] = item['android.view.View'][1]['android.view.View'][
#             0]['-text'].replace("岁", "")
#         info_child["性别"] = item['android.view.View'][1]['android.view.View'][
#             1]['-text']
#         info_child["省份"] = item['android.view.View'][1]['android.view.View'][
#             2]['-text'].replace("省", "")
#         info_child["赔付金额"] = item['android.view.View'][1]['android.view.View'][
#             3]['-text'].replace("申领互助金", "").replace("万元", "")

#         temp = item['android.view.View'][2]['-text'].split("，")
#         info_child["加入天数"] = temp[0].replace("加入相互宝", "").replace("天", "")
#         info_child["帮助人数"] = temp[1].replace("帮助了", "").replace("人", "")
#         info_child["分摊金额"] = temp[2].replace("共分摊", "").replace("元", "")

#         info = info.append(info_child, ignore_index=True)

#     info.to_excel("./{}.xlsx".format(filename), index=False)


def clean_name(item):

    if not isinstance(item, str):
        if math.isnan(item):
            names = [
                "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫",
                "蒋", "沈", "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张",
                "孔", "曹", "严", "华", "金", "魏", "陶", "姜", "戚", "谢", "邹", "喻",
                "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎",
                "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳",
                "酆", "鲍", "史", "唐", "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤",
                "滕", "殷", "罗", "毕", "郝", "邬", "安", "常", "乐", "于", "时", "傅",
                "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄",
                "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄",
                "米", "贝", "明", "臧", "计", "伏", "成", "戴", "谈", "宋", "茅", "庞",
                "熊", "纪", "舒", "屈", "项", "祝", "董", "梁", "杜", "阮", "蓝", "闵",
                "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭",
                "梅", "盛", "林", "刁", "钟", "徐", "邱", "骆", "高", "夏", "蔡", "田",
                "樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "昝", "管", "卢", "莫",
                "经", "房", "裘", "缪", "干", "解", "应", "宗", "丁", "宣", "贲", "邓",
                "郁", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚",
                "程", "嵇", "邢", "滑", "裴", "陆", "荣", "翁", "荀", "羊", "於", "惠",
                "甄", "曲", "家", "封", "芮", "羿", "储", "靳", "汲", "邴", "糜", "松",
                "井", "段", "富", "巫", "乌", "焦", "巴", "弓", "牧", "隗", "山", "谷",
                "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫",
                "宁", "仇", "栾", "暴", "甘", "钭", "厉", "戎", "祖", "武", "符", "刘",
                "景", "詹", "束", "龙", "叶", "幸", "司", "韶", "郜", "黎", "蓟", "薄",
                "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂", "索", "咸", "籍", "赖",
                "卓", "蔺", "屠", "蒙", "池", "乔", "阴", "鬱", "胥", "能", "苍", "双",
                "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵",
                "冉", "宰", "郦", "雍", "卻", "璩", "桑", "桂", "濮", "牛", "寿", "通",
                "边", "扈", "燕", "冀", "郏", "浦", "尚", "农", "温", "别", "庄", "晏",
                "柴", "瞿", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容",
                "向", "古", "易", "慎", "戈", "廖", "庾", "终", "暨", "居", "衡", "步",
                "都", "耿", "满", "弘", "匡", "国", "文", "寇", "广", "禄", "阙", "东",
                "欧", "殳", "沃", "利", "蔚", "越", "夔", "隆", "师", "巩", "厍", "聂",
                "晁", "勾", "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空",
                "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相",
                "查", "后", "荆", "红", "游", "竺", "权", "逯", "盖", "益", "桓", "公",
                "万", "俟", "司", "马", "上", "官", "欧", "阳", "夏", "侯", "诸", "葛",
                "闻", "人", "东", "方", "赫", "连", "皇", "甫", "尉", "迟", "公", "羊",
                "澹", "台", "公", "冶", "宗", "政", "濮", "阳", "淳", "于", "单", "于",
                "太", "叔", "申", "屠", "公", "孙", "仲", "孙", "轩", "辕", "令", "狐",
                "钟", "离", "宇", "文", "长", "孙", "慕", "容", "鲜", "于", "闾", "丘",
                "司", "徒", "司", "空", "丌", "官", "司", "寇", "仉", "督", "子", "车",
                "颛", "孙", "端", "木", "巫", "马", "公", "西", "漆", "雕", "乐", "正",
                "壤", "驷", "公", "良", "拓", "跋", "夹", "谷", "宰", "父", "谷", "梁",
                "晋", "楚", "闫", "法", "汝", "鄢", "涂", "钦", "段", "干", "百", "里",
                "东", "郭", "南", "门", "呼", "延", "归", "海", "羊", "舌", "微", "生",
                "岳", "帅", "缑", "亢", "况", "郈", "有", "琴", "梁", "丘", "左", "丘",
                "东", "门", "西", "门", "商", "牟", "佘", "佴", "伯", "赏", "南", "宫",
                "墨", "哈", "谯", "笪", "年", "爱", "阳", "佟"
            ]
            return "{}*".format(random.choice(names))
        else:
            raise TypeError
    elif "*" not in item:
        return "{}*{}".format(item[0], item[1::])
    else:
        return item


def clean_ill(item):
    if "乳头状甲状腺癌" in item:
        return "乳头状甲状腺癌"
    else:
        return item


def clean_count(item):
    if "共分推" in item:
        return item.replace("共分推", "")
    else:
        return item


def randow_name(sex):
    male = [
        "桂乐童", "束烨煜", "饶巍然", "欧正志", "罗华荣", "钭阳嘉", "景浩歌", "索嘉许", "怀鸿振", "郏鸿熙",
        "武伟祺", "关锐藻", "姜翰飞", "高景福", "濮高歌", "孙嘉泽", "从建安", "广泰和", "温开朗", "阎俊楠",
        "乌乐湛", "赖阳荣", "侯飞舟", "景明轩", "彭建茗", "符睿博", "越博延", "庾成荫", "郜英锐", "田建柏",
        "籍欣嘉", "扶明喆", "盖鸿才", "邴鹏运", "双鸿畴", "芮蕴藉", "雍良平", "马泰宁", "阎修永", "徐文 栋",
        "乌兴朝", "白华茂", "濮茂才", "冯凯泽", "束景辉", "漕斯伯", "徐高旻", "茹玉书", "相景胜", "晏经艺",
        "杨英韶", "郝和同", "晃正谊", "宰凯旋", "能飞宇", "康伟泽", "惠永言", "靳星津", "钟文成", "终宜春",
        "满哲彦", "聂飞雨", "谷涵煦", "容景曜", "厍成荫", "傅宏阔", " 武建义", "段英豪", "巢茂材", "班英叡",
        "苍翰采", "郜安歌", "籍承恩", "怀欣嘉", "芮飞章", "束建章", "终雨星", "张光耀", "农蕴和", "陆 俊逸",
        "邵宏阔", "璩天罡", "蓬鹏涛", "孟天材", "段项明", "权华荣", "须元德", "籍欣嘉", "盖永春", "松思博",
        "阎波峻", "蒋勇锐", "幸阳羽", "仰蕴藉", "郜星海", "宫作人", "慎密", "范宸", "冀易", "黎浩", "万亭",
        "罗迈", "田泰", "熊蚩", "吕友", "储山", "王善", "简澎", "庄安", "桂伟", "钱昴", "那永", "周乔",
        "甘星", "史马", "毛东", "欧璟", "傅孺", "易元", "能汶", "松穆", "越碧", "郁德", "杨镰", "冀克",
        "聂川", "萧卿", "衡真", "莘宣", "谷玚", "惠松", "胡福", "幸馗", "杜攀", "王信", "方孜", "袁密",
        "叶村", "韩俯", "符亦", "韶叔", "邴家", "濮倝", "吴赐", "芮儒", "瞿敬", "陈渝", "关晨", "逯融",
        "籍朋", "通龄", "耿逸", "傅段", "丁骏", "芮渝", "闻璟", "惠盈", "慕辰", "郏发", "冷喆", "靳密",
        "彭荣", "双吏", "邹维", "隗致", "顾源", "郗建", "蒙琳", "利慕", "苏奇", "阚石", "古铖", "曹峙",
        "蒲致", "茹迈", "杜诤", "汪乐", "戴才", "钱桦", "阙昱", "庄峻", " 农储", "屠进", "养尊",
        "向含", "夏鲲", "蓟伦", "余腾", "勾虚", "勾绪", "刘仇", "郏健"
    ]
    female = [
        "魏琲瓃", "黄凡阳", "家蕴秀", "熊莉绫", "隆施诗", "居笑天", "甘桂华", "池碧玉", "武妍青", "马叶彤",
        "浦瑞云", "家婉娜", "习雁玉", "江娅欣", "谭红旭", "冷孟夏", "杨妙菡", "戌清奇", "弓春枫", "曹闲静",
        "吕心香", "禄鸾瑶", "魏梓洁", "萧文英", "赵紫云", "游洛妃", "盖文墨", "苏平绿", "刘梅青", "农友容",
        "甄未央", "劳流如", "燕芸芸", "向娇然", "阙初露", "万韦茹", "宿艳蓉", "姚蕊珠", "耿悠馨", "公睿哲",
        "漕平松", "邓天悦", "夏佁然", "田丹南", "石蕴和", "堵夜天", "车秋颖", "董靓影", "越悦宜", "国秋华",
        "许念波", "劳夕文", "黎雁易", "禄凝阳", "后沂秀", "慕燕楠", "牧婉容", "汤吉欣", "夏忻忻", "姚古香",
        "惠惜玉", "萧平惠", "秦岚翠", "张韧颖", "充晶茹", "巢丹梅", " 傅隽巧", "汲兰若", "权幻丝", "廖依珊",
        "晏迎梦", "黄恨蝶", "宿慕夕", "班丝琦", "韩笑槐", "红紫菱", "熊爱琴", "菱桂枫", "林孤丝", "慎忻愉",
        "苏平晓", "甘怀萍", "束双玉", "公怡畅", "文晏如", "邴纪颖", "糜虹雨", "耿姝妍", "殳继红", "石皓洁",
        "梁乐心", "融欣颖", "刘赛 玉", "翟凌雪", "宰淑琳", "乌清逸", "史雨", "徐岚", "丁明", "束烟",
        "程勤", "满雅", "马明", "束婧", "史琪", "袁屏", "吴鹃", "吴凡", "贡评", "方依", "武珆", "习宁",
        "融叶", "甄淞", "汲漪", "相露", "那琪", "方宁", "桂筠", "屠烁", "熊璇", "曾枫", "敖梦", "晏惜",
        "农冰", "逢锦", "夏希", "宓琴", "融奴", "梁爽", "郜艺", "游庄", "郏草", "谷颖", "毛波", "乜娆",
        "能音", "戈烁", "鱼玉", "戌纯", "濮姣", "白女", "邱茹", "康彤", "衡冷", "文画", "徐宁", "暨可",
        "广茗", "梁竹", "乜洁", "晃英", "莘倩", "甘丽", "农叶", "高露", "农颜", "林呤", "简枫", "文珂",
        "文曼", "朱悦", "任越", "饶薇", "阚妆", "秦翠", "范偀", "池倩", "惠好", "幸越", "何园", "段轩",
        "芮姬", "逯文", "程炎", "邱嫔", "鄂莺", "温卓", "申漪", "幸倪", "慎琬", " 甘丹", "慕柔",
        "欧偀", "周梅", "丁卿", "堵姐", "贾荭", "党思", "慎文", "冀荣", "麴音"
    ]
    if sex == 0:
        return random.choice(male)
    else:
        return random.choice(female)


def add_line(data):
    temp = data.loc[random.randint(1, len(data) - 1)]

    if temp["性别"] == "男":
        name = randow_name(0)
    else:
        name = randow_name(0)

    temp_data = {
        "姓名":
        name.replace(name[-1], "*") if len(name) == 2 else name.replace(
            name[1], "*"),
        "年龄":
        temp["年龄"],
        "性别":
        temp["性别"],
        "省份":
        temp["省份"],
        "加入天数":
        temp["加入天数"],
        "帮助人数":
        temp["帮助人数"],
        "分摊金额":
        temp["分摊金额"],
        "赔付金额":
        temp["赔付金额"],
        "疾病":
        temp["疾病"]
    }

    rand = random.randint(400, 1100)

    df1 = data.loc[:rand]
    df2 = data.loc[rand + 1:]

    df3 = pandas.DataFrame(
        columns=["姓名", "年龄", "性别", "省份", "加入天数", "帮助人数", "分摊金额", "赔付金额", "疾病"])
    df3 = df3.append(
        temp_data,
        ignore_index=True,
    )
    data = df1.append(df3, ignore_index=True).append(df2, ignore_index=True)

    return data


# data = pandas.read_excel("./baiduAI/9_try.xlsx")
data = pandas.read_excel("./baiduAI/10-1.xlsx")
while True:
    print(len(data))
    if len(data) < 1718:
        data = add_line(data)
    else:
        break

# data["姓名"].apply(lambda x: x if "*" in x else "{}*{}".format(x[0], x[1::]))
data["姓名"] = data["姓名"].apply(lambda x: clean_name(x))
data["疾病"] = data["疾病"].apply(clean_ill)
data["分摊金额"] = data["分摊金额"].apply(clean_count)

# data.to_excel("./baiduAI/9_try_test.xlsx", index=False)
data.to_excel("./10-1.xlsx", index=False)
